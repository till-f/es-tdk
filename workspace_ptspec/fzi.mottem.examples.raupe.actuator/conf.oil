/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2011  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

CPU mySystem {
	OS myOs {
	
		EE_OPT = "DEBUG";
			
		CPU_DATA = CORTEX_MX {
			MODEL = M4;

			COMPILER_TYPE = GNU;
			MULTI_STACK = FALSE;
	  
			APP_SRC = "main.c";
			APP_SRC = "TASKs.c";
			APP_SRC = "ISR.c";

//----------IOHWA
/* MCAL */	APP_SRC = "ek_EcuA/IoHwA.c";
			
/* GPIO */	APP_SRC = "ek_EcuA/ek_MCAL/ek_GPIOx_init.c";
/* I2C  */	APP_SRC = "ek_EcuA/ek_IoHwA/ek_I2C_init.c";
/* PWM  */	APP_SRC = "ek_EcuA/ek_IoHwA/ek_PWM_init.c";
/* ADC  */	APP_SRC = "ek_EcuA/ek_IoHwA/ek_ADC_init.c";

//----------COMA
			APP_SRC = "ek_ComA/ek_ComS.c";
/* CAN  */	APP_SRC = "ek_ComA/ek_ComHwA/ek_CAN_init.c";

//----------RTE
			APP_SRC = "ek_RTE/Rte_Main.c";
			APP_SRC = "ek_RTE/Rte_Vfb.c";
		
		
//START_PSAR_SWC_API-------------------------------------------
			APP_SRC = "ek_SW_Component/SWC_Controller.c";
//END_PSAR_SWC_API-------------------------------------------
			
			
		};	
		
		EE_OPT = "__USE_SYSTICK__";
		EE_OPT = "__ADD_LIBS__";

		MCU_DATA = STM32 {
			MODEL = STM32F4xx;
		};

		LIB = ENABLE { NAME = "ST_CMSIS"; };
		
		LIB = ENABLE { 
			NAME = "STM32F4XX_SPD";
			STM32F4XX_SPD = ENABLE {
                USETIM = TRUE;
                USECAN = TRUE;
                USEMISC = TRUE; 
                USEGPIO = TRUE; 
                USERCC = TRUE;
                USEI2C = TRUE;
                USEDMA = TRUE;
                USEADC = TRUE;
            };
		};
		//temp, um Code-Einblick zu haben
		EE_OPT = "MCAL_visibility";
		EE_OPT = "__USE_STM32F4XX_SPD_CAN__";
		EE_OPT = "__USE_STM32F4XX_SPD_RCC__";		
		EE_OPT = "__USE_STM32F4XX_SPD_TIM__";
		EE_OPT = "__USE_STM32F4XX_SPD_I2C__";
		EE_OPT = "__USE_STM32F4XX_SPD_GPIO__";
		EE_OPT = "__USE_STM32F4XX_SPD_ADC__";
		EE_OPT = "__USE_STM32F4XX_SPD_DMA__";
		
		

		STATUS = STANDARD;
		STARTUPHOOK = FALSE;
		ERRORHOOK = FALSE;
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = FALSE;
		POSTTASKHOOK = FALSE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = FALSE;

		KERNEL_TYPE = FP;

	};
	
	COUNTER myCounter;
	
	//---------------------------------------------------------ALARM
	ALARM AlarmRunnableSlot1 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskRunnableSlot1; };
	};
	
	ALARM AlarmRunnableSlot2 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskRunnableSlot2; };
	};
	
	ALARM AlarmRunnableSlot3 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskRunnableSlot3; };
	};
	
	ALARM AlarmRunnableSlot4 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskRunnableSlot4; };
	};
	
	ALARM AlarmRunnableSlot5 {
		COUNTER = myCounter;
		ACTION = ACTIVATETASK { TASK = TaskRunnableSlot5; };
	};	
	
	//----------------------------------------------------------TASK
	TASK TaskRunnableSlot1 {
		PRIORITY = 0x01;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskRunnableSlot2 {
		PRIORITY = 0x01;   /* High priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskRunnableSlot3 {
		PRIORITY = 0x01;   /* High priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskRunnableSlot4 {
		PRIORITY = 0x01;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
		
	TASK TaskRunnableSlot5 {
		PRIORITY = 0x01;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	//-----------------------------------------------------------ISR
	ISR systick_handler {
		CATEGORY = 2;
		ENTRY = "SYSTICK";
		PRIORITY = 2;
	};

	ISR can_handler {
	    CATEGORY = 2;
		ENTRY = "CAN1_RX0";
	    PRIORITY = 1;
   };
   
};
