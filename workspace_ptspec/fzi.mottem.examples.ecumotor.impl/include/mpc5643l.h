/*====================================================================
* Project:  Board Support Package (BSP)
* Developed using:
* Function: Standard definitions for MPC5643L controller
*           (MPC5643L)
*
* Date: 27.09.2010 16:07:44
* Copyright HighTec EDV-Systeme GmbH 1982-2010
*====================================================================*/

#ifndef __MPC5643L_H__
#define __MPC5643L_H__

#include "mpc5643l_types.h"

#ifdef  __cplusplus
extern "C" {
#endif

/*---------------------------------------------------------------------------*/
/* Core register                                                             */
/*---------------------------------------------------------------------------*/
    struct CORE_tag {
    };                                             /* End of CORE_tag */ 
#define CORE  (*(volatile struct CORE_tag *)         0x00000000UL)

/*---------------------------------------------------------------------------*/
/* SPR register                                                              */
/*---------------------------------------------------------------------------*/
    struct SPR_tag {
    };                                             /* End of SPR_tag */ 
#define SPR  (*(volatile struct SPR_tag *)          0x00000000UL)

/*---------------------------------------------------------------------------*/
/* DCR register                                                              */
/*---------------------------------------------------------------------------*/
    struct DCR_tag {
    };                                             /* End of DCR_tag */ 
#define DCR  (*(volatile struct DCR_tag *)          0x00000000UL)

/*---------------------------------------------------------------------------*/
/* Flash Module and Flash Bus Interface Unit                                 */
/*---------------------------------------------------------------------------*/
    struct FLASH_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 5;
                vuint32_t SIZE : 3;      /* Array Space Size. The value of the SIZE field is dependent u .. */
                vuint32_t : 1;
                vuint32_t LAS : 3;      /* Low Address Space. The value of the LAS field corresponds to .. */
                vuint32_t : 3;
                vuint32_t MAS : 1;      /* Mid Address Space. The value of the MAS field corresponds to .. */
                vuint32_t EER : 1;      /* ECC Event Error. EER provides information on previous reads. .. */
                vuint32_t RWE : 1;      /* Read While Write Event Error. RWE provides information on pr .. */
                vuint32_t SBC : 1;      /* Single Bit Correction. SBC provides information on previous  .. */
                vuint32_t : 1;
                vuint32_t PEAS : 1;      /* Program/Erase Access Space. PEAS is used to indicate which s .. */
                vuint32_t DONE : 1;      /* State Machine Status. DONE indicates if the flash module is  .. */
                vuint32_t PEG : 1;      /* Program/Erase Good. The PEG bit indicates the completion sta .. */
                vuint32_t : 4;
                vuint32_t PGM : 1;      /* Program. PGM is used to setup c90fl for a program operation. .. */
                vuint32_t PSUS : 1;      /* Program Suspend. PSUS is used to indicate the flash module i .. */
                vuint32_t ERS : 1;      /* Erase. ERS is used to setup c90fl for an erase operation. A  .. */
                vuint32_t ESUS : 1;      /* Erase Suspend. ESUS is used to indicate that the flash modul .. */
                vuint32_t EHV : 1;      /* Enable High Voltage. The EHV bit enables the flash module fo .. */
            } B;
        } MCR;      /* Module configuration register */

        union {
            vuint32_t R;
            struct {
                vuint32_t LME : 1;      /* Low and mid address lock enable. Enables the locking registe .. */
                vuint32_t : 10;
                vuint32_t SLOCK : 1;      /* Shadow lock. Locks the shadow row from programs and erases.  .. */
                vuint32_t : 2;
                vuint32_t MLOCK : 2;      /* Mid address block lock. A value of 1 in a bit of the lock re .. */
                vuint32_t : 6;
                vuint32_t LLOCK : 10;      /* Low address block lock. These bits have the same description .. */
            } B;
        } LML;      /*  Low/mid address space block locking register    */

        union {
            vuint32_t R;
            struct {
                vuint32_t HBE : 1;      /* High address lock enable. Enables the locking field (HLOCK)  .. */
                vuint32_t : 25;
                vuint32_t HLOCK : 6;      /* High address space block lock. Has the same characteristics  .. */
            } B;
        } HBL;      /*  High address space block locking register    */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLE : 1;      /*  Secondary low and mid address lock enable. Enables the seco .. */
                vuint32_t : 10;
                vuint32_t SSLOCK : 1;      /*  Secondary shadow lock. An alternative method that may be us .. */
                vuint32_t : 2;
                vuint32_t SMLOCK : 2;      /*  Secondary mid address block lock. Alternative method that m .. */
                vuint32_t : 6;
                vuint32_t SLLOCK : 10;      /*  Secondary low address block lock. These bits are an alterna .. */
            } B;
        } SLL;      /*  Secondary low/mid address space block locking register    */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 14;
                vuint32_t MSEL : 2;      /*  Mid address space block select. Values in the selected regi .. */
                vuint32_t : 6;
                vuint32_t LSEL : 10;      /*  Low address space block select. Used to select blocks in th .. */
            } B;
        } LMS;      /*  Low/mid address space block select register    */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 26;
                vuint32_t HSEL : 6;      /* High address space block select. Has the same characteristic .. */
            } B;
        } HBS;      /*  High address space block select register    */

        union {
            vuint32_t R;
            struct {
                vuint32_t SAD : 1;      /* Shadow Address. The SAD bit qualifies the address captured d .. */
                vuint32_t : 10;
                vuint32_t ADDR : 18;      /* provides the first failing address in the event of ECC event .. */
            } B;
        } ADR;      /*  Address register    */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 2;
                vuint32_t B02_APC : 3;      /* Bank0+2 Address Pipelining Control. This field is used to co .. */
                vuint32_t : 3;
                vuint32_t B02_WWSC : 2;      /* Bank0+2 Write Wait State Control. This field is used to cont .. */
                vuint32_t : 2;
                vuint32_t B02_RWSC : 3;      /* Bank0+2 Read Wait State Control. This field is used to contr .. */
                vuint32_t : 2;
                vuint32_t B02_P1_BCFG : 2;      /* Bank0+2, Port_1 Page Buffer Configuration. This field contro .. */
                vuint32_t B02_P1_DPFE : 1;      /* Bank0+2, Port_1 Data Prefetch Enable. This field enables or  .. */
                vuint32_t B02_P1_IPFE : 1;      /* Bank0+2, Port_1 Instruction Prefetch Enable. This field enab .. */
                vuint32_t B02_P1_PFLM : 2;      /* Bank0+2, Port_1 Prefetch Limit. This field controls the pref .. */
                vuint32_t B02_P1_BFE : 1;      /* Bank0+2, Port_1 Buffer Enable. This bit enables or disables  .. */
                vuint32_t : 1;
                vuint32_t B02_P0_BCFG : 2;      /* Bank0+2, Port_0 Page Buffer Configuration. This field contro .. */
                vuint32_t B02_P0_DPFE : 1;      /* Bank0+2, Port_0 Data Prefetch Enable. This field enables or  .. */
                vuint32_t B02_P0_IPFE : 1;      /* Bank0+2, Port_0 Instruction Prefetch Enable. This field enab .. */
                vuint32_t B02_P0_PFLM : 2;      /* Bank0+2, Port_0 Prefetch Limit. This field controls the pref .. */
                vuint32_t B02_P0_BFE : 1;      /* Bank0+2, Port_0 Buffer Enable. This bit enables or disables  .. */
            } B;
        } PFCR0;      /* Platform Flash Configuration Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 11;
                vuint32_t M4PFE : 1;      /* Master FEC prefetch enable. Used to control whether prefetch .. */
                vuint32_t M3PFE : 1;      /* Master EBI prefetch enable. Used to control whether prefetch .. */
                vuint32_t M2PFE : 1;      /* Master eDMA prefetch enable. Used to control whether prefetc .. */
                vuint32_t M1PFE : 1;      /* Master Nexus prefetch enable. Used to control whether prefet .. */
                vuint32_t M0PFE : 1;      /* Master e200z6 core prefetch enable. Used to control whether  .. */
                vuint32_t APC : 3;      /* Address pipelining control. Used to control the number of cy .. */
                vuint32_t WWSC : 2;      /* Write wait state control. Used to control the timing for arr .. */
                vuint32_t RWSC : 3;      /* Read wait state control. Used to control the Flash array acc .. */
                vuint32_t DPFEN : 2;      /*  Data prefetch enable. Enables or disables prefetching initi .. */
                vuint32_t IPFEN : 2;      /*  Instruction prefetch enable. Enables or disables prefetchin .. */
                vuint32_t PFLIM : 3;      /*  Prefetch limit. Controls the prefetch algorithm used by the .. */
                vuint32_t BFEN : 1;      /*  FBIU line read buffers enable. Enables or disables line rea .. */
            } B;
        } PFCR1;      /* Platform Flash Configuration Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 22;
                vuint32_t M4AP : 2;      /* Master FEC access protection. Controls whether read and writ .. */
                vuint32_t M3AP : 2;      /* Master EBI access protection. Controls whether read and writ .. */
                vuint32_t M2AP : 2;      /* Master eDMA access protection. Controls whether read and wri .. */
                vuint32_t M1AP : 2;      /* Master Nexus access protection. Controls whether read and wr .. */
                vuint32_t M0AP : 2;      /* Master e200z6 core access protection. Controls whether read  .. */
            } B;
        } PFAPR;      /* Platform Flash Access Protection Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t BIU3 : 32;      /* BIU3 Generic Registers. The BIU generic registers are reset  .. */
            } B;
        } BIU3;      /* Bus Interface Unit 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t BIU4 : 32;      /* BIU4 Generic Registers. The BIU generic registers are reset  .. */
            } B;
        } BIU4;      /* Bus Interface Unit 4 */

        int8_t Reserved0[12];

        union {
            vuint32_t R;
            struct {
                vuint32_t UTE : 1;      /* U-Test Enable. This status bit gives indication when U-Test  .. */
                vuint32_t SBCE : 1;      /* Single Bit Correction Enable. SBC enables Single Bit Correct .. */
                vuint32_t : 6;
                vuint32_t DSI : 8;      /* Data Syndrome Input. These bits enable checks of ECC logic b .. */
                vuint32_t : 10;
                vuint32_t MRE : 1;      /* Margin Read Enable. MRE combined with MRV enables Factory Ma .. */
                vuint32_t MRV : 1;      /* Margin Read Value. MRV selects the margin level that is bein .. */
                vuint32_t EIE : 1;      /* ECC Data Input Enable. EIE enables the input registers (DSI  .. */
                vuint32_t AIS : 1;      /* Array Integrity Sequence. AIS determines the address sequenc .. */
                vuint32_t AIE : 1;      /* Array Integrity Enable. AIE set to one starts the array inte .. */
                vuint32_t AID : 1;      /* Array Integrity Done. AID is cleared upon an Array integrity .. */
            } B;
        } UT0;      /* User Test 0 register */

        union {
            vuint32_t R;
            struct {
                vuint32_t DAI : 32;      /* Data Array Input. These bits enable checks of ECC logic by a .. */
            } B;
        } UT1;      /* User Test 1 register */

        union {
            vuint32_t R;
            struct {
                vuint32_t DAI : 32;      /* Data Array Input. These bits enable checks of ECC logic by a .. */
            } B;
        } UT2;      /* User Test 2 register */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISR : 32;      /* accumulate a signature from an array integrity event. The MI .. */
            } B;
        } UM0;      /* User Multiple Input Signature 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISR : 32;      /* accumulate a signature from an array integrity event. The MI .. */
            } B;
        } UM1;      /* User Multiple Input Signature 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISR : 32;      /* accumulate a signature from an array integrity event. The MI .. */
            } B;
        } UM2;      /* User Multiple Input Signature 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISR : 32;      /* accumulate a signature from an array integrity event. The MI .. */
            } B;
        } UM3;      /* User Multiple Input Signature 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 15;
                vuint32_t MISR : 17;      /* accumulate a signature from an array integrity event. The MI .. */
            } B;
        } UM4;      /* User Multiple Input Signature 0 */
    };                                             /* End of FLASH_tag */ 
#define FLASH  (*(volatile struct FLASH_tag *)        0xC3F88000UL)

/*---------------------------------------------------------------------------*/
/* System Integration Unit Lite                                              */
/*---------------------------------------------------------------------------*/
    struct SIUL_tag {

        int8_t Reserved1[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t PARTNUM : 16;      /* MCU Part Number Read-only, device part number of the MCU. Fo .. */
                vuint32_t CSP : 1;      /* CSP configuration. Always reads back 0 */
                vuint32_t PKG : 5;      /* Package Settings. Can by read by software to determine the p .. */
                vuint32_t : 2;
                vuint32_t MAJOR_MASK : 4;      /* Major Mask Revision. Read-only. Counter starting at 0x0. Inc .. */
                vuint32_t MINOR_MASK : 4;      /* Minor Mask Revision. Read-only. Counter starting at 0x0. Inc .. */
            } B;
        } MIDR1;      /* MCU ID Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t SF : 1;      /* Manufacturer */
                vuint32_t FLASH_SIZE_1 : 4;      /* Define Major Flash memory size. */
                vuint32_t FLASH_SIZE_2 : 4;      /* Define Flash memory size, small granularity. */
                vuint32_t : 7;
                vuint32_t PARTNUM : 8;      /* ASCII character in MCU Part Number. */
                vuint32_t : 7;
                vuint32_t FR : 1;      /* FlexRay present */
            } B;
        } MIDR2;      /* MCU ID Register 2 */

        int8_t Reserved2[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t EIF0 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF1 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF2 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF3 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF4 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF5 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF6 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF7 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF8 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF9 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF10 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF11 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF12 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF13 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF14 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF15 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF16 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF17 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF18 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF19 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF20 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF21 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF22 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF23 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF24 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF25 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF26 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF27 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF28 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF29 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF30 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
                vuint32_t EIF31 : 1;      /* This flag can be cleared only by writing a 1. Writing a 0 ha .. */
            } B;
        } ISR;      /* Interrupt Status Flag Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t EIRE0 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE1 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE2 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE3 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE4 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE5 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE6 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE7 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE8 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE9 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE10 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE11 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE12 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE13 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE14 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE15 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE16 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE17 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE18 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE19 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE20 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE21 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE22 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE23 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE24 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE25 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE26 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE27 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE28 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE29 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE30 : 1;      /* External Interrupt Request enable n. */
                vuint32_t EIRE31 : 1;      /* External Interrupt Request enable n. */
            } B;
        } IRER;      /* Interrupt Request Enable Register */

        int8_t Reserved3[12];

        union {
            vuint32_t R;
            struct {
                vuint32_t IREE0 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE1 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE2 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE3 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE4 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE5 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE6 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE7 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE8 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE9 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE10 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE11 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE12 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE13 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE14 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE15 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE16 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE17 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE18 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE19 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE20 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE21 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE22 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE23 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE24 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE25 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE26 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE27 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE28 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE29 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE30 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
                vuint32_t IREE31 : 1;      /* Enable rising-edge events to cause the EIF[x] bit to be set. */
            } B;
        } IREER;      /* Interrupt Rising Edge Event Enable */

        union {
            vuint32_t R;
            struct {
                vuint32_t IFEE0 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE1 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE2 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE3 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE4 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE5 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE6 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE7 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE8 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE9 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE10 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE11 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE12 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE13 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE14 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE15 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE16 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE17 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE18 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE19 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE20 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE21 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE22 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE23 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE24 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE25 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE26 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE27 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE28 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE29 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE30 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
                vuint32_t IFEE31 : 1;      /* Enable falling-edge events to cause the EIF[x] bit to be set .. */
            } B;
        } IFEER;      /* Interrupt Falling-Edge Event Enable */

        union {
            vuint32_t R;
            struct {
                vuint32_t IFE0 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE1 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE2 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE3 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE4 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE5 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE6 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE7 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE8 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE9 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE10 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE11 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE12 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE13 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE14 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE15 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE16 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE17 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE18 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE19 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE20 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE21 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE22 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE23 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE24 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE25 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE26 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE27 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE28 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE29 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE30 : 1;      /* Enable digital glitch filter on the interrupt pad input */
                vuint32_t IFE31 : 1;      /* Enable digital glitch filter on the interrupt pad input */
            } B;
        } IFER;      /* Interrupt Filter Enable Register */

        int8_t Reserved4[12];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR0;      /* Pad configuration registers 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR1;      /* Pad configuration registers 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR2;      /* Pad configuration registers 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR3;      /* Pad configuration registers 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR4;      /* Pad configuration registers 4 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR5;      /* Pad configuration registers 5 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR6;      /* Pad configuration registers 6 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR7;      /* Pad configuration registers 7 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR8;      /* Pad configuration registers 8 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR9;      /* Pad configuration registers 9 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR10;      /* Pad configuration registers 10 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR11;      /* Pad configuration registers 11 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR12;      /* Pad configuration registers 12 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR13;      /* Pad configuration registers 13 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR14;      /* Pad configuration registers 14 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR15;      /* Pad configuration registers 15 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR16;      /* Pad configuration registers 16 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR17;      /* Pad configuration registers 17 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR18;      /* Pad configuration registers 18 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR19;      /* Pad configuration registers 19 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR20;      /* Pad configuration registers 20 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR21;      /* Pad configuration registers 21 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR22;      /* Pad configuration registers 22 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR23;      /* Pad configuration registers 23 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR24;      /* Pad configuration registers 24 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR25;      /* Pad configuration registers 25 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR26;      /* Pad configuration registers 26 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR27;      /* Pad configuration registers 27 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR28;      /* Pad configuration registers 28 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR29;      /* Pad configuration registers 29 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR30;      /* Pad configuration registers 30 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR31;      /* Pad configuration registers 31 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR32;      /* Pad configuration registers 32 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR33;      /* Pad configuration registers 33 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR34;      /* Pad configuration registers 34 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR35;      /* Pad configuration registers 35 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR36;      /* Pad configuration registers 36 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR37;      /* Pad configuration registers 37 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR38;      /* Pad configuration registers 38 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR39;      /* Pad configuration registers 39 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR40;      /* Pad configuration registers 40 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR41;      /* Pad configuration registers 41 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR42;      /* Pad configuration registers 42 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR43;      /* Pad configuration registers 43 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR44;      /* Pad configuration registers 44 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR45;      /* Pad configuration registers 45 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR46;      /* Pad configuration registers 46 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR47;      /* Pad configuration registers 47 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR48;      /* Pad configuration registers 48 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR49;      /* Pad configuration registers 49 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR50;      /* Pad configuration registers 50 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR51;      /* Pad configuration registers 51 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR52;      /* Pad configuration registers 52 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR53;      /* Pad configuration registers 53 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR54;      /* Pad configuration registers 54 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR55;      /* Pad configuration registers 55 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR56;      /* Pad configuration registers 56 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR57;      /* Pad configuration registers 57 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR58;      /* Pad configuration registers 58 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR59;      /* Pad configuration registers 59 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR60;      /* Pad configuration registers 60 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR61;      /* Pad configuration registers 61 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR62;      /* Pad configuration registers 62 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR63;      /* Pad configuration registers 63 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR64;      /* Pad configuration registers 64 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR65;      /* Pad configuration registers 65 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR66;      /* Pad configuration registers 66 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR67;      /* Pad configuration registers 67 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR68;      /* Pad configuration registers 68 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR69;      /* Pad configuration registers 69 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR70;      /* Pad configuration registers 70 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR71;      /* Pad configuration registers 71 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR72;      /* Pad configuration registers 72 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR73;      /* Pad configuration registers 73 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR74;      /* Pad configuration registers 74 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR75;      /* Pad configuration registers 75 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR76;      /* Pad configuration registers 76 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR77;      /* Pad configuration registers 77 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR78;      /* Pad configuration registers 78 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR79;      /* Pad configuration registers 79 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR80;      /* Pad configuration registers 80 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR81;      /* Pad configuration registers 81 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR82;      /* Pad configuration registers 82 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR83;      /* Pad configuration registers 83 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR84;      /* Pad configuration registers 84 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR85;      /* Pad configuration registers 85 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR86;      /* Pad configuration registers 86 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR87;      /* Pad configuration registers 87 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR88;      /* Pad configuration registers 88 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR89;      /* Pad configuration registers 89 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR90;      /* Pad configuration registers 90 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR91;      /* Pad configuration registers 91 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR92;      /* Pad configuration registers 92 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR93;      /* Pad configuration registers 93 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR94;      /* Pad configuration registers 94 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR95;      /* Pad configuration registers 95 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR96;      /* Pad configuration registers 96 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR97;      /* Pad configuration registers 97 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR98;      /* Pad configuration registers 98 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR99;      /* Pad configuration registers 99 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR100;      /* Pad configuration registers 100 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR101;      /* Pad configuration registers 101 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR102;      /* Pad configuration registers 102 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR103;      /* Pad configuration registers 103 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR104;      /* Pad configuration registers 104 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR105;      /* Pad configuration registers 105 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR106;      /* Pad configuration registers 106 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SMC : 1;      /* Safe Mode Control. This bit supports the overriding of the a .. */
                vuint16_t APC : 1;      /* Analog Pad Control. This bit enables the usage of the pad as .. */
                vuint16_t : 1;
                vuint16_t PA : 2;      /* Pin assignment. Selects the function of a multiplexed pad. A .. */
                vuint16_t OBE : 1;      /* Output buffer enable. Enables the pad as an output and drive .. */
                vuint16_t IBE : 1;      /* Input buffer enable. Enables the pad as an input and drives  .. */
                vuint16_t : 2;
                vuint16_t ODE : 1;      /* Open drain output enable. Controls output driver configurati .. */
                vuint16_t : 2;
                vuint16_t SRC : 1;      /* Slew rate control. Controls slew rate for the pad. Slew rate .. */
                vuint16_t WPE : 1;      /* Weak pull up/down enable. Controls whether the weak pull up/ .. */
                vuint16_t WPS : 1;      /* Weak pull up/down select. Controls whether weak pull up or w .. */
            } B;
        } PCR107;      /* Pad configuration registers 107 */

        int8_t Reserved5[1000];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t PADSEL0 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL1 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL2 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL3 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
            } B;
        } PSMI0_3;      /* Pad Selection for Multiplexed Inputs 0 - 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t PADSEL4 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL5 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL6 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL7 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
            } B;
        } PSMI4_7;      /* Pad Selection for Multiplexed Inputs 4 - 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t PADSEL8 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL9 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL10 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL11 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
            } B;
        } PSMI8_11;      /* Pad Selection for Multiplexed Inputs 8 - 11 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t PADSEL12 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL13 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL14 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL15 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
            } B;
        } PSMI12_15;      /* Pad Selection for Multiplexed Inputs 12 - 15 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t PADSEL16 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL17 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL18 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL19 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
            } B;
        } PSMI16_19;      /* Pad Selection for Multiplexed Inputs 16 - 19 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t PADSEL20 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL21 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL22 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL23 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
            } B;
        } PSMI20_23;      /* Pad Selection for Multiplexed Inputs 20 - 23 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t PADSEL24 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL25 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL26 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL27 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
            } B;
        } PSMI24_27;      /* Pad Selection for Multiplexed Inputs 24 - 27 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t PADSEL28 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL29 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL30 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL31 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
            } B;
        } PSMI28_31;      /* Pad Selection for Multiplexed Inputs 28 - 31 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t PADSEL32 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL33 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL34 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
                vuint32_t : 4;
                vuint32_t PADSEL35 : 4;      /* Pad Selection Bits Each PADSEL field selects the pad current .. */
            } B;
        } PSMI32_35;      /* Pad Selection for Multiplexed Inputs 32 - 35 */

        int8_t Reserved6[220];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO0 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO1 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO2 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO3 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO0_3;      /* GPIO Pad Data Output Registers 0 - 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO4 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO5 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO6 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO7 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO4_7;      /* GPIO Pad Data Output Registers 4 - 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO8 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO9 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO10 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO11 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO8_11;      /* GPIO Pad Data Output Registers 8 - 11 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO12 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO13 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO14 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO15 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO12_15;      /* GPIO Pad Data Output Registers 12 - 15 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO16 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO17 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO18 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO19 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO16_19;      /* GPIO Pad Data Output Registers 16 - 19 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO20 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO21 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO22 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO23 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO20_23;      /* GPIO Pad Data Output Registers 20 - 23 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO24 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO25 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO26 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO27 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO24_27;      /* GPIO Pad Data Output Registers 24 - 27 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO28 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO29 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO30 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO31 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO28_31;      /* GPIO Pad Data Output Registers 28 - 31 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO32 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO33 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO34 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO35 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO32_35;      /* GPIO Pad Data Output Registers 32 - 35 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO36 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO37 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO38 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO39 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO36_39;      /* GPIO Pad Data Output Registers 36 - 39 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO40 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO41 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO42 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO43 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO40_43;      /* GPIO Pad Data Output Registers 40 - 43 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO44 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO45 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO46 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO47 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO44_47;      /* GPIO Pad Data Output Registers 44 - 47 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO48 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO49 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO50 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO51 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO48_51;      /* GPIO Pad Data Output Registers 48 - 51 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO52 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO53 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO54 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO55 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO52_55;      /* GPIO Pad Data Output Registers 52 - 55 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO56 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO57 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO58 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO59 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO56_59;      /* GPIO Pad Data Output Registers 56 - 59 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO60 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO61 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO62 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO63 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO60_63;      /* GPIO Pad Data Output Registers 60 - 63 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO64 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO65 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO66 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO67 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO64_67;      /* GPIO Pad Data Output Registers 64 - 67 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO68 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO69 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO70 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO71 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO68_71;      /* GPIO Pad Data Output Registers 68 - 71 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO72 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO73 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO74 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO75 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO72_75;      /* GPIO Pad Data Output Registers 72 - 75 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO76 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO77 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO78 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO79 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO76_79;      /* GPIO Pad Data Output Registers 76 - 79 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO80 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO81 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO82 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO83 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO80_83;      /* GPIO Pad Data Output Registers 80 - 83 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO84 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO85 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO86 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO87 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO84_87;      /* GPIO Pad Data Output Registers 84 - 87 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO88 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO89 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO90 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO91 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO88_91;      /* GPIO Pad Data Output Registers 88 - 91 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO92 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO93 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO94 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO95 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO92_95;      /* GPIO Pad Data Output Registers 92 - 95 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO96 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO97 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO98 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO99 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO96_99;      /* GPIO Pad Data Output Registers 96 - 99 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO100 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO101 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO102 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO103 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO100_103;      /* GPIO Pad Data Output Registers 100 - 103 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDO104 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO105 : 1;      /* Pad Data Out .This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO106 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
                vuint32_t : 7;
                vuint32_t PDO107 : 1;      /* Pad Data Out. This bit stores the data to be driven out on t .. */
            } B;
        } GPDO104_107;      /* GPIO Pad Data Output Registers 104 - 107 */

        int8_t Reserved7[404];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI0 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI1 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI2 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI3 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI0_3;      /* GPIO Pad Data Input Registers 0 - 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI4 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI5 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI6 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI7 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI4_7;      /* GPIO Pad Data Input Registers 4 - 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI8 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI9 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI10 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI11 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI8_11;      /* GPIO Pad Data Input Registers 8 - 11 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI12 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI13 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI14 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI15 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI12_15;      /* GPIO Pad Data Input Registers 12 - 15 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI16 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI17 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI18 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI19 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI16_19;      /* GPIO Pad Data Input Registers 16 - 19 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI20 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI21 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI22 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI23 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI20_23;      /* GPIO Pad Data Input Registers 20 - 23 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI24 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI25 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI26 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI27 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI24_27;      /* GPIO Pad Data Input Registers 24 - 27 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI28 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI29 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI30 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI31 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI28_31;      /* GPIO Pad Data Input Registers 28 - 31 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI32 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI33 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI34 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI35 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI32_35;      /* GPIO Pad Data Input Registers 32 - 35 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI36 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI37 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI38 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI39 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI36_39;      /* GPIO Pad Data Input Registers 36 - 39 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI40 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI41 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI42 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI43 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI40_43;      /* GPIO Pad Data Input Registers 40 - 43 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI44 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI45 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI46 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI47 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI44_47;      /* GPIO Pad Data Input Registers 44 - 47 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI48 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI49 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI50 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI51 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI48_51;      /* GPIO Pad Data Input Registers 48 - 51 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI52 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI53 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI54 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI55 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI52_55;      /* GPIO Pad Data Input Registers 52 - 55 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI56 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI57 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI58 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI59 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI56_59;      /* GPIO Pad Data Input Registers 56 - 59 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI60 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI61 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI62 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI63 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI60_63;      /* GPIO Pad Data Input Registers 60 - 63 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI64 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI65 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI66 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI67 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI64_67;      /* GPIO Pad Data Input Registers 64 - 67 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI68 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI69 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI70 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI71 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI68_71;      /* GPIO Pad Data Input Registers 68 - 71 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI72 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI73 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI74 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI75 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI72_75;      /* GPIO Pad Data Input Registers 72 - 75 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI76 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI77 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI78 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI79 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI76_79;      /* GPIO Pad Data Input Registers 76 - 79 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI80 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI81 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI82 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI83 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI80_83;      /* GPIO Pad Data Input Registers 80 - 83 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI84 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI85 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI86 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI87 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI84_87;      /* GPIO Pad Data Input Registers 84 - 87 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI88 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI89 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI90 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI91 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI88_91;      /* GPIO Pad Data Input Registers 88 - 91 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI92 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI93 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI94 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI95 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI92_95;      /* GPIO Pad Data Input Registers 92 - 95 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI96 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI97 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI98 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI99 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI96_99;      /* GPIO Pad Data Input Registers 96 - 99 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI100 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI101 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI102 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI103 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI100_103;      /* GPIO Pad Data Input Registers 100 - 103 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t PDI104 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI105 : 1;      /* Pad Data In .This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI106 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
                vuint32_t : 7;
                vuint32_t PDI107 : 1;      /* Pad Data In. This bit stores the value of the external GPIO  .. */
            } B;
        } GPDI104_107;      /* GPIO Pad Data Input Registers 104 - 107 */

        int8_t Reserved8[916];

        union {
            vuint32_t R;
            struct {
                vuint32_t PPDO0 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO1 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO2 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO3 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO4 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO5 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO6 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO7 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO8 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO9 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO10 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO11 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO12 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO13 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO14 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO15 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO16 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO17 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO18 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO19 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO20 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO21 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO22 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO23 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO24 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO25 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO26 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO27 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO28 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO29 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO30 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO31 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
            } B;
        } PGPDO0;      /* Parallel GPIO Pad Data Out Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PPDO0 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO1 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO2 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO3 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO4 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO5 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO6 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO7 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO8 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO9 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO10 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO11 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO12 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO13 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO14 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO15 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO16 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO17 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO18 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO19 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO20 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO21 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO22 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO23 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO24 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO25 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO26 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO27 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO28 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO29 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO30 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO31 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
            } B;
        } PGPDO1;      /* Parallel GPIO Pad Data Out Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PPDO0 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO1 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO2 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO3 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO4 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO5 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO6 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO7 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO8 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO9 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO10 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO11 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO12 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO13 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO14 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO15 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO16 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO17 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO18 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO19 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO20 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO21 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO22 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO23 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO24 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO25 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO26 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO27 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO28 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO29 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO30 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO31 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
            } B;
        } PGPDO2;      /* Parallel GPIO Pad Data Out Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PPDO0 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO1 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO2 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO3 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO4 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO5 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO6 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO7 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO8 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO9 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO10 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO11 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO12 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO13 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO14 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO15 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO16 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO17 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO18 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO19 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO20 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO21 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO22 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO23 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO24 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO25 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO26 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO27 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO28 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO29 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO30 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
                vuint32_t PPDO31 : 1;      /* Parallel Pad Data Out. Write or read the data register that  .. */
            } B;
        } PGPDO3;      /* Parallel GPIO Pad Data Out Register 3 */

        int8_t Reserved9[48];

        union {
            vuint32_t R;
            struct {
                vuint32_t PPDI0 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI1 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI2 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI3 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI4 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI5 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI6 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI7 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI8 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI9 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI10 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI11 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI12 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI13 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI14 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI15 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI16 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI17 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI18 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI19 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI20 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI21 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI22 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI23 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI24 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI25 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI26 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI27 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI28 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI29 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI30 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI31 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
            } B;
        } PGPDI0;      /* Parallel GPIO Pad Data In Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PPDI0 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI1 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI2 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI3 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI4 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI5 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI6 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI7 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI8 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI9 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI10 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI11 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI12 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI13 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI14 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI15 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI16 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI17 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI18 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI19 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI20 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI21 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI22 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI23 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI24 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI25 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI26 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI27 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI28 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI29 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI30 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI31 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
            } B;
        } PGPDI1;      /* Parallel GPIO Pad Data In Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PPDI0 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI1 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI2 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI3 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI4 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI5 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI6 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI7 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI8 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI9 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI10 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI11 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI12 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI13 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI14 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI15 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI16 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI17 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI18 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI19 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI20 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI21 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI22 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI23 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI24 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI25 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI26 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI27 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI28 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI29 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI30 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI31 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
            } B;
        } PGPDI2;      /* Parallel GPIO Pad Data In Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PPDI0 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI1 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI2 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI3 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI4 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI5 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI6 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI7 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI8 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI9 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI10 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI11 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI12 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI13 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI14 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI15 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI16 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI17 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI18 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI19 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI20 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI21 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI22 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI23 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI24 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI25 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI26 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI27 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI28 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI29 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI30 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
                vuint32_t PPDI31 : 1;      /* Parallel Pad Data In. Read the current pad value. Accesses t .. */
            } B;
        } PGPDI3;      /* Parallel GPIO Pad Data In Register 3 */

        int8_t Reserved10[48];

        union {
            vuint32_t R;
            struct {
                vuint32_t MASK0 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK1 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK2 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK3 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK4 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK5 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK6 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK7 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK8 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK9 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK10 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK11 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK12 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK13 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK14 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK15 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MPPDO0 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO1 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO2 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO3 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO4 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO5 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO6 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO7 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO8 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO9 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO10 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO11 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO12 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO13 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO14 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO15 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
            } B;
        } MPGPDO0;      /* MPGPDO0 - Masked Parallel GPIO Pin MPPDO Output Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t MASK0 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK1 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK2 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK3 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK4 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK5 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK6 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK7 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK8 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK9 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK10 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK11 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK12 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK13 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK14 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK15 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MPPDO0 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO1 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO2 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO3 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO4 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO5 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO6 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO7 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO8 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO9 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO10 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO11 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO12 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO13 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO14 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO15 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
            } B;
        } MPGPDO1;      /* MPGPDO1 - Masked Parallel GPIO Pin MPPDO Output Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t MASK0 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK1 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK2 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK3 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK4 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK5 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK6 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK7 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK8 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK9 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK10 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK11 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK12 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK13 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK14 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK15 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MPPDO0 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO1 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO2 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO3 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO4 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO5 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO6 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO7 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO8 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO9 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO10 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO11 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO12 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO13 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO14 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO15 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
            } B;
        } MPGPDO2;      /* MPGPDO2 - Masked Parallel GPIO Pin MPPDO Output Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t MASK0 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK1 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK2 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK3 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK4 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK5 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK6 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK7 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK8 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK9 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK10 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK11 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK12 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK13 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK14 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK15 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MPPDO0 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO1 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO2 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO3 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO4 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO5 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO6 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO7 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO8 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO9 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO10 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO11 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO12 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO13 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO14 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO15 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
            } B;
        } MPGPDO3;      /* MPGPDO3 - Masked Parallel GPIO Pin MPPDO Output Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t MASK0 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK1 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK2 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK3 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK4 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK5 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK6 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK7 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK8 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK9 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK10 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK11 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK12 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK13 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK14 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK15 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MPPDO0 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO1 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO2 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO3 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO4 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO5 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO6 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO7 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO8 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO9 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO10 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO11 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO12 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO13 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO14 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO15 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
            } B;
        } MPGPDO4;      /* MPGPDO4 - Masked Parallel GPIO Pin MPPDO Output Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t MASK0 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK1 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK2 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK3 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK4 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK5 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK6 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK7 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK8 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK9 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK10 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK11 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK12 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK13 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK14 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK15 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MPPDO0 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO1 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO2 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO3 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO4 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO5 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO6 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO7 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO8 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO9 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO10 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO11 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO12 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO13 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO14 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO15 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
            } B;
        } MPGPDO5;      /* MPGPDO5 - Masked Parallel GPIO Pin MPPDO Output Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t MASK0 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK1 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK2 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK3 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK4 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK5 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK6 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK7 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK8 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK9 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK10 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK11 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK12 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK13 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK14 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MASK15 : 1;      /* Mask Field. Each bit corresponds to one data bit in the MPPD .. */
                vuint32_t MPPDO0 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO1 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO2 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO3 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO4 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO5 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO6 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO7 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO8 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO9 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO10 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO11 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO12 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO13 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO14 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
                vuint32_t MPPDO15 : 1;      /* Masked Parallel Pad Data Out. Write the data register that s .. */
            } B;
        } MPGPDO6;      /* MPGPDO6 - Masked Parallel GPIO Pin MPPDO Output Register */

        int8_t Reserved11[868];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT0 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC0;      /* Interrupt Filter Maximum Counter Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT1 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC1;      /* Interrupt Filter Maximum Counter Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT2 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC2;      /* Interrupt Filter Maximum Counter Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT3 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC3;      /* Interrupt Filter Maximum Counter Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT4 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC4;      /* Interrupt Filter Maximum Counter Register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT5 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC5;      /* Interrupt Filter Maximum Counter Register 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT6 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC6;      /* Interrupt Filter Maximum Counter Register 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT7 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC7;      /* Interrupt Filter Maximum Counter Register 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT8 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC8;      /* Interrupt Filter Maximum Counter Register 8 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT9 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC9;      /* Interrupt Filter Maximum Counter Register 9 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT10 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC10;      /* Interrupt Filter Maximum Counter Register 10 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT11 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC11;      /* Interrupt Filter Maximum Counter Register 11 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT12 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC12;      /* Interrupt Filter Maximum Counter Register 12 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT13 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC13;      /* Interrupt Filter Maximum Counter Register 13 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT14 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC14;      /* Interrupt Filter Maximum Counter Register 14 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT15 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC15;      /* Interrupt Filter Maximum Counter Register 15 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT16 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC16;      /* Interrupt Filter Maximum Counter Register 16 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT17 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC17;      /* Interrupt Filter Maximum Counter Register 17 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT18 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC18;      /* Interrupt Filter Maximum Counter Register 18 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT19 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC19;      /* Interrupt Filter Maximum Counter Register 19 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT20 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC20;      /* Interrupt Filter Maximum Counter Register 20 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT21 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC21;      /* Interrupt Filter Maximum Counter Register 21 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT22 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC22;      /* Interrupt Filter Maximum Counter Register 22 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT23 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC23;      /* Interrupt Filter Maximum Counter Register 23 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT24 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC24;      /* Interrupt Filter Maximum Counter Register 24 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT25 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC25;      /* Interrupt Filter Maximum Counter Register 25 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT26 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC26;      /* Interrupt Filter Maximum Counter Register 26 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT27 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC27;      /* Interrupt Filter Maximum Counter Register 27 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT28 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC28;      /* Interrupt Filter Maximum Counter Register 28 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT29 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC29;      /* Interrupt Filter Maximum Counter Register 29 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT30 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC30;      /* Interrupt Filter Maximum Counter Register 30 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t MAXCNT31 : 4;      /* Maximum Interrupt Filter Counter setting. Filter Period = T( .. */
            } B;
        } IFMC31;      /* Interrupt Filter Maximum Counter Register 31 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t IFCP : 4;      /* Interrupt Filter Clock Prescaler setting Prescaled Filter Cl .. */
            } B;
        } IFCPR;      /* Interrupt Filter Clock Prescaler Register */
    };                                             /* End of SIUL_tag */ 
#define SIUL  (*(volatile struct SIUL_tag *)         0xC3F90000UL)

/*---------------------------------------------------------------------------*/
/* Wakeup Unit                                                               */
/*---------------------------------------------------------------------------*/
    struct WKPU_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t NIF0 : 1;      /* NMI Status Flag. This flag can be cleared only by writing a  .. */
                vuint32_t NOVF0 : 1;      /* NMI Overrun Status Flag. This flag can be cleared only by wr .. */
                vuint32_t : 6;
                vuint32_t NIF1 : 1;      /* NMI Status Flag. This flag can be cleared only by writing a  .. */
                vuint32_t NOVF1 : 1;      /* NMI Overrun Status Flag. This flag can be cleared only by wr .. */
                vuint32_t : 6;
                vuint32_t NIF2 : 1;      /* NMI Status Flag. This flag can be cleared only by writing a  .. */
                vuint32_t NOVF2 : 1;      /* NMI Overrun Status Flag. This flag can be cleared only by wr .. */
                vuint32_t : 6;
                vuint32_t NIF3 : 1;      /* NMI Status Flag. This flag can be cleared only by writing a  .. */
                vuint32_t NOVF3 : 1;      /* NMI Overrun Status Flag. This flag can be cleared only by wr .. */
            } B;
        } NSR;      /* NMI Status Flag Register */

        int8_t Reserved12[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t NLOCK0 : 1;      /* NMI Configuration Lock Register. Writing a 1 to this bit loc .. */
                vuint32_t NDSS0 : 2;      /* NMI Destination Source Select */
                vuint32_t NWRE0 : 1;      /* NMI Wakeup Request Enable */
                vuint32_t : 1;
                vuint32_t NREE0 : 1;      /* NMI Rising-edge Events Enable. */
                vuint32_t NFEE0 : 1;      /* NMI Falling-edge Events Enable  */
                vuint32_t NFE0 : 1;      /* NMI Filter Enable Enable analog glitch filter on the NMI pad .. */
                vuint32_t NLOCK1 : 1;      /* NMI Configuration Lock Register. Writing a 1 to this bit loc .. */
                vuint32_t NDSS1 : 2;      /* NMI Destination Source Select */
                vuint32_t NWRE1 : 1;      /* NMI Wakeup Request Enable */
                vuint32_t : 1;
                vuint32_t NREE1 : 1;      /* NMI Rising-edge Events Enable  */
                vuint32_t NFEE1 : 1;      /* NMI Falling-edge Events Enable  */
                vuint32_t NFE1 : 1;      /* NMI Filter Enable Enable analog glitch filter on the NMI pad .. */
                vuint32_t NLOCK2 : 1;      /* NMI Configuration Lock Register. Writing a 1 to this bit loc .. */
                vuint32_t NDSS2 : 2;      /* NMI Destination Source Select */
                vuint32_t NWRE2 : 1;      /* NMI Wakeup Request Enable */
                vuint32_t : 1;
                vuint32_t NREE2 : 1;      /* NMI Rising-edge Events Enable  */
                vuint32_t NFEE2 : 1;      /* NMI Falling-edge Events Enable  */
                vuint32_t NFE2 : 1;      /* NMI Filter Enable Enable analog glitch filter on the NMI pad .. */
                vuint32_t NLOCK3 : 1;      /* NMI Configuration Lock Register. Writing a 1 to this bit loc .. */
                vuint32_t NDSS3 : 2;      /* NMI Destination Source Select */
                vuint32_t NWRE3 : 1;      /* NMI Wakeup Request Enable */
                vuint32_t : 1;
                vuint32_t NREE3 : 1;      /* NMI Rising-edge Events Enable  */
                vuint32_t NFEE3 : 1;      /* NMI Falling-edge Events Enable  */
                vuint32_t NFE3 : 1;      /* NMI Filter Enable Enable analog glitch filter on the NMI pad .. */
            } B;
        } NCR;      /* NMI Configuration Register */

        int8_t Reserved13[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t EIF0 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF1 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF2 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF3 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF4 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF5 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF6 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF7 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF8 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF9 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF10 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF11 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF12 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF13 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF14 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF15 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF16 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF17 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF18 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF19 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF20 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF21 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF22 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF23 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF24 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF25 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF26 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF27 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF28 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF29 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF30 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
                vuint32_t EIF31 : 1;      /* External Wakeup/Interrupt Status Flag 0. This flag can be cl .. */
            } B;
        } WISR;      /* Wakeup/Interrupt Status Flag Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t EIRE0 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE1 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE2 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE3 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE4 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE5 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE6 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE7 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE8 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE9 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE10 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE11 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE12 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE13 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE14 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE15 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE16 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE17 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE18 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE19 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE20 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE21 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE22 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE23 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE24 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE25 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE26 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE27 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE28 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE29 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE30 : 1;      /* External Interrupt Request Enable n */
                vuint32_t EIRE31 : 1;      /* External Interrupt Request Enable n */
            } B;
        } IRER;      /* Interrupt Request Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t WRE0 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE1 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE2 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE3 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE4 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE5 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE6 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE7 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE8 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE9 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE10 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE11 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE12 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE13 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE14 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE15 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE16 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE17 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE18 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE19 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE20 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE21 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE22 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE23 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE24 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE25 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE26 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE27 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE28 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE29 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE30 : 1;      /* External Wakeup Request Enable n */
                vuint32_t WRE31 : 1;      /* External Wakeup Request Enable n */
            } B;
        } WRER;      /* Wakeup Request Enable Register */

        int8_t Reserved14[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t IREE0 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE1 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE2 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE3 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE4 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE5 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE6 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE7 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE8 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE9 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE10 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE11 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE12 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE13 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE14 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE15 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE16 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE17 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE18 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE19 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE20 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE21 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE22 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE23 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE24 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE25 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE26 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE27 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE28 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE29 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE30 : 1;      /* External Interrupt Rising-edge Events Enable n */
                vuint32_t IREE31 : 1;      /* External Interrupt Rising-edge Events Enable n */
            } B;
        } WIREER;      /* Wakeup/Interrupt Rising-Edge Event Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t IFEE0 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE1 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE2 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE3 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE4 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE5 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE6 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE7 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE8 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE9 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE10 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE11 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE12 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE13 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE14 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE15 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE16 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE17 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE18 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE19 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE20 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE21 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE22 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE23 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE24 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE25 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE26 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE27 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE28 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE29 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE30 : 1;      /* External Interrupt Falling-edge Events Enable n */
                vuint32_t IFEE31 : 1;      /* External Interrupt Falling-edge Events Enable n */
            } B;
        } WIFEER;      /* Wakeup/Interrupt Falling-Edge Event Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t IFE0 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE1 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE2 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE3 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE4 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE5 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE6 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE7 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE8 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE9 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE10 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE11 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE12 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE13 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE14 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE15 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE16 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE17 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE18 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE19 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE20 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE21 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE22 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE23 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE24 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE25 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE26 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE27 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE28 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE29 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE30 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
                vuint32_t IFE31 : 1;      /* External Interrupt Filter Enable n. Enable analog glitch fil .. */
            } B;
        } WIFER;      /* Wakeup/Interrupt Filter Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t IPUE0 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE1 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE2 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE3 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE4 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE5 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE6 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE7 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE8 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE9 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE10 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE11 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE12 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE13 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE14 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE15 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE16 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE17 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE18 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE19 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE20 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE21 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE22 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE23 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE24 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE25 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE26 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE27 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE28 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE29 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE30 : 1;      /* External Interrupt Pullup Enable n */
                vuint32_t IPUE31 : 1;      /* External Interrupt Pullup Enable n */
            } B;
        } WIPUER;      /* Wakeup/Interrupt Pullup Enable Register */
    };                                             /* End of WKPU_tag */ 
#define WKPU  (*(volatile struct WKPU_tag *)         0xC3F94000UL)

/*---------------------------------------------------------------------------*/
/* System Status and Configuration Module                                    */
/*---------------------------------------------------------------------------*/
    struct SSCM_tag {

        union {
            vuint16_t R;
            struct {
                vuint16_t LSM : 1;      /* Lock Step Mode. This field indicates how the two processor c .. */
                vuint16_t CER : 1;      /* Configuration Error. This field indicates that the SSCM has  .. */
                vuint16_t : 1;
                vuint16_t NXEN1 : 1;      /* Processor 1 Nexus enabled */
                vuint16_t NXEN : 1;      /* Processor 0 Nexus enabled */
                vuint16_t PUB : 1;      /* Public Serial Access Status. This bit indicates whether seri .. */
                vuint16_t SEC : 1;      /* Security Status. This bit reflects the current security stat .. */
                vuint16_t : 1;
                vuint16_t BMODE : 3;      /* Device Boot Mode.This field is only updated during reset. If .. */
                vuint16_t VLE : 1;      /* Variable Length Instruction Mode. When booting from Flash, t .. */
                vuint16_t ABD : 1;      /* Autobaud. Indicates that autobaud detection is active when i .. */
            } B;
        } STATUS;      /* System Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t JPIN : 10;      /* JTAG Part ID Number */
                vuint16_t IVLD : 1;      /* Instruction Flash Valid. This bit identifies whether or not  .. */
                vuint16_t MREV : 4;      /* Minor Mask Revision */
            } B;
        } MEMCONFIG;      /* System Memory Configuration Register */

        int8_t Reserved15[2];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 14;
                vuint16_t PAE : 1;      /* Peripheral Bus Abort Enable. This bit enables bus aborts on  .. */
                vuint16_t RAE : 1;      /* Register Bus Abort Enable. This bit enables bus aborts on il .. */
            } B;
        } ERROR;      /* Error Configuration */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t DEBUG_MODE : 3;      /* Debug Status Port Mode. This field selects the alternate deb .. */
            } B;
        } DEBUGPORT;      /* Debug Status Port Register */

        int8_t Reserved16[2];

        union {
            vuint32_t R;
            struct {
                vuint32_t PWD_HI : 32;      /* Upper 32 bits of the password */
            } B;
        } PWCMPH;      /* Password Comparison Register High Word */

        union {
            vuint32_t R;
            struct {
                vuint32_t PWD_LO : 32;      /* Lower 32 bits of the password */
            } B;
        } PWCMPL;      /* Password Comparison Register Low Word */

        int8_t Reserved17[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t P2BOOT : 30;      /* Determines the location from which the 2nd processor will bo .. */
                vuint32_t DVLE : 1;      /* Determines whether the 2nd processor will start executing VL .. */
            } B;
        } DPMBOOT;      /* DPM Boot Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t KEY : 16;      /* Control key. This field is used to activate the second core  .. */
            } B;
        } DPMKEY;      /* DPM Boot Key Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t UOPT : 32;      /* Shows the values read from the User Option Bits location in  .. */
            } B;
        } UOPS;      /* User Option Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t TFE : 1;      /* Test Flash Enable - setting this bit will map the TestFlash  .. */
            } B;
        } SCTR;      /* SSCM Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TINFON : 32;      /* Content of general purpose TestFlash word n. The data held i .. */
            } B;
        } TF_INFO0;      /* TestFlash Information Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TINFON : 32;      /* Content of general purpose TestFlash word n. The data held i .. */
            } B;
        } TF_INFO1;      /* TestFlash Information Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TINFON : 32;      /* Content of general purpose TestFlash word n. The data held i .. */
            } B;
        } TF_INFO2;      /* TestFlash Information Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TINFON : 32;      /* Content of general purpose TestFlash word n. The data held i .. */
            } B;
        } TF_INFO3;      /* TestFlash Information Register 3 */
    };                                             /* End of SSCM_tag */ 
#define SSCM  (*(volatile struct SSCM_tag *)         0xC3FD8000UL)

/*---------------------------------------------------------------------------*/
/* Clock Generation Module                                                   */
/*---------------------------------------------------------------------------*/
    struct CGM_tag {

        int8_t Reserved18[880];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t EN : 1;      /* Output Clock Enable control */
            } B;
        } OC_EN;      /* Output Clock Enable */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 2;
                vuint8_t SELDIV : 2;      /* Output Clock Division Select */
                vuint8_t SELCTL : 4;      /* Output Clock Source Selection Control. This value selects th .. */
            } B;
        } OCDS_SC;      /* Output Clock Division Select */

        int8_t Reserved19[3];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t SELSTAT : 4;      /* System Clock Source Selection Status. This value indicates t .. */
            } B;
        } SC_SS;      /* System Clock Select Status */

        int8_t Reserved20[3];

        union {
            vuint8_t R;
            struct {
                vuint8_t DE0 : 1;      /* Divider 0 Enable */
                vuint8_t : 3;
                vuint8_t DIV0 : 4;      /* Divider 0 Division Value - The resultant motor control clock .. */
            } B;
        } SC_DC0;      /* System Clock Divider Configuration 0 */

        int8_t Reserved21[3];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t SELCTL : 4;      /* Auxiliary Clock Source Selection Control - Selects the sourc .. */
            } B;
        } AC0_SC;      /* Auxiliary Clock 0 Select Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t DE0 : 1;      /* Divider 0 Enable */
                vuint8_t : 3;
                vuint8_t DIV0 : 4;      /* Divider 0 Division Value - The resultant motor control clock .. */
            } B;
        } AC0_DC0;      /* Auxiliary Clock 0 Divider Configuration 0 */

        union {
            vuint8_t R;
            struct {
                vuint8_t DE1 : 1;      /* Divider 1 Enable */
                vuint8_t : 3;
                vuint8_t DIV1 : 4;      /* Divider 1 Division Value - The resultant motor control clock .. */
            } B;
        } AC0_DC1;      /* Auxiliary Clock 0 Divider Configuration 0 */

        int8_t Reserved22[2];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t SELCTL : 4;      /* Auxiliary Clock Source Selection Control - Selects the sourc .. */
            } B;
        } AC1_SC;      /* Auxiliary Clock 1 Select Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t DE0 : 1;      /* Divider 0 Enable */
                vuint8_t : 3;
                vuint8_t DIV0 : 4;      /* Divider 0 Division Value - The resultant CMU1 monitored cloc .. */
            } B;
        } AC1_DC0;      /* Auxiliary Clock 1 Divider Configuration 0 */

        int8_t Reserved23[3];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t SELCTL : 4;      /* Auxiliary Clock Source Selection Control - Selects the sourc .. */
            } B;
        } AC2_SC;      /* Auxiliary Clock 2 Select Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t DE0 : 1;      /* Divider 0 Enable */
                vuint8_t : 3;
                vuint8_t DIV0 : 4;      /* Divider 0 Division Value - The signal clk_sys_en[0] will be  .. */
            } B;
        } AC2_DC0;      /* Auxiliary Clock 2 Divider Configuration 0 */

        int8_t Reserved24[3];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t SELCTL : 4;      /* Auxiliary Clock Source Selection Control - Selects the sourc .. */
            } B;
        } AC3_SC;      /* Auxiliary Clock 3 Select Control */

        int8_t Reserved25[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t SELCTL : 4;      /* Auxiliary Clock Source Selection Control - Selects the sourc .. */
            } B;
        } AC4_SC;      /* Auxiliary Clock 4 Select Control */
    };                                             /* End of CGM_tag */ 
#define CGM  (*(volatile struct CGM_tag *)          0xC3FE0000UL)

/*---------------------------------------------------------------------------*/
/* Mode Entry Module                                                         */
/*---------------------------------------------------------------------------*/
    struct ME_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t S_CURRENT_MODE : 4;      /* Current device mode status */
                vuint32_t S_MTRANS : 1;      /* Mode transition status */
                vuint32_t S_DC : 1;      /* Device current consumption status */
                vuint32_t : 2;
                vuint32_t S_PDO : 1;      /* Output power-down status. This bit specifies output power-do .. */
                vuint32_t : 2;
                vuint32_t S_MVR : 1;      /* Main voltage regulator status */
                vuint32_t S_DFLA : 2;      /* Data flash availability status */
                vuint32_t S_FLA : 2;      /* Flash availability status */
                vuint32_t : 7;
                vuint32_t S_SSCLK1 : 1;      /* Secondary system clock source 1 status */
                vuint32_t S_PLL1 : 1;      /* secondary PLL status */
                vuint32_t S_PLL0 : 1;      /* System PLL status */
                vuint32_t S_XOSC0 : 1;      /* 4MHz crystal oscillator status */
                vuint32_t S_IRCOSC : 1;      /* 16MHz internal RC oscillator status */
                vuint32_t S_SYSCLK : 4;      /* System clock switch status. These bits specify the System cl .. */
            } B;
        } GS;      /* Global Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TARGET_MODE : 4;      /* Target device mode. These bits provide the target device mod .. */
                vuint32_t : 12;
                vuint32_t KEY : 16;      /* Control key. These bits enable write access to this register .. */
            } B;
        } MCTL;      /* Mode Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 21;
                vuint32_t STOP0 : 1;      /* STOP0 mode enable */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* HALT0 mode enable */
                vuint32_t RUN3 : 1;      /* RUN3 mode enable */
                vuint32_t RUN2 : 1;      /* RUN2 mode enable */
                vuint32_t RUN1 : 1;      /* RUN1 mode enable */
                vuint32_t RUN0 : 1;      /* RUN0 mode enable */
                vuint32_t DRUN : 1;      /* DRUN mode enable */
                vuint32_t SAFE : 1;      /* SAFE mode enable */
                vuint32_t TEST : 1;      /* TEST mode enable */
                vuint32_t RESET : 1;      /* RESET mode enable */
            } B;
        } MER;      /* Mode Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t I_ICONF : 1;      /* Invalid mode configuration interrupt. This bit is set whenev .. */
                vuint32_t I_IMODE : 1;      /* Invalid mode interrupt. This bit is set whenever an invalid  .. */
                vuint32_t I_SAFE : 1;      /* SAFE mode interrupt. This bit is set whenever the device ent .. */
                vuint32_t I_MTC : 1;      /* Mode transition complete interrupt. This bit is set whenever .. */
            } B;
        } IS;      /* Interrupt Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t M_ICONF : 1;      /* Invalid mode configuration interrupt mask */
                vuint32_t M_IMODE : 1;      /* Invalid mode interrupt mask */
                vuint32_t M_SAFE : 1;      /* SAFE mode interrupt mask */
                vuint32_t M_MTC : 1;      /* Mode transition complete interrupt mask */
            } B;
        } IM;      /* Interrupt Mask Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 27;
                vuint32_t S_MTI : 1;      /* Mode Transition Illegal status. This bit is set whenever a n .. */
                vuint32_t S_MRI : 1;      /* Mode Request Illegal status. This bit is set whenever the ta .. */
                vuint32_t S_DMA : 1;      /* Disabled Mode Access status. This bit is set whenever the ta .. */
                vuint32_t S_NMA : 1;      /* Non-existing Mode Access status. This bit is set whenever th .. */
                vuint32_t S_SEA : 1;      /* SAFE Event Active status. This bit is set whenever the devic .. */
            } B;
        } IMTS;      /* Invalid Mode Transition Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t PREVIOUS_MODE : 4;      /* Previous device mode - These bits show the mode in which the .. */
                vuint32_t : 4;
                vuint32_t MPH_BUSY : 1;      /* MC_ME/MC_PCU Handshake Busy indicator - This bit is set if t .. */
                vuint32_t : 2;
                vuint32_t PMC_PROG : 1;      /* MC_PCU Mode Change in Progress indicator - This bit is set i .. */
                vuint32_t CORE_DBG : 1;      /* Processor is in Debug mode indicator - This bit is set while .. */
                vuint32_t : 2;
                vuint32_t SMR : 1;      /* SAFE mode request from MC_RGM is active indicator - This bit .. */
                vuint32_t : 1;
                vuint32_t VREG_CSRC_SC : 1;      /* Main VREG dependent Clock Source State Change during mode tr .. */
                vuint32_t CSRC_CSRC_SC : 1;      /* (Other) Clock Source dependent Clock Source State Change dur .. */
                vuint32_t IRCOSC_SC : 1;      /* IRCOSC State Change during mode transition indicator - This  .. */
                vuint32_t SCSRC_SC : 1;      /* Secondary Clock Sources State Change during mode transition  .. */
                vuint32_t SYSCLK_SW : 1;      /* System Clock Switching pending status */
                vuint32_t : 1;
                vuint32_t FLASH_SC : 1;      /* FLASH State Change during mode transition indicator - This b .. */
                vuint32_t CDP_PRPH_0_143 : 1;      /* Clock Disable Process Pending status for Peripherals 0...143 .. */
                vuint32_t : 4;
                vuint32_t CDP_PRPH_64_95 : 1;      /* Clock Disable Process Pending status for Peripherals 64...95 .. */
                vuint32_t CDP_PRPH_32_63 : 1;      /* Clock Disable Process Pending status for Peripherals 32...63 .. */
                vuint32_t CDP_PRPH_0_31 : 1;      /* Clock Disable Process Pending status for Peripherals 0...31  .. */
            } B;
        } DMTS;      /* Debug Mode Transition Status Register */

        int8_t Reserved26[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t PDO : 1;      /* I/O output power-down control. This bit controls the output  .. */
                vuint32_t : 2;
                vuint32_t MVRON : 1;      /* Main voltage regulator control. This bit specifies whether m .. */
                vuint32_t : 2;
                vuint32_t FLAON : 2;      /* Flash power-down control. This bit specifies the operating m .. */
                vuint32_t : 8;
                vuint32_t PLL1ON : 1;      /* Secondary PLL control */
                vuint32_t PLL0ON : 1;      /* System PLL control */
                vuint32_t XOSC0ON : 1;      /* 4MHz crystal oscillator control */
                vuint32_t IRCOSCON : 1;      /* 16MHz internal RC oscillator control */
                vuint32_t SYSCLK : 4;      /* System clock switch control. These bits specify the System c .. */
            } B;
        } RESET_MC;      /* RESET Mode Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t PDO : 1;      /* I/O output power-down control. This bit controls the output  .. */
                vuint32_t : 2;
                vuint32_t MVRON : 1;      /* Main voltage regulator control. This bit specifies whether m .. */
                vuint32_t : 2;
                vuint32_t FLAON : 2;      /* Flash power-down control. This bit specifies the operating m .. */
                vuint32_t : 8;
                vuint32_t PLL1ON : 1;      /* Secondary PLL control */
                vuint32_t PLL0ON : 1;      /* System PLL control */
                vuint32_t XOSC0ON : 1;      /* 4MHz crystal oscillator control */
                vuint32_t IRCOSCON : 1;      /* 16MHz internal RC oscillator control */
                vuint32_t SYSCLK : 4;      /* System clock switch control. These bits specify the System c .. */
            } B;
        } TEST_MC;      /* TEST Mode Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t PDO : 1;      /* I/O output power-down control. This bit controls the output  .. */
                vuint32_t : 2;
                vuint32_t MVRON : 1;      /* Main voltage regulator control. This bit specifies whether m .. */
                vuint32_t : 2;
                vuint32_t FLAON : 2;      /* Flash power-down control. This bit specifies the operating m .. */
                vuint32_t : 8;
                vuint32_t PLL1ON : 1;      /* Secondary PLL control */
                vuint32_t PLL0ON : 1;      /* System PLL control */
                vuint32_t RCXXOSC0 : 1;      /* 4MHz crystal oscillator control */
                vuint32_t IRCOSCON : 1;      /* 16MHz internal RC oscillator control */
                vuint32_t SYSCLK : 4;      /* System clock switch control. These bits specify the System c .. */
            } B;
        } SAFE_MC;      /* SAFE Mode Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t PDO : 1;      /* I/O output power-down control. This bit controls the output  .. */
                vuint32_t : 2;
                vuint32_t MVRON : 1;      /* Main voltage regulator control. This bit specifies whether m .. */
                vuint32_t : 2;
                vuint32_t FLAON : 2;      /* Flash power-down control. This bit specifies the operating m .. */
                vuint32_t : 8;
                vuint32_t PLL1ON : 1;      /* Secondary PLL control */
                vuint32_t PLL0ON : 1;      /* System PLL control */
                vuint32_t XOSC0ON : 1;      /* 4MHz crystal oscillator control */
                vuint32_t IRCOSCON : 1;      /* 16MHz internal RC oscillator control */
                vuint32_t SYSCLK : 4;      /* System clock switch control. These bits specify the System c .. */
            } B;
        } DRUN_MC;      /* DRUN Mode Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t PDO : 1;      /* I/O output power-down control. This bit controls the output  .. */
                vuint32_t : 2;
                vuint32_t MVRON : 1;      /* Main voltage regulator control. This bit specifies whether m .. */
                vuint32_t : 2;
                vuint32_t FLAON : 2;      /* Flash power-down control. This bit specifies the operating m .. */
                vuint32_t : 8;
                vuint32_t PLL1ON : 1;      /* Secondary PLL control */
                vuint32_t PLL0ON : 1;      /* System PLL control */
                vuint32_t XOSC0ON : 1;      /* 4MHz crystal oscillator control */
                vuint32_t IRCOSCON : 1;      /* 16MHz internal RC oscillator control */
                vuint32_t SYSCLK : 4;      /* System clock switch control. These bits specify the System c .. */
            } B;
        } RUN0_MC;      /* RUN0 Mode Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t PDO : 1;      /* I/O output power-down control. This bit controls the output  .. */
                vuint32_t : 2;
                vuint32_t MVRON : 1;      /* Main voltage regulator control. This bit specifies whether m .. */
                vuint32_t : 2;
                vuint32_t FLAON : 2;      /* Flash power-down control. This bit specifies the operating m .. */
                vuint32_t : 8;
                vuint32_t PLL1ON : 1;      /* Secondary PLL control */
                vuint32_t PLL0ON : 1;      /* System PLL control */
                vuint32_t XOSC0ON : 1;      /* 4MHz crystal oscillator control */
                vuint32_t IRCOSCON : 1;      /* 16MHz internal RC oscillator control */
                vuint32_t SYSCLK : 4;      /* System clock switch control. These bits specify the System c .. */
            } B;
        } RUN1_MC;      /* RUN1 Mode Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t PDO : 1;      /* I/O output power-down control. This bit controls the output  .. */
                vuint32_t : 2;
                vuint32_t MVRON : 1;      /* Main voltage regulator control. This bit specifies whether m .. */
                vuint32_t : 2;
                vuint32_t FLAON : 2;      /* Flash power-down control. This bit specifies the operating m .. */
                vuint32_t : 8;
                vuint32_t PLL1ON : 1;      /* Secondary PLL control */
                vuint32_t PLL0ON : 1;      /* System PLL control */
                vuint32_t XOSC0ON : 1;      /* 4MHz crystal oscillator control */
                vuint32_t IRCOSCON : 1;      /* 16MHz internal RC oscillator control */
                vuint32_t SYSCLK : 4;      /* System clock switch control. These bits specify the System c .. */
            } B;
        } RUN2_MC;      /* RUN2 Mode Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t PDO : 1;      /* I/O output power-down control. This bit controls the output  .. */
                vuint32_t : 2;
                vuint32_t MVRON : 1;      /* Main voltage regulator control. This bit specifies whether m .. */
                vuint32_t : 2;
                vuint32_t FLAON : 2;      /* Flash power-down control. This bit specifies the operating m .. */
                vuint32_t : 8;
                vuint32_t PLL1ON : 1;      /* Secondary PLL control */
                vuint32_t PLL0ON : 1;      /* System PLL control */
                vuint32_t XOSC0ON : 1;      /* 4MHz crystal oscillator control */
                vuint32_t IRCOSCON : 1;      /* 16MHz internal RC oscillator control */
                vuint32_t SYSCLK : 4;      /* System clock switch control. These bits specify the System c .. */
            } B;
        } RUN3_MC;      /* RUN3 Mode Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t PDO : 1;      /* I/O output power-down control. This bit controls the output  .. */
                vuint32_t : 2;
                vuint32_t MVRON : 1;      /* Main voltage regulator control. This bit specifies whether m .. */
                vuint32_t : 2;
                vuint32_t FLAON : 2;      /* Flash power-down control. This bit specifies the operating m .. */
                vuint32_t : 8;
                vuint32_t PLL1ON : 1;      /* Secondary PLL control */
                vuint32_t PLL0ON : 1;      /* System PLL control */
                vuint32_t XOSC0ON : 1;      /* 4MHz crystal oscillator control */
                vuint32_t IRCOSCON : 1;      /* 16MHz internal RC oscillator control */
                vuint32_t SYSCLK : 4;      /* System clock switch control. These bits specify the System c .. */
            } B;
        } HALT0_MC;      /* HALT0 Mode Configuration Register */

        int8_t Reserved27[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t PDO : 1;      /* I/O output power-down control. This bit controls the output  .. */
                vuint32_t : 2;
                vuint32_t MVRON : 1;      /* Main voltage regulator control. This bit specifies whether m .. */
                vuint32_t : 2;
                vuint32_t FLAON : 2;      /* Flash power-down control. This bit specifies the operating m .. */
                vuint32_t : 8;
                vuint32_t PLL1ON : 1;      /* Secondary PLL control */
                vuint32_t PLL0ON : 1;      /* System PLL control */
                vuint32_t XOSC0ON : 1;      /* 4MHz crystal oscillator control */
                vuint32_t IRCOSCON : 1;      /* 16MHz internal RC oscillator control */
                vuint32_t SYSCLK : 4;      /* System clock switch control. These bits specify the System c .. */
            } B;
        } STOP0_MC;      /* STOP0 Mode Configuration Register */

        int8_t Reserved28[20];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 5;
                vuint32_t S_SAFETYPORT : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t : 1;
                vuint32_t S_FLEXRAY : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t : 6;
                vuint32_t S_FLEXCAN1 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t S_FLEXCAN0 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t : 8;
                vuint32_t S_DSPI3 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t S_DSPI2 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t S_DSPI1 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t S_DSPI0 : 1;      /* Peripheral status. These bits specify the current status of  .. */
            } B;
        } PS0;      /* Peripheral Status Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t S_SWG : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t : 3;
                vuint32_t S_CRC : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t : 8;
                vuint32_t S_LIN_FLEX1 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t S_LIN_FLEX0 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t : 5;
                vuint32_t S_FLEXPWM1 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t S_FLEXPWM0 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t S_ETIMER2 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t S_ETIMER1 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t S_ETIMER0 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t : 2;
                vuint32_t S_CTU0 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t : 1;
                vuint32_t S_ADC1 : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t S_ADC0 : 1;      /* Peripheral status. These bits specify the current status of  .. */
            } B;
        } PS1;      /* Peripheral Status Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 3;
                vuint32_t S_PIT_RTI : 1;      /* Peripheral status. These bits specify the current status of  .. */
                vuint32_t : 5;
                vuint32_t S_SSCM : 1;      /* Peripheral status. These bits specify the current status of  .. */
            } B;
        } PS2;      /* Peripheral Status Register 2 */

        int8_t Reserved29[20];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t RUN3 : 1;      /* Peripheral control during RUN3 */
                vuint32_t RUN2 : 1;      /* Peripheral control during RUN2 */
                vuint32_t RUN1 : 1;      /* Peripheral control during RUN1 */
                vuint32_t RUN0 : 1;      /* Peripheral control during RUN0 */
                vuint32_t DRUN : 1;      /* Peripheral control during DRUN */
                vuint32_t SAFE : 1;      /* Peripheral control during SAFE */
                vuint32_t TEST : 1;      /* Peripheral control during TEST */
                vuint32_t RESET : 1;      /* Peripheral control during RESET */
            } B;
        } RUN_PC0;      /* Run Peripheral Configuration 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t RUN3 : 1;      /* Peripheral control during RUN3 */
                vuint32_t RUN2 : 1;      /* Peripheral control during RUN2 */
                vuint32_t RUN1 : 1;      /* Peripheral control during RUN1 */
                vuint32_t RUN0 : 1;      /* Peripheral control during RUN0 */
                vuint32_t DRUN : 1;      /* Peripheral control during DRUN */
                vuint32_t SAFE : 1;      /* Peripheral control during SAFE */
                vuint32_t TEST : 1;      /* Peripheral control during TEST */
                vuint32_t RESET : 1;      /* Peripheral control during RESET */
            } B;
        } RUN_PC1;      /* Run Peripheral Configuration 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t RUN3 : 1;      /* Peripheral control during RUN3 */
                vuint32_t RUN2 : 1;      /* Peripheral control during RUN2 */
                vuint32_t RUN1 : 1;      /* Peripheral control during RUN1 */
                vuint32_t RUN0 : 1;      /* Peripheral control during RUN0 */
                vuint32_t DRUN : 1;      /* Peripheral control during DRUN */
                vuint32_t SAFE : 1;      /* Peripheral control during SAFE */
                vuint32_t TEST : 1;      /* Peripheral control during TEST */
                vuint32_t RESET : 1;      /* Peripheral control during RESET */
            } B;
        } RUN_PC2;      /* Run Peripheral Configuration 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t RUN3 : 1;      /* Peripheral control during RUN3 */
                vuint32_t RUN2 : 1;      /* Peripheral control during RUN2 */
                vuint32_t RUN1 : 1;      /* Peripheral control during RUN1 */
                vuint32_t RUN0 : 1;      /* Peripheral control during RUN0 */
                vuint32_t DRUN : 1;      /* Peripheral control during DRUN */
                vuint32_t SAFE : 1;      /* Peripheral control during SAFE */
                vuint32_t TEST : 1;      /* Peripheral control during TEST */
                vuint32_t RESET : 1;      /* Peripheral control during RESET */
            } B;
        } RUN_PC3;      /* Run Peripheral Configuration 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t RUN3 : 1;      /* Peripheral control during RUN3 */
                vuint32_t RUN2 : 1;      /* Peripheral control during RUN2 */
                vuint32_t RUN1 : 1;      /* Peripheral control during RUN1 */
                vuint32_t RUN0 : 1;      /* Peripheral control during RUN0 */
                vuint32_t DRUN : 1;      /* Peripheral control during DRUN */
                vuint32_t SAFE : 1;      /* Peripheral control during SAFE */
                vuint32_t TEST : 1;      /* Peripheral control during TEST */
                vuint32_t RESET : 1;      /* Peripheral control during RESET */
            } B;
        } RUN_PC4;      /* Run Peripheral Configuration 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t RUN3 : 1;      /* Peripheral control during RUN3 */
                vuint32_t RUN2 : 1;      /* Peripheral control during RUN2 */
                vuint32_t RUN1 : 1;      /* Peripheral control during RUN1 */
                vuint32_t RUN0 : 1;      /* Peripheral control during RUN0 */
                vuint32_t DRUN : 1;      /* Peripheral control during DRUN */
                vuint32_t SAFE : 1;      /* Peripheral control during SAFE */
                vuint32_t TEST : 1;      /* Peripheral control during TEST */
                vuint32_t RESET : 1;      /* Peripheral control during RESET */
            } B;
        } RUN_PC5;      /* Run Peripheral Configuration 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t RUN3 : 1;      /* Peripheral control during RUN3 */
                vuint32_t RUN2 : 1;      /* Peripheral control during RUN2 */
                vuint32_t RUN1 : 1;      /* Peripheral control during RUN1 */
                vuint32_t RUN0 : 1;      /* Peripheral control during RUN0 */
                vuint32_t DRUN : 1;      /* Peripheral control during DRUN */
                vuint32_t SAFE : 1;      /* Peripheral control during SAFE */
                vuint32_t TEST : 1;      /* Peripheral control during TEST */
                vuint32_t RESET : 1;      /* Peripheral control during RESET */
            } B;
        } RUN_PC6;      /* Run Peripheral Configuration 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t RUN3 : 1;      /* Peripheral control during RUN3 */
                vuint32_t RUN2 : 1;      /* Peripheral control during RUN2 */
                vuint32_t RUN1 : 1;      /* Peripheral control during RUN1 */
                vuint32_t RUN0 : 1;      /* Peripheral control during RUN0 */
                vuint32_t DRUN : 1;      /* Peripheral control during DRUN */
                vuint32_t SAFE : 1;      /* Peripheral control during SAFE */
                vuint32_t TEST : 1;      /* Peripheral control during TEST */
                vuint32_t RESET : 1;      /* Peripheral control during RESET */
            } B;
        } RUN_PC7;      /* Run Peripheral Configuration 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 21;
                vuint32_t STOP0 : 1;      /* Peripheral control during STOP0 */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* Peripheral control during HALT0 */
            } B;
        } LP_PC0;      /* Low-Power Peripheral Configuration 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 21;
                vuint32_t STOP0 : 1;      /* Peripheral control during STOP0 */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* Peripheral control during HALT0 */
            } B;
        } LP_PC1;      /* Low-Power Peripheral Configuration 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 21;
                vuint32_t STOP0 : 1;      /* Peripheral control during STOP0 */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* Peripheral control during HALT0 */
            } B;
        } LP_PC2;      /* Low-Power Peripheral Configuration 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 21;
                vuint32_t STOP0 : 1;      /* Peripheral control during STOP0 */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* Peripheral control during HALT0 */
            } B;
        } LP_PC3;      /* Low-Power Peripheral Configuration 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 21;
                vuint32_t STOP0 : 1;      /* Peripheral control during STOP0 */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* Peripheral control during HALT0 */
            } B;
        } LP_PC4;      /* Low-Power Peripheral Configuration 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 21;
                vuint32_t STOP0 : 1;      /* Peripheral control during STOP0 */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* Peripheral control during HALT0 */
            } B;
        } LP_PC5;      /* Low-Power Peripheral Configuration 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 21;
                vuint32_t STOP0 : 1;      /* Peripheral control during STOP0 */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* Peripheral control during HALT0 */
            } B;
        } LP_PC6;      /* Low-Power Peripheral Configuration 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 21;
                vuint32_t STOP0 : 1;      /* Peripheral control during STOP0 */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* Peripheral control during HALT0 */
            } B;
        } LP_PC7;      /* Low-Power Peripheral Configuration 7 */

        int8_t Reserved30[4];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL4;      /* DSPI0 Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL5;      /* DSPI1 Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL6;      /* DSPI2 Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL7;      /* DSPI2 Control */

        int8_t Reserved31[8];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL16;      /* FlexCAN0 Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL17;      /* FlexCAN1 Control */

        int8_t Reserved32[6];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL24;      /* FlexRay Control */

        int8_t Reserved33[1];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL26;      /* Safety Port Control */

        int8_t Reserved34[5];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL32;      /* ADC0 Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL33;      /* ADC1 Control */

        int8_t Reserved35[1];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL35;      /* CTU0 Control */

        int8_t Reserved36[2];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL38;      /* eTimer0 Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL39;      /* eTimer1 Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL40;      /* eTimer2 Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL41;      /* FlexPWM0 Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL42;      /* FlexPWM1 Control */

        int8_t Reserved37[5];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL48;      /* LIN_FLEX0 Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL49;      /* LIN_FLEX1 Control */

        int8_t Reserved38[8];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL58;      /* CRC Control */

        int8_t Reserved39[3];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL62;      /* SWG Control */

        int8_t Reserved40[23];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL86;      /* SSCM Control */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL87;      /* SSCM Control */

        int8_t Reserved41[4];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL92;      /* PIT Control */

        int8_t Reserved42[3];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL96;      /* XOSC0 Control */

        int8_t Reserved43[4];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 1;
                vuint8_t DBG_F : 1;      /* Peripheral control in debug mode. This bit controls the stat .. */
                vuint8_t LP_CFG : 3;      /* Peripheral configuration select for non-run modes */
                vuint8_t RUN_CFG : 3;      /* Peripheral configuration select for run modes */
            } B;
        } PCTL101;      /* SSCM Control */
    };                                             /* End of ME_tag */ 
#define ME  (*(volatile struct ME_tag *)           0xC3FDC000UL)

/*---------------------------------------------------------------------------*/
/* Frequency Modulated Phase-Locked Loop 0                                   */
/*---------------------------------------------------------------------------*/
    struct FMPLL_0_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 2;
                vuint32_t IDF : 4;      /* The value of this field sets the PLL Input division factor.  .. */
                vuint32_t ODF : 2;      /* The value of this field sets the PLL Output division factor. .. */
                vuint32_t : 1;
                vuint32_t NDIV : 7;      /* The value of this field sets the PLL Loop division factor.Th .. */
                vuint32_t : 7;
                vuint32_t EN_PLL_SW : 1;      /* This bit is used to enable progressive clock switching.  */
                vuint32_t : 1;
                vuint32_t UNLOCK_ONCE : 1;      /* This bit is a sticky indication of PLL loss of lock conditio .. */
                vuint32_t : 1;
                vuint32_t I_LOCK : 1;      /* This bit is set by hardware whenever there is a lock/unlock  .. */
                vuint32_t S_LOCK : 1;      /* This bit is an indication of whether the PLL has acquired lo .. */
                vuint32_t PLL_FAIL_MASK : 1;      /* This bit is used to mask the pll_fail output.  */
                vuint32_t PLL_FAIL_FLAG : 1;      /* This bit is asynchronously set by hardware whenever a loss o .. */
            } B;
        } CR;      /* Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t STRB_BYPASS : 1;      /* Strobe bypass The STRB_BYPASS signal is used to bypass the S .. */
                vuint32_t : 1;
                vuint32_t SPRD_SEL : 1;      /* Spread type selection The SPRD_SEL control the spread type i .. */
                vuint32_t MOD_PERIOD : 13;      /* Modulation period The MOD_PERIOD field is the binary equival .. */
                vuint32_t FM_EN : 1;      /* Frequency Modulation Enable The FM_EN enables the frequency  .. */
                vuint32_t INC_STEP : 15;      /* Increment step The INC_STEP field is the binary equivalent o .. */
            } B;
        } MR;      /* Modulation Register */
    };                                             /* End of FMPLL_0_tag */ 
#define FMPLL_0  (*(volatile struct FMPLL_0_tag *)      0xC3FE00A0UL)

/*---------------------------------------------------------------------------*/
/* Frequency Modulated Phase-Locked Loop 1                                   */
/*---------------------------------------------------------------------------*/
    struct FMPLL_1_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 2;
                vuint32_t IDF : 4;      /* The value of this field sets the PLL Input division factor.  .. */
                vuint32_t ODF : 2;      /* The value of this field sets the PLL Output division factor. .. */
                vuint32_t : 1;
                vuint32_t NDIV : 7;      /* The value of this field sets the PLL Loop division factor.Th .. */
                vuint32_t : 7;
                vuint32_t EN_PLL_SW : 1;      /* This bit is used to enable progressive clock switching.  */
                vuint32_t : 1;
                vuint32_t UNLOCK_ONCE : 1;      /* This bit is a sticky indication of PLL loss of lock conditio .. */
                vuint32_t : 1;
                vuint32_t I_LOCK : 1;      /* This bit is set by hardware whenever there is a lock/unlock  .. */
                vuint32_t S_LOCK : 1;      /* This bit is an indication of whether the PLL has acquired lo .. */
                vuint32_t PLL_FAIL_MASK : 1;      /* This bit is used to mask the pll_fail output.  */
                vuint32_t PLL_FAIL_FLAG : 1;      /* This bit is asynchronously set by hardware whenever a loss o .. */
            } B;
        } CR;      /* Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t STRB_BYPASS : 1;      /* Strobe bypass The STRB_BYPASS signal is used to bypass the S .. */
                vuint32_t : 1;
                vuint32_t SPRD_SEL : 1;      /* Spread type selection The SPRD_SEL control the spread type i .. */
                vuint32_t MOD_PERIOD : 13;      /* Modulation period The MOD_PERIOD field is the binary equival .. */
                vuint32_t FM_EN : 1;      /* Frequency Modulation Enable The FM_EN enables the frequency  .. */
                vuint32_t INC_STEP : 15;      /* Increment step The INC_STEP field is the binary equivalent o .. */
            } B;
        } MR;      /* Modulation Register */
    };                                             /* End of FMPLL_1_tag */ 
#define FMPLL_1  (*(volatile struct FMPLL_1_tag *)      0xC3FE00C0UL)

/*---------------------------------------------------------------------------*/
/* Clock Generation Module 0                                                 */
/*---------------------------------------------------------------------------*/
    struct CMU_0_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t SFM : 1;      /* Start frequency measure. The software can only set this bit  .. */
                vuint32_t : 13;
                vuint32_t CKSEL1 : 2;      /* Clock selection. This fieldselects the clock to be measured  .. */
                vuint32_t : 5;
                vuint32_t RCDIV : 2;      /* RC clock division factor. These bits specify the RC clock di .. */
                vuint32_t CME_A : 1;      /* clock monitor enable */
            } B;
        } CSR;      /* Control Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t FD : 20;      /* Measured frequency bits. This register displays the measured .. */
            } B;
        } FDR;      /* Frequency Display Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 20;
                vuint32_t HFREF_A : 12;      /* High Frequency reference value. These bits determine the hig .. */
            } B;
        } HFREFR_A;      /* High Frequency Reference Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 20;
                vuint32_t LFREF_A : 12;      /* Low Frequency reference value. These bits determine the low  .. */
            } B;
        } LFREFR_A;      /* Low Frequency Reference Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t FLCI_A : 1;      /* PLL clock frequency less than reference clock interrupt. Thi .. */
                vuint32_t FHHI_A : 1;      /* FMPLL_0 Clock frequency higher than high reference interrupt .. */
                vuint32_t FLLI_A : 1;      /* FMPLL_0 Clock frequency less than low reference event. This  .. */
                vuint32_t OLRI : 1;      /* Oscillator frequency less than RC frequency event. This bit  .. */
            } B;
        } ISR;      /* Interrupt Status Register */

        int8_t Reserved44[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t MD : 20;      /* Measurement duration bits. This register displays the measur .. */
            } B;
        } MDR;      /* Measurement Duration Register */
    };                                             /* End of CMU_0_tag */ 
#define CMU_0  (*(volatile struct CMU_0_tag *)        0xC3FE0100UL)

/*---------------------------------------------------------------------------*/
/* Clock Generation Module 1                                                 */
/*---------------------------------------------------------------------------*/
    struct CMU_1_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t SFM : 1;      /* Start frequency measure. The software can only set this bit  .. */
                vuint32_t : 13;
                vuint32_t CKSEL1 : 2;      /* Clock selection. This fieldselects the clock to be measured  .. */
                vuint32_t : 5;
                vuint32_t RCDIV : 2;      /* RC clock division factor. These bits specify the RC clock di .. */
                vuint32_t CME_A : 1;      /* clock monitor enable */
            } B;
        } CSR;      /* Control Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t FD : 20;      /* Measured frequency bits. This register displays the measured .. */
            } B;
        } FDR;      /* Frequency Display Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 20;
                vuint32_t HFREF_A : 12;      /* High Frequency reference value. These bits determine the hig .. */
            } B;
        } HFREFR_A;      /* High Frequency Reference Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 20;
                vuint32_t LFREF_A : 12;      /* Low Frequency reference value. These bits determine the low  .. */
            } B;
        } LFREFR_A;      /* Low Frequency Reference Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t FLCI_A : 1;      /* PLL clock frequency less than reference clock interrupt. Thi .. */
                vuint32_t FHHI_A : 1;      /* FMPLL_0 Clock frequency higher than high reference interrupt .. */
                vuint32_t FLLI_A : 1;      /* FMPLL_0 Clock frequency less than low reference event. This  .. */
                vuint32_t OLRI : 1;      /* Oscillator frequency less than RC frequency event. This bit  .. */
            } B;
        } ISR;      /* Interrupt Status Register */

        int8_t Reserved45[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t MD : 20;      /* Measurement duration bits. This register displays the measur .. */
            } B;
        } MDR;      /* Measurement Duration Register */
    };                                             /* End of CMU_1_tag */ 
#define CMU_1  (*(volatile struct CMU_1_tag *)        0xC3FE0120UL)

/*---------------------------------------------------------------------------*/
/* Clock Generation Module 2                                                 */
/*---------------------------------------------------------------------------*/
    struct CMU_2_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t SFM : 1;      /* Start frequency measure. The software can only set this bit  .. */
                vuint32_t : 13;
                vuint32_t CKSEL1 : 2;      /* Clock selection. This fieldselects the clock to be measured  .. */
                vuint32_t : 5;
                vuint32_t RCDIV : 2;      /* RC clock division factor. These bits specify the RC clock di .. */
                vuint32_t CME_A : 1;      /* clock monitor enable */
            } B;
        } CSR;      /* Control Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t FD : 20;      /* Measured frequency bits. This register displays the measured .. */
            } B;
        } FDR;      /* Frequency Display Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 20;
                vuint32_t HFREF_A : 12;      /* High Frequency reference value. These bits determine the hig .. */
            } B;
        } HFREFR_A;      /* High Frequency Reference Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 20;
                vuint32_t LFREF_A : 12;      /* Low Frequency reference value. These bits determine the low  .. */
            } B;
        } LFREFR_A;      /* Low Frequency Reference Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t FLCI_A : 1;      /* PLL clock frequency less than reference clock interrupt. Thi .. */
                vuint32_t FHHI_A : 1;      /* FMPLL_0 Clock frequency higher than high reference interrupt .. */
                vuint32_t FLLI_A : 1;      /* FMPLL_0 Clock frequency less than low reference event. This  .. */
                vuint32_t OLRI : 1;      /* Oscillator frequency less than RC frequency event. This bit  .. */
            } B;
        } ISR;      /* Interrupt Status Register */

        int8_t Reserved46[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t MD : 20;      /* Measurement duration bits. This register displays the measur .. */
            } B;
        } MDR;      /* Measurement Duration Register */
    };                                             /* End of CMU_2_tag */ 
#define CMU_2  (*(volatile struct CMU_2_tag *)        0xC3FE0140UL)

/*---------------------------------------------------------------------------*/
/* Reset Generation Module                                                   */
/*---------------------------------------------------------------------------*/
    struct RGM_tag {

        union {
            vuint16_t R;
            struct {
                vuint16_t F_EXR : 1;      /* Flag for External Reset */
                vuint16_t F_FCCU_HARD : 1;      /* Flag for FCCU hard reaction request */
                vuint16_t F_FCCU_SOFT : 1;      /* Flag for FCCU soft reaction request */
                vuint16_t F_ST_DONE : 1;      /* Flag for self-test completed */
                vuint16_t F_CMU12_FHL : 1;      /* Flag for CMU1/2 clock frequency higher/lower than reference */
                vuint16_t F_FL_ECC_RCC : 1;      /* Flag for flash, ECC, or lock-step error */
                vuint16_t F_PLL1 : 1;      /* Flag for PLL1 fail */
                vuint16_t F_SWT : 1;      /* Flag for software watchdog timer */
                vuint16_t F_FCCU_SAFE : 1;      /* Flag for FCCU SAFE mode request */
                vuint16_t F_CMU0_FHL : 1;      /* Flag for CMU0 clock frequency higher/lower than reference */
                vuint16_t F_CMU0_OLR : 1;      /* Flag for oscillator frequency lower than reference */
                vuint16_t F_PLL0 : 1;      /* Flag for PLL0 fail */
                vuint16_t F_CWD : 1;      /* Flag for core watchdog reset */
                vuint16_t F_SOFT : 1;      /* Flag for software reset */
                vuint16_t F_CORE : 1;      /* Flag for core reset */
                vuint16_t F_JTAG : 1;      /* Flag for JTAG initiated reset */
            } B;
        } FES;      /* Functional Event Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t F_POR : 1;      /* Flag for Power-On reset  */
                vuint16_t : 8;
                vuint16_t F_LVD27_IO : 1;      /* Flag for 2.7V low-voltage detected (I/O) */
                vuint16_t F_LVD27_FLASH : 1;      /* Flag for 2.7V low-voltage detected (flash) */
                vuint16_t F_LVD27_VREG : 1;      /* Flag for 2.7V low-voltage detected (VREG) */
                vuint16_t : 2;
                vuint16_t F_HVD12 : 1;      /* Flag for 1.2V high-voltage detected */
                vuint16_t F_LVD12 : 1;      /* Flag for 1.2V low-voltage detected  */
            } B;
        } DES;      /* Destructive Event Status */

        union {
            vuint16_t R;
            struct {
                vuint16_t D_EXR : 1;      /* Disable External Reset */
                vuint16_t D_FCCU_HARD : 1;      /* Disable FCCU hard reaction request */
                vuint16_t D_FCCU_SOFT : 1;      /* Disable FCCU soft reaction request */
                vuint16_t D_ST_DONE : 1;      /* Disable self-test completed */
                vuint16_t D_CMU12_FHL : 1;      /* Disable CMU1/2 clock frequency higher/lower than reference */
                vuint16_t D_FL_ECC_RCC : 1;      /* Disable flash, ECC, or lock-step error */
                vuint16_t D_PLL1 : 1;      /* Disable PLL1 fail */
                vuint16_t D_SWT : 1;      /* Disable software watchdog timer */
                vuint16_t D_FCCU_SAFE : 1;      /* Disable FCCU SAFE mode request */
                vuint16_t D_CMU0_FHL : 1;      /* Disable CMU0 clock frequency higher/lower than reference  */
                vuint16_t D_CMU0_OLR : 1;      /* Disable oscillator frequency lower than reference  */
                vuint16_t D_PLL0 : 1;      /* Disable PLL0 fail  */
                vuint16_t D_CWD : 1;      /* Disable core watchdog reset */
                vuint16_t D_SOFT : 1;      /* Disable software reset */
                vuint16_t D_CORE : 1;      /* Disable core reset  */
                vuint16_t D_JTAG : 1;      /* Disable JTAG initiated reset  */
            } B;
        } FERD;      /* Functional Event Reset Disable */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t D_LVD12 : 1;      /* Disable 1.2V low-voltage detected */
                vuint16_t : 2;
                vuint16_t D_COMP : 1;      /* Disable comparator error */
                vuint16_t D_LVD27_IO : 1;      /* Disable 2.7V low-voltage detected (I/O) */
                vuint16_t D_LVD27_FLASH : 1;      /* Disable 2.7V low-voltage detected (flash) */
                vuint16_t D_LVD27_VREG : 1;      /* Disable 2.7V low-voltage detected (VREG) */
                vuint16_t DR3 : 1;      /*  */
                vuint16_t DR2 : 1;      /*  */
                vuint16_t D_HVD12 : 1;      /* Disable 1.2V high-voltage detected */
            } B;
        } DERD;      /* Destructive Event Reset Disable */

        int8_t Reserved47[8];

        union {
            vuint16_t R;
            struct {
                vuint16_t AR_EXR : 1;      /* Alternate Request for External Reset */
                vuint16_t AR_FCCU_HARD : 1;      /* Alternate Request for FCCU hard reaction request */
                vuint16_t AR_FCCU_SOFT : 1;      /* Alternate Request for FCCU soft reaction request */
                vuint16_t AR_ST_DONE : 1;      /* Alternate Request for self-test completed */
                vuint16_t AR_CMU12_FHL : 1;      /* Alternate Request for CMU1/2 clock frequency higher/lower th .. */
                vuint16_t FL_ECC_RCC : 1;      /*  */
                vuint16_t AR_PLL1 : 1;      /* Alternate Request for PLL1 fail */
                vuint16_t AR_SWT : 1;      /* Alternate Request for software watchdog timer */
                vuint16_t AR_FCCU_SAFE : 1;      /* Alternate Request for FCCU SAFE mode request */
                vuint16_t AR_CMU0_FHL : 1;      /* Alternate Request for CMU0 clock frequency higher/lower than .. */
                vuint16_t AR_CMU0_OLR : 1;      /* Alternate Request for oscillator frequency lower than refere .. */
                vuint16_t AR_PLL0 : 1;      /* Alternate Request for PLL0 fail */
                vuint16_t AR_CWD : 1;      /* Alternate Request for core watchdog reset */
                vuint16_t AR_SOFT : 1;      /* Alternate Request for software reset */
                vuint16_t AR_CORE : 1;      /* Alternate Request for core reset  */
                vuint16_t AR_JTAG : 1;      /* Alternate Request for JTAG initiated reset  */
            } B;
        } FEAR;      /* Functional Event Alternate Request */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 8;
                vuint16_t AR_COMP : 1;      /* Alternate Request for comparator error */
                vuint16_t AR_LVD27_IO : 1;      /* Alternate Request for 2.7V low-voltage detected (I/O) */
                vuint16_t AR_LVD27_FLASH : 1;      /* Alternate Request for 2.7V low-voltage detected (flash) */
                vuint16_t AR_LVD27_VREG : 1;      /* Alternate Request for 2.7V low-voltage detected (VREG) */
                vuint16_t DR3 : 1;      /*  */
                vuint16_t DR2 : 1;      /*  */
                vuint16_t AR_HVD12 : 1;      /* Alternate Request for 1.2V high-voltage detected */
                vuint16_t AR_LVD12 : 1;      /* Alternate Request for 1.2V low-voltage detected */
            } B;
        } DEAR;      /* Destructive Event Alternate Request */

        int8_t Reserved48[4];

        union {
            vuint16_t R;
            struct {
                vuint16_t SS_EXR : 1;      /* Short Sequence for External Reset */
                vuint16_t SS_FCCU_HARD : 1;      /* Short Sequence for FCCU hard reaction request */
                vuint16_t SS_FCCU_SOFT : 1;      /* Short Sequence for FCCU soft reaction request */
                vuint16_t SS_ST_DONE : 1;      /* Short Sequence for self-test completed */
                vuint16_t SS_CMU12_FHL : 1;      /* Short Sequence for CMU1/2 clock frequency higher/lower than  .. */
                vuint16_t SS_FL_ECC_RCC : 1;      /* Short Sequence for flash, ECC, or lock-step error */
                vuint16_t SS_PLL1 : 1;      /* Short Sequence for PLL1 fail */
                vuint16_t SS_SWT : 1;      /* Short Sequence for software watchdog timer */
                vuint16_t SS_FCCU_SAFE : 1;      /* Short Sequence for FCCU SAFE mode request */
                vuint16_t SS_CMU0_FHL : 1;      /* Short Sequence for CMU0 clock frequency higher/lower than re .. */
                vuint16_t SS_CMU0_OLR : 1;      /* Short Sequence for oscillator frequency lower than reference .. */
                vuint16_t SS_PLL0 : 1;      /* Short Sequence for PLL0 fail  */
                vuint16_t SS_CWD : 1;      /* Short Sequence for core watchdog reset */
                vuint16_t SS_SOFT : 1;      /* Short Sequence for software reset  */
                vuint16_t SS_CORE : 1;      /* Short Sequence for core reset  */
                vuint16_t SS_JTAG : 1;      /* Short Sequence for JTAG initiated reset  */
            } B;
        } FESS;      /* Functional Event Short Sequence */

        int8_t Reserved49[2];

        union {
            vuint16_t R;
            struct {
                vuint16_t BE_EXR : 1;      /* Bidirectional Reset Enable for External Reset */
                vuint16_t BE_FCCU_HARD : 1;      /* Bidirectional Reset Enable for FCCU hard reaction request */
                vuint16_t BE_FCCU_SOFT : 1;      /* Bidirectional Reset Enable for FCCU soft reaction request */
                vuint16_t BE_ST_DONE : 1;      /* Bidirectional Reset Enable for self-test completed */
                vuint16_t BE_CMU12_FHL : 1;      /* Bidirectional Reset Enable for CMU1/2 clock frequency higher .. */
                vuint16_t BE_FL_ECC_RCC : 1;      /* Bidirectional Reset Enable for flash, ECC, or lock-step erro .. */
                vuint16_t BE_PLL1 : 1;      /* Bidirectional Reset Enable for PLL1 fail */
                vuint16_t BE_SWT : 1;      /* Bidirectional Reset Enable for software watchdog timer */
                vuint16_t BE_FCCU_SAFE : 1;      /* Bidirectional Reset Enable for FCCU SAFE mode request */
                vuint16_t BE_CMU0_FHL : 1;      /* Bidirectional Reset Enable for CMU0 clock frequency higher/l .. */
                vuint16_t BE_CMU0_OLR : 1;      /* Bidirectional Reset Enable for oscillator frequency lower th .. */
                vuint16_t BE_PLL0 : 1;      /* Bidirectional Reset Enable for PLL0 fail  */
                vuint16_t BE_CWD : 1;      /* Bidirectional Reset Enable for core watchdog reset */
                vuint16_t BE_SOFT : 1;      /* Bidirectional Reset Enable for software reset  */
                vuint16_t BE_CORE : 1;      /* Bidirectional Reset Enable for core reset  */
                vuint16_t BE_JTAG : 1;      /* Bidirectional Reset Enable for JTAG initiated reset  */
            } B;
        } FBRE;      /* Functional Bidirectional Reset Enable */
    };                                             /* End of RGM_tag */ 
#define RGM  (*(volatile struct RGM_tag *)          0xC3FE4000UL)

/*---------------------------------------------------------------------------*/
/* Power Control Unit                                                        */
/*---------------------------------------------------------------------------*/
    struct PCU_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 18;
                vuint32_t STBY0 : 1;      /* Power domain control during STANDBY0 mode  */
                vuint32_t : 2;
                vuint32_t STOP0 : 1;      /* Power domain control during STOP0 mode  */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* Power domain control during HALT0 mode  */
                vuint32_t RUN3 : 1;      /* Power domain control during RUN3 mode  */
                vuint32_t RUN2 : 1;      /* Power domain control during RUN2 mode  */
                vuint32_t RUN1 : 1;      /* Power domain control during RUN1 mode  */
                vuint32_t RUN0 : 1;      /* Power domain control during RUN0 mode  */
                vuint32_t DRUN : 1;      /* Power domain control during DRUN mode  */
                vuint32_t SAFE : 1;      /* Power domain control during SAFE mode  */
                vuint32_t TEST : 1;      /* Power domain control during TEST mode  */
                vuint32_t RST : 1;      /* Power domain control during RESET mode  */
            } B;
        } PCONF0;      /* Power Domain #0 Configuration */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 18;
                vuint32_t STBY0 : 1;      /* Power domain control during STANDBY0 mode  */
                vuint32_t : 2;
                vuint32_t STOP0 : 1;      /* Power domain control during STOP0 mode  */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* Power domain control during HALT0 mode  */
                vuint32_t RUN3 : 1;      /* Power domain control during RUN3 mode  */
                vuint32_t RUN2 : 1;      /* Power domain control during RUN2 mode  */
                vuint32_t RUN1 : 1;      /* Power domain control during RUN1 mode  */
                vuint32_t RUN0 : 1;      /* Power domain control during RUN0 mode  */
                vuint32_t DRUN : 1;      /* Power domain control during DRUN mode  */
                vuint32_t SAFE : 1;      /* Power domain control during SAFE mode  */
                vuint32_t TEST : 1;      /* Power domain control during TEST mode  */
                vuint32_t RST : 1;      /* Power domain control during RESET mode  */
            } B;
        } PCONF1;      /* Power Domain #1 Configuration */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 18;
                vuint32_t STBY0 : 1;      /* Power domain control during STANDBY0 mode  */
                vuint32_t : 2;
                vuint32_t STOP0 : 1;      /* Power domain control during STOP0 mode  */
                vuint32_t : 1;
                vuint32_t HALT0 : 1;      /* Power domain control during HALT0 mode  */
                vuint32_t RUN3 : 1;      /* Power domain control during RUN3 mode  */
                vuint32_t RUN2 : 1;      /* Power domain control during RUN2 mode  */
                vuint32_t RUN1 : 1;      /* Power domain control during RUN1 mode  */
                vuint32_t RUN0 : 1;      /* Power domain control during RUN0 mode  */
                vuint32_t DRUN : 1;      /* Power domain control during DRUN mode  */
                vuint32_t SAFE : 1;      /* Power domain control during SAFE mode  */
                vuint32_t TEST : 1;      /* Power domain control during TEST mode  */
                vuint32_t RST : 1;      /* Power domain control during RESET mode  */
            } B;
        } PCONF2;      /* Power Domain #2 Configuration */

        int8_t Reserved50[52];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t PD2 : 1;      /* Power status for power domain 2 */
                vuint32_t PD1 : 1;      /* Power status for power domain 1 */
                vuint32_t PD0 : 1;      /* Power status for power domain 0 */
            } B;
        } PSTAT;      /* Power Domain Status Register */

        int8_t Reserved51[60];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t MASK_LVDH_V5 : 1;      /* Mask Low Voltage Detection. This bit enables the Low Voltage .. */
            } B;
        } VCTL;      /* Voltage Regulator Control Register */
    };                                             /* End of PCU_tag */ 
#define PCU  (*(volatile struct PCU_tag *)          0xC3FE8000UL)

/*---------------------------------------------------------------------------*/
/* Power Management Unit                                                     */
/*---------------------------------------------------------------------------*/
    struct PMU_tag {

        int8_t Reserved52[64];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 2;
                vuint32_t ENPN : 1;      /* External NPN status flag */
                vuint32_t : 13;
                vuint32_t CTB : 2;      /* Configuration Trace Bits. This field describes the PMU use c .. */
            } B;
        } STATUS;      /* PMU status register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 30;
                vuint32_t SILHT : 2;      /* Start Idle or LVD or HVD BIST on main and backup lines */
            } B;
        } CTRL;      /* PMU control register */

        int8_t Reserved53[40];

        union {
            vuint32_t R;
            struct {
                vuint32_t MF_BB : 4;      /* Mask Fault Bypass Ballast. This field defines the mask for t .. */
            } B;
        } MASKF;      /* PMU mask fault register */

        union {
            vuint32_t R;
            struct {
                vuint32_t BB_LV : 4;      /* Bypass Ballast Low Voltage. This field monitors the NOT of n .. */
                vuint32_t : 9;
                vuint32_t FLNCF : 1;      /* Flash memory voltage monitor non-critical fault */
                vuint32_t IONCF : 1;      /* IO voltage monitor non-critical fault */
                vuint32_t RENCF : 1;      /* Regulator voltage monitor non-critical fault */
                vuint32_t : 13;
                vuint32_t LHCF : 1;      /* Low high voltage detector critical fault */
                vuint32_t LNCF : 1;      /* Low voltage detector non-critical fault */
                vuint32_t HNCF : 1;      /* High voltage detector non-critical fault */
            } B;
        } FAULT;      /* PMU fault monitor register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 10;
                vuint32_t MFVMP : 1;      /* Main Flash Voltage Monitor interrupt Pending */
                vuint32_t BFVMP : 1;      /* Backup Flash Voltage Monitor interrupt Pending */
                vuint32_t MIVMP : 1;      /* Main Io Voltage Monitor interrupt Pending */
                vuint32_t BIVMP : 1;      /* Backup IO Voltage Monitor interrupt Pending */
                vuint32_t MRVMP : 1;      /* Main Regulator Voltage Monitor interrupt Pending */
                vuint32_t BRVMP : 1;      /* Backup Regulator Voltage Monitor interrupt Enable */
                vuint32_t : 12;
                vuint32_t MLVDP : 1;      /* Main Low Voltage Detector Error interrupt Pending */
                vuint32_t BLVDP : 1;      /* Backup Low Voltage Detector Error interrupt Pending */
                vuint32_t MHVDP : 1;      /* Main High Voltage Detector Error interrupt Pending */
                vuint32_t BHVDP : 1;      /* Backup High Voltage Detector Error interrupt Pending */
            } B;
        } IRQS;      /* PMU interrupt request status register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 10;
                vuint32_t MFVME : 1;      /* Main Flash Voltage Monitor interrupt enable. */
                vuint32_t BFVME : 1;      /* Backup Flash Voltage Monitor interrupt enable. */
                vuint32_t MIVME : 1;      /* Main Io Voltage Monitor interrupt Enable. */
                vuint32_t BIVME : 1;      /* Backup IO Voltage Monitor interrupt Enable. */
                vuint32_t MRVME : 1;      /* Main Regulator Voltage Monitor interrupt Enable. */
                vuint32_t BRVME : 1;      /* Backup Regulator Voltage Monitor interrupt Enable. */
                vuint32_t : 12;
                vuint32_t MLVDE : 1;      /* Main Low Voltage Detector Error interrupt enable. */
                vuint32_t BLVDE : 1;      /* Backup Low Voltage Detector Error interrupt enable. */
                vuint32_t MHVDE : 1;      /* Main High Voltage Detector Error interrupt enable. */
                vuint32_t BHVDE : 1;      /* Backup High Voltage Detector Error interrupt enable. */
            } B;
        } IRQE;      /* PMU interrupt request enable register */
    };                                             /* End of PMU_tag */ 
#define PMU  (*(volatile struct PMU_tag *)          0xC3FE8080UL)

/*---------------------------------------------------------------------------*/
/* Periodic Interrupt Timer                                                  */
/*---------------------------------------------------------------------------*/
    struct PIT_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 30;
                vuint32_t MDIS : 1;      /* Module Disable - (PIT section). This is used to disable the  .. */
                vuint32_t FRZ : 1;      /* Freeze. Allows the timers to be stopped when the device ente .. */
            } B;
        } PITMCR;      /* Module Control Register */

        int8_t Reserved54[252];

        union {
            vuint32_t R;
            struct {
                vuint32_t TSV31 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV30 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV29 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV28 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV27 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV26 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV25 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV24 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV23 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV22 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV21 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV20 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV19 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV18 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV17 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV16 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV15 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV14 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV13 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV12 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV11 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV10 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV9 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV8 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV7 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV6 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV5 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV4 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV3 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV2 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV1 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV0 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
            } B;
        } TIMER0_LDVAL;      /* Timer Load Value Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TVL31 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL30 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL29 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL28 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL27 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL26 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL25 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL24 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL23 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL22 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL21 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL20 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL19 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL18 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL17 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL16 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL15 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL14 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL13 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL12 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL11 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL10 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL9 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL8 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL7 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL6 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL5 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL4 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL3 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL2 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL1 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL0 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
            } B;
        } TIMER0_CVAL;      /* Current Timer Value Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 30;
                vuint32_t TIE : 1;      /* Timer Interrupt Enable Bit. When an interrupt is pending (TI .. */
                vuint32_t TEN : 1;      /* Timer Enable Bit */
            } B;
        } TIMER0_TCTRL;      /* Timer Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t TIF : 1;      /* Time Interrupt Flag. TIF is set to 1 at the end of the timer .. */
            } B;
        } TIMER0_TFLG;      /* Timer Flag Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TSV31 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV30 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV29 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV28 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV27 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV26 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV25 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV24 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV23 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV22 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV21 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV20 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV19 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV18 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV17 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV16 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV15 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV14 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV13 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV12 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV11 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV10 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV9 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV8 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV7 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV6 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV5 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV4 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV3 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV2 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV1 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV0 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
            } B;
        } TIMER1_LDVAL;      /* Timer Load Value Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TVL31 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL30 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL29 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL28 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL27 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL26 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL25 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL24 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL23 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL22 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL21 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL20 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL19 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL18 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL17 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL16 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL15 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL14 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL13 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL12 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL11 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL10 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL9 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL8 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL7 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL6 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL5 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL4 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL3 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL2 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL1 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL0 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
            } B;
        } TIMER1_CVAL;      /* Current Timer Value Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 30;
                vuint32_t TIE : 1;      /* Timer Interrupt Enable Bit. When an interrupt is pending (TI .. */
                vuint32_t TEN : 1;      /* Timer Enable Bit */
            } B;
        } TIMER1_TCTRL;      /* Timer Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t TIF : 1;      /* Time Interrupt Flag. TIF is set to 1 at the end of the timer .. */
            } B;
        } TIMER1_TFLG;      /* Timer Flag Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TSV31 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV30 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV29 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV28 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV27 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV26 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV25 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV24 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV23 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV22 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV21 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV20 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV19 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV18 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV17 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV16 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV15 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV14 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV13 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV12 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV11 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV10 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV9 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV8 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV7 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV6 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV5 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV4 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV3 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV2 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV1 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV0 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
            } B;
        } TIMER2_LDVAL;      /* Timer Load Value Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TVL31 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL30 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL29 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL28 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL27 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL26 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL25 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL24 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL23 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL22 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL21 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL20 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL19 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL18 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL17 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL16 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL15 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL14 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL13 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL12 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL11 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL10 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL9 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL8 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL7 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL6 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL5 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL4 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL3 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL2 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL1 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL0 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
            } B;
        } TIMER2_CVAL;      /* Current Timer Value Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 30;
                vuint32_t TIE : 1;      /* Timer Interrupt Enable Bit. When an interrupt is pending (TI .. */
                vuint32_t TEN : 1;      /* Timer Enable Bit */
            } B;
        } TIMER2_TCTRL;      /* Timer Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t TIF : 1;      /* Time Interrupt Flag. TIF is set to 1 at the end of the timer .. */
            } B;
        } TIMER2_TFLG;      /* Timer Flag Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TSV31 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV30 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV29 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV28 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV27 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV26 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV25 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV24 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV23 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV22 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV21 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV20 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV19 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV18 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV17 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV16 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV15 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV14 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV13 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV12 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV11 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV10 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV9 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV8 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV7 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV6 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV5 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV4 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV3 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV2 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV1 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
                vuint32_t TSV0 : 1;      /* Time Start Value Bits. These bits set the timer start value. .. */
            } B;
        } TIMER3_LDVAL;      /* Timer Load Value Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TVL31 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL30 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL29 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL28 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL27 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL26 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL25 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL24 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL23 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL22 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL21 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL20 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL19 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL18 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL17 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL16 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL15 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL14 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL13 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL12 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL11 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL10 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL9 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL8 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL7 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL6 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL5 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL4 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL3 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL2 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL1 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
                vuint32_t TVL0 : 1;      /* Current Timer Value. These bits represent the current timer  .. */
            } B;
        } TIMER3_CVAL;      /* Current Timer Value Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 30;
                vuint32_t TIE : 1;      /* Timer Interrupt Enable Bit. When an interrupt is pending (TI .. */
                vuint32_t TEN : 1;      /* Timer Enable Bit */
            } B;
        } TIMER3_TCTRL;      /* Timer Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t TIF : 1;      /* Time Interrupt Flag. TIF is set to 1 at the end of the timer .. */
            } B;
        } TIMER3_TFLG;      /* Timer Flag Register */
    };                                             /* End of PIT_tag */ 
#define PIT  (*(volatile struct PIT_tag *)          0xC3FF0000UL)

/*---------------------------------------------------------------------------*/
/* Self-test control Unit                                                    */
/*---------------------------------------------------------------------------*/
    struct STCU_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t RUN : 1;      /* RUN. The STCU automatically clears the RUN bit when the self .. */
            } B;
        } RUN;      /* STCU Run Register */

        int8_t Reserved55[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* LBIST or MBIST pointer. PTR defines the logical pointer to t .. */
                vuint32_t : 14;
                vuint32_t FM : 1;      /* FCCU masking */
                vuint32_t BYP : 1;      /* Bypass mode. */
                vuint32_t : 4;
                vuint32_t CLK_CFG : 4;      /* Logic, Memory BIST and STCU core CLK Clock configuration. CL .. */
            } B;
        } CFG;      /* STCU Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t GLBIST : 13;      /* Granularity of the LBIST. The value of this field has to be  .. */
                vuint32_t GMBIST : 3;      /* Granularity of the MBIST. The value of this field has to be  .. */
            } B;
        } WDGG;      /* STCU Watchdog Register Granularity */

        union {
            vuint32_t R;
            struct {
                vuint32_t CRCE : 32;      /* CRC expected signature. */
            } B;
        } CRCE;      /* STCU CRC EXpected Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CRCR : 32;      /* Read CRC signature */
            } B;
        } CRCR;      /* STCU CRC Read Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t WDTOSFM : 1;      /* Watchdog timeout SIR Fault Mapping */
                vuint32_t CRCSSFM : 1;      /* CRC SIR Fault Mapping */
                vuint32_t ENGESFM : 1;      /* Engine Error SIR Fault Mapping */
                vuint32_t INVPSFM : 1;      /* Invalid Pointer SIR Fault Mapping */
                vuint32_t : 4;
                vuint32_t WDTOCFM : 1;      /* Watchdog timeout Critical Fault Mapping */
                vuint32_t CRCSCFM : 1;      /* CRC Status Critical Fault Mapping */
                vuint32_t ENGECFM : 1;      /* Engine Error Critical Fault Mapping */
                vuint32_t INVPCFM : 1;      /* Invalid Pointer Critical Fault Mapping */
                vuint32_t : 5;
                vuint32_t CFSF : 1;      /* Critical Faults Status Flag. This flag reports the global st .. */
                vuint32_t NCFSF : 1;      /* Non Critical Faults Status Flag */
                vuint32_t SIRSF : 1;      /* Stay In Reset Faults Status Flag. In the typical condition,  .. */
                vuint32_t : 4;
                vuint32_t WDTO : 1;      /* Watchdog timeout */
                vuint32_t CRCS : 1;      /* CRC status */
                vuint32_t ENGE : 1;      /* Engine Error */
                vuint32_t INVP : 1;      /* Invalid pointer */
            } B;
        } ERR;      /* STCU Error Register */

        int8_t Reserved56[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 27;
                vuint32_t LBS4 : 1;      /* LBIST status */
                vuint32_t LBS3 : 1;      /* LBIST status */
                vuint32_t LBS2 : 1;      /* LBIST status */
                vuint32_t LBS1 : 1;      /* LBIST status */
                vuint32_t LBS0 : 1;      /* LBIST status */
            } B;
        } LBS;      /* STCU LBIST Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 27;
                vuint32_t LBE4 : 1;      /* LBIST End status */
                vuint32_t LBE3 : 1;      /* LBIST End status */
                vuint32_t LBE2 : 1;      /* LBIST End status */
                vuint32_t LBE1 : 1;      /* LBIST End status */
                vuint32_t LBE0 : 1;      /* LBIST End status */
            } B;
        } LBE;      /* STCU LBIST End Flag Register */

        int8_t Reserved57[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 27;
                vuint32_t LBCFM4 : 1;      /* LBIST Critical Fault Mapping */
                vuint32_t LBCFM3 : 1;      /* LBIST Critical Fault Mapping */
                vuint32_t LBCFM2 : 1;      /* LBIST Critical Fault Mapping */
                vuint32_t LBCFM1 : 1;      /* LBIST Critical Fault Mapping */
                vuint32_t LBCFM0 : 1;      /* LBIST Critical Fault Mapping */
            } B;
        } LBCFM;      /* STCU LBIST Critical FM Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t LBSFM15 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM14 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM13 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM12 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM11 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM10 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM9 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM8 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM7 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM6 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM5 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM4 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM3 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM2 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM1 : 1;      /* LBIST SIR Fault Mapping */
                vuint32_t LBSFM0 : 1;      /* LBIST SIR Fault Mapping */
            } B;
        } LBSFM;      /* Reset FM Register */

        int8_t Reserved58[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t MBS31 : 1;      /* MBIST status */
                vuint32_t MBS30 : 1;      /* MBIST status */
                vuint32_t MBS29 : 1;      /* MBIST status */
                vuint32_t MBS28 : 1;      /* MBIST status */
                vuint32_t MBS27 : 1;      /* MBIST status */
                vuint32_t MBS26 : 1;      /* MBIST status */
                vuint32_t MBS25 : 1;      /* MBIST status */
                vuint32_t MBS24 : 1;      /* MBIST status */
                vuint32_t MBS23 : 1;      /* MBIST status */
                vuint32_t MBS22 : 1;      /* MBIST status */
                vuint32_t MBS21 : 1;      /* MBIST status */
                vuint32_t MBS20 : 1;      /* MBIST status */
                vuint32_t MBS19 : 1;      /* MBIST status */
                vuint32_t MBS18 : 1;      /* MBIST status */
                vuint32_t MBS17 : 1;      /* MBIST status */
                vuint32_t MBS16 : 1;      /* MBIST status */
                vuint32_t MBS15 : 1;      /* MBIST status */
                vuint32_t MBS14 : 1;      /* MBIST status */
                vuint32_t MBS13 : 1;      /* MBIST status */
                vuint32_t MBS12 : 1;      /* MBIST status */
                vuint32_t MBS11 : 1;      /* MBIST status */
                vuint32_t MBS10 : 1;      /* MBIST status */
                vuint32_t MBS9 : 1;      /* MBIST status */
                vuint32_t MBS8 : 1;      /* MBIST status */
                vuint32_t MBS7 : 1;      /* MBIST status */
                vuint32_t MBS6 : 1;      /* MBIST status */
                vuint32_t MBS5 : 1;      /* MBIST status */
                vuint32_t MBS4 : 1;      /* MBIST status */
                vuint32_t MBS3 : 1;      /* MBIST status */
                vuint32_t MBS2 : 1;      /* MBIST status */
                vuint32_t MBS1 : 1;      /* MBIST status */
                vuint32_t MBS0 : 1;      /* MBIST status */
            } B;
        } MBSL;      /* STCU MBIST Status Low Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t MB34 : 1;      /* MBIST status */
                vuint32_t MB33 : 1;      /* MBIST status */
                vuint32_t MB32 : 1;      /* MBIST status */
            } B;
        } MBSH;      /* STCU MBIST Status High Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t MBE31 : 1;      /* MBIST End status */
                vuint32_t MBE30 : 1;      /* MBIST End status */
                vuint32_t MBE29 : 1;      /* MBIST End status */
                vuint32_t MBE28 : 1;      /* MBIST End status */
                vuint32_t MBE27 : 1;      /* MBIST End status */
                vuint32_t MBE26 : 1;      /* MBIST End status */
                vuint32_t MBE25 : 1;      /* MBIST End status */
                vuint32_t MBE24 : 1;      /* MBIST End status */
                vuint32_t MBE23 : 1;      /* MBIST End status */
                vuint32_t MBE22 : 1;      /* MBIST End status */
                vuint32_t MBE21 : 1;      /* MBIST End status */
                vuint32_t MBE20 : 1;      /* MBIST End status */
                vuint32_t MBE19 : 1;      /* MBIST End status */
                vuint32_t MBE18 : 1;      /* MBIST End status */
                vuint32_t MBE17 : 1;      /* MBIST End status */
                vuint32_t MBE16 : 1;      /* MBIST End status */
                vuint32_t MBE15 : 1;      /* MBIST End status */
                vuint32_t MBE14 : 1;      /* MBIST End status */
                vuint32_t MBE13 : 1;      /* MBIST End status */
                vuint32_t MBE12 : 1;      /* MBIST End status */
                vuint32_t MBE11 : 1;      /* MBIST End status */
                vuint32_t MBE10 : 1;      /* MBIST End status */
                vuint32_t MBE9 : 1;      /* MBIST End status */
                vuint32_t MBE8 : 1;      /* MBIST End status */
                vuint32_t MBE7 : 1;      /* MBIST End status */
                vuint32_t MBE6 : 1;      /* MBIST End status */
                vuint32_t MBE5 : 1;      /* MBIST End status */
                vuint32_t MBE4 : 1;      /* MBIST End status */
                vuint32_t MBE3 : 1;      /* MBIST End status */
                vuint32_t MBE2 : 1;      /* MBIST End status */
                vuint32_t MBE1 : 1;      /* MBIST End status */
                vuint32_t MBE0 : 1;      /* MBIST End status */
            } B;
        } MBEL;      /* STCU MBIST End Flag Low Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t MBE34 : 1;      /* MBIST End status */
                vuint32_t MBE33 : 1;      /* MBIST End status */
                vuint32_t MBE32 : 1;      /* MBIST End status */
            } B;
        } MBEH;      /* STCU MBIST End Flag High Register */

        int8_t Reserved59[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t MBCFM31 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM30 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM29 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM28 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM27 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM26 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM25 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM24 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM23 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM22 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM21 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM20 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM19 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM18 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM17 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM16 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM15 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM14 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM13 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM12 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM11 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM10 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM9 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM8 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM7 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM6 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM5 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM4 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM3 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM2 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM1 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM0 : 1;      /* MBIST Critical Fault Mapping */
            } B;
        } MBCFML;      /* STCU MBIST Critical FM Low Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t MBCFM34 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM33 : 1;      /* MBIST Critical Fault Mapping */
                vuint32_t MBCFM32 : 1;      /* MBIST Critical Fault Mapping */
            } B;
        } MBCFMH;      /* STCU MBIST Critical FM High Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t MBSFM31 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM30 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM29 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM28 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM27 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM26 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM25 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM24 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM23 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM22 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM21 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM20 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM19 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM18 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM17 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM16 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM15 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM14 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM13 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM12 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM11 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM10 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM9 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM8 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM7 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM6 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM5 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM4 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM3 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM2 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM1 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM0 : 1;      /* MBIST SIR Fault Mapping */
            } B;
        } MBSFML;      /* Reset FM Low Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t MBSFM34 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM33 : 1;      /* MBIST SIR Fault Mapping */
                vuint32_t MBSFM32 : 1;      /* MBIST SIR Fault Mapping */
            } B;
        } MBSFMH;      /* Reset FM High Register */

        int8_t Reserved60[32];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 5;
                vuint32_t SHS : 3;      /* Shift speed. SHS defines the shift speed */
                vuint32_t SCEN_OFF : 4;      /* Scan enable OFF. SCEN_OFF defines the number of clock cycles .. */
                vuint32_t SCEN_ON : 4;      /* Scan enable ON. SCEN_ON defines the number of clock cycles O .. */
                vuint32_t : 5;
                vuint32_t CWS : 3;      /* Capture window size. CWS defines the capture window size. */
            } B;
        } LB_CTRL0;      /* STCU LBIST Control Register 0 */

        int8_t Reserved61[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t MISREL : 32;      /* MISR EXpected low part. Defines the low word of the EXpected .. */
            } B;
        } LB_MISREL0;      /* STCU LBIST MISR EXpected Low Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISREH : 32;      /* MISR EXpected high part. Defines the high word of the EXpect .. */
            } B;
        } LB_MISREH0;      /* STCU LBIST MISR EXpected High Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISRRL : 32;      /* MISR Read low part. Contains the low word of the MISR obtain .. */
            } B;
        } LB_MISRRL0;      /* STCU LBIST MISR Read Low Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISRRH : 32;      /* MISR Read high part. Contains the high word of the MISR obta .. */
            } B;
        } LB_MISRRH0;      /* STCU LBIST MISR Read High Register 0 */

        int8_t Reserved62[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 5;
                vuint32_t SHS : 3;      /* Shift speed. SHS defines the shift speed */
                vuint32_t SCEN_OFF : 4;      /* Scan enable OFF. SCEN_OFF defines the number of clock cycles .. */
                vuint32_t SCEN_ON : 4;      /* Scan enable ON. SCEN_ON defines the number of clock cycles O .. */
                vuint32_t : 5;
                vuint32_t CWS : 3;      /* Capture window size. CWS defines the capture window size. */
            } B;
        } LB_CTRL1;      /* STCU LBIST Control Register 1 */

        int8_t Reserved63[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t MISREL : 32;      /* MISR EXpected low part. Defines the low word of the EXpected .. */
            } B;
        } LB_MISREL1;      /* STCU LBIST MISR EXpected Low Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISREH : 32;      /* MISR EXpected high part. Defines the high word of the EXpect .. */
            } B;
        } LB_MISREH1;      /* STCU LBIST MISR EXpected High Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISRRL : 32;      /* MISR Read low part. Contains the low word of the MISR obtain .. */
            } B;
        } LB_MISRRL1;      /* STCU LBIST MISR Read Low Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISRRH : 32;      /* MISR Read high part. Contains the high word of the MISR obta .. */
            } B;
        } LB_MISRRH1;      /* STCU LBIST MISR Read High Register 1 */

        int8_t Reserved64[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 5;
                vuint32_t SHS : 3;      /* Shift speed. SHS defines the shift speed */
                vuint32_t SCEN_OFF : 4;      /* Scan enable OFF. SCEN_OFF defines the number of clock cycles .. */
                vuint32_t SCEN_ON : 4;      /* Scan enable ON. SCEN_ON defines the number of clock cycles O .. */
                vuint32_t : 5;
                vuint32_t CWS : 3;      /* Capture window size. CWS defines the capture window size. */
            } B;
        } LB_CTRL2;      /* STCU LBIST Control Register 2 */

        int8_t Reserved65[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t MISREL : 32;      /* MISR EXpected low part. Defines the low word of the EXpected .. */
            } B;
        } LB_MISREL2;      /* STCU LBIST MISR EXpected Low Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISREH : 32;      /* MISR EXpected high part. Defines the high word of the EXpect .. */
            } B;
        } LB_MISREH2;      /* STCU LBIST MISR EXpected High Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISRRL : 32;      /* MISR Read low part. Contains the low word of the MISR obtain .. */
            } B;
        } LB_MISRRL2;      /* STCU LBIST MISR Read Low Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISRRH : 32;      /* MISR Read high part. Contains the high word of the MISR obta .. */
            } B;
        } LB_MISRRH2;      /* STCU LBIST MISR Read High Register 2 */

        int8_t Reserved66[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 5;
                vuint32_t SHS : 3;      /* Shift speed. SHS defines the shift speed */
                vuint32_t SCEN_OFF : 4;      /* Scan enable OFF. SCEN_OFF defines the number of clock cycles .. */
                vuint32_t SCEN_ON : 4;      /* Scan enable ON. SCEN_ON defines the number of clock cycles O .. */
                vuint32_t : 5;
                vuint32_t CWS : 3;      /* Capture window size. CWS defines the capture window size. */
            } B;
        } LB_CTRL3;      /* STCU LBIST Control Register 3 */

        int8_t Reserved67[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t MISREL : 32;      /* MISR EXpected low part. Defines the low word of the EXpected .. */
            } B;
        } LB_MISREL3;      /* STCU LBIST MISR EXpected Low Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISREH : 32;      /* MISR EXpected high part. Defines the high word of the EXpect .. */
            } B;
        } LB_MISREH3;      /* STCU LBIST MISR EXpected High Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISRRL : 32;      /* MISR Read low part. Contains the low word of the MISR obtain .. */
            } B;
        } LB_MISRRL3;      /* STCU LBIST MISR Read Low Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISRRH : 32;      /* MISR Read high part. Contains the high word of the MISR obta .. */
            } B;
        } LB_MISRRH3;      /* STCU LBIST MISR Read High Register 3 */

        int8_t Reserved68[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 5;
                vuint32_t SHS : 3;      /* Shift speed. SHS defines the shift speed */
                vuint32_t SCEN_OFF : 4;      /* Scan enable OFF. SCEN_OFF defines the number of clock cycles .. */
                vuint32_t SCEN_ON : 4;      /* Scan enable ON. SCEN_ON defines the number of clock cycles O .. */
                vuint32_t : 5;
                vuint32_t CWS : 3;      /* Capture window size. CWS defines the capture window size. */
            } B;
        } LB_CTRL4;      /* STCU LBIST Control Register 4 */

        int8_t Reserved69[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t MISREL : 32;      /* MISR EXpected low part. Defines the low word of the EXpected .. */
            } B;
        } LB_MISREL4;      /* STCU LBIST MISR EXpected Low Register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISREH : 32;      /* MISR EXpected high part. Defines the high word of the EXpect .. */
            } B;
        } LB_MISREH4;      /* STCU LBIST MISR EXpected High Register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISRRL : 32;      /* MISR Read low part. Contains the low word of the MISR obtain .. */
            } B;
        } LB_MISRRL4;      /* STCU LBIST MISR Read Low Register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MISRRH : 32;      /* MISR Read high part. Contains the high word of the MISR obta .. */
            } B;
        } LB_MISRRH4;      /* STCU LBIST MISR Read High Register 4 */

        int8_t Reserved70[488];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL0;      /* STCU MBIST Control Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL1;      /* STCU MBIST Control Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL2;      /* STCU MBIST Control Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL3;      /* STCU MBIST Control Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL4;      /* STCU MBIST Control Register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL5;      /* STCU MBIST Control Register 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL6;      /* STCU MBIST Control Register 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL7;      /* STCU MBIST Control Register 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL8;      /* STCU MBIST Control Register 8 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL9;      /* STCU MBIST Control Register 9 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL10;      /* STCU MBIST Control Register 10 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL11;      /* STCU MBIST Control Register 11 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL12;      /* STCU MBIST Control Register 12 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL13;      /* STCU MBIST Control Register 13 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL14;      /* STCU MBIST Control Register 14 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL15;      /* STCU MBIST Control Register 15 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL16;      /* STCU MBIST Control Register 16 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL17;      /* STCU MBIST Control Register 17 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL18;      /* STCU MBIST Control Register 18 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL19;      /* STCU MBIST Control Register 19 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL20;      /* STCU MBIST Control Register 20 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL21;      /* STCU MBIST Control Register 21 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL22;      /* STCU MBIST Control Register 22 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL23;      /* STCU MBIST Control Register 23 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL24;      /* STCU MBIST Control Register 24 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL25;      /* STCU MBIST Control Register 25 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL26;      /* STCU MBIST Control Register 26 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL27;      /* STCU MBIST Control Register 27 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL28;      /* STCU MBIST Control Register 28 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL29;      /* STCU MBIST Control Register 29 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL30;      /* STCU MBIST Control Register 30 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL31;      /* STCU MBIST Control Register 31 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL32;      /* STCU MBIST Control Register 32 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL33;      /* STCU MBIST Control Register 33 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL34;      /* STCU MBIST Control Register 34 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PTR : 7;      /* Next LBIST or MBIST pointer. PTR defines the logical pointer .. */
                vuint32_t : 2;
                vuint32_t MB_TIME : 6;      /* Memory BIST RUN Time. The time budget of the MBIST is evalua .. */
            } B;
        } MB_CTRL35;      /* STCU MBIST Control Register 35 */
    };                                             /* End of STCU_tag */ 
#define STCU  (*(volatile struct STCU_tag *)         0xC3FF4000UL)

/*---------------------------------------------------------------------------*/
/* Analog to Digital Converter 0                                             */
/*---------------------------------------------------------------------------*/
    struct ADC0_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t OWREN : 1;      /* Overwrite enable */
                vuint32_t WLSIDE : 1;      /* Write left /right-aligned */
                vuint32_t MODE : 1;      /* One_Shot/Scan */
                vuint32_t EDGLEV : 1;      /* Edge or level selection for external start trigger. Edge (ED .. */
                vuint32_t TRGEN : 1;      /* External trigger enable. When set enables the external trigg .. */
                vuint32_t EDGE : 1;      /* Start trigger edge/level detection. If TRGEN is one and EDGL .. */
                vuint32_t XSTRTEN : 1;      /* External Start enable. If this bit is set, Start signal is a .. */
                vuint32_t NSTART : 1;      /* Start conversion. Setting this bit starts the chain or scan  .. */
                vuint32_t : 1;
                vuint32_t JTRGEN : 1;      /* Injection external trigger enable. Setting this bit will ena .. */
                vuint32_t JEDGE : 1;      /* Injection trigger edge selection. Edge selection for externa .. */
                vuint32_t JSTART : 1;      /* Injection start. Setting this bit will start the configured  .. */
                vuint32_t : 2;
                vuint32_t CTUEN : 1;      /* Cross Trigger Unit Enable */
                vuint32_t : 8;
                vuint32_t ADCLKSEL : 1;      /* Analog clock frequency selector. If this bit is set the AD_c .. */
                vuint32_t ABORTCHAIN : 1;      /* Abort Chain. If this bit is set the ongoing chain conversion .. */
                vuint32_t ABORT : 1;      /* Abort Conversion. If this bit is set the ongoing conversion  .. */
                vuint32_t ACKO : 1;      /* Auto-clock-off enable. If set enables the auto-clock-off fea .. */
                vuint32_t : 4;
                vuint32_t PWDN : 1;      /* Power-down enable. When this bit is set, the analog module i .. */
            } B;
        } MCR;      /* Main Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t NSTART : 1;      /* This status bit is used to signal that a Normal conversion i .. */
                vuint32_t JABORT : 1;      /* This status bit is used to signal that an Injected conversio .. */
                vuint32_t : 2;
                vuint32_t JSTART : 1;      /* This status bit is used to signal that an Injected conversio .. */
                vuint32_t : 3;
                vuint32_t CTUSTART : 1;      /* This status bit is used to signal that a CTU conversion is o .. */
                vuint32_t CHADDR : 7;      /* Channel under measure address. This status bit is used to si .. */
                vuint32_t : 3;
                vuint32_t ACKO : 1;      /* Auto-clock-off enable. This status bit is used to signal if  .. */
                vuint32_t : 2;
                vuint32_t ADCSTATUS : 3;      /* The value of this parameter depends on ADC status */
            } B;
        } MSR;      /* Main Status Register */

        int8_t Reserved71[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 27;
                vuint32_t EOCTU : 1;      /* End of CTU conversion. It is the interrupt of the digital en .. */
                vuint32_t JEOC : 1;      /* End of injected channel conversion. It is the interrupt of t .. */
                vuint32_t JECH : 1;      /* End of injected chain conversion. It is the interrupt of the .. */
                vuint32_t EOC : 1;      /* End of channel conversion. It is the interrupt of the digita .. */
                vuint32_t ECH : 1;      /* End of chain conversion. It is the interrupt of the digital  .. */
            } B;
        } ISR;      /* Interrupt Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t EOC_CH0 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH1 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH2 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH3 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH4 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH5 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH6 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH7 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH8 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH9 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH10 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH11 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH12 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH13 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH14 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH15 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH16 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH17 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH18 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH19 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH20 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH21 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH22 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH23 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH24 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH25 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH26 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH27 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH28 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH29 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH30 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH31 : 1;      /* This field indicates the end of conversion. */
            } B;
        } CEOCFR0;      /* Channel Pending Register 0 */

        int8_t Reserved72[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 27;
                vuint32_t MSKEOCTU : 1;      /* Mask bit for EOCTU. When set, the interrupt is enabled. */
                vuint32_t MSKJEOC : 1;      /* Mask bit for JEOC. When set, the interrupt is enabled. */
                vuint32_t MSKJECH : 1;      /* Mask bit for JECH. When set, the interrupt is enabled. */
                vuint32_t MSKEOC : 1;      /* Mask bit for EOC. When set, the interrupt is enabled. */
                vuint32_t MSKECH : 1;      /* Mask bit for ECH. When set, the interrupt is enabled. */
            } B;
        } IMR;      /* Interrupt Mask Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CIM_31 : 1;      /* This field enables the interrupt for channel_31. */
                vuint32_t CIM_30 : 1;      /* This field enables the interrupt for channel_30. */
                vuint32_t CIM_29 : 1;      /* This field enables the interrupt for channel_29. */
                vuint32_t CIM_28 : 1;      /* This field enables the interrupt for channel_28. */
                vuint32_t CIM_27 : 1;      /* This field enables the interrupt for channel_27. */
                vuint32_t CIM_26 : 1;      /* This field enables the interrupt for channel_26. */
                vuint32_t CIM_25 : 1;      /* This field enables the interrupt for channel_25. */
                vuint32_t CIM_24 : 1;      /* This field enables the interrupt for channel_24. */
                vuint32_t CIM_23 : 1;      /* This field enables the interrupt for channel_23. */
                vuint32_t CIM_22 : 1;      /* This field enables the interrupt for channel_22. */
                vuint32_t CIM_21 : 1;      /* This field enables the interrupt for channel_21. */
                vuint32_t CIM_20 : 1;      /* This field enables the interrupt for channel_20. */
                vuint32_t CIM_19 : 1;      /* This field enables the interrupt for channel_19. */
                vuint32_t CIM_18 : 1;      /* This field enables the interrupt for channel_18. */
                vuint32_t CIM_17 : 1;      /* This field enables the interrupt for channel_17. */
                vuint32_t CIM_16 : 1;      /* This field enables the interrupt for channel_16. */
                vuint32_t CIM_15 : 1;      /* This field enables the interrupt for channel_15. */
                vuint32_t CIM_14 : 1;      /* This field enables the interrupt for channel_14. */
                vuint32_t CIM_13 : 1;      /* This field enables the interrupt for channel_13. */
                vuint32_t CIM_12 : 1;      /* This field enables the interrupt for channel_12. */
                vuint32_t CIM_11 : 1;      /* This field enables the interrupt for channel_11. */
                vuint32_t CIM_10 : 1;      /* This field enables the interrupt for channel_10. */
                vuint32_t CIM_9 : 1;      /* This field enables the interrupt for channel_9. */
                vuint32_t CIM_8 : 1;      /* This field enables the interrupt for channel_8. */
                vuint32_t CIM_7 : 1;      /* This field enables the interrupt for channel_7. */
                vuint32_t CIM_6 : 1;      /* This field enables the interrupt for channel_6. */
                vuint32_t CIM_5 : 1;      /* This field enables the interrupt for channel_5. */
                vuint32_t CIM_4 : 1;      /* This field enables the interrupt for channel_4. */
                vuint32_t CIM_3 : 1;      /* This field enables the interrupt for channel_3. */
                vuint32_t CIM_2 : 1;      /* This field enables the interrupt for channel_2. */
                vuint32_t CIM_1 : 1;      /* This field enables the interrupt for channel_1. */
                vuint32_t CIM_0 : 1;      /* This field enables the interrupt for channel_0. */
            } B;
        } CIMR0;      /* Channel Interrupt Mask Register 0 */

        int8_t Reserved73[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t WDG15L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG15H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG14L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG14H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG13L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG13H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG12L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG12H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG11L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG11H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG10L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG10H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG9L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG9H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG8L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG8H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG7L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG7H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG6L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG6H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG5L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG5H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG4L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG4H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG3L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG3H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG2L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG2H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG1L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG1H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG0L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG0H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
            } B;
        } WTISR;      /* Watchdog Threshold Interrupt Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t MSKWDG15L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG15H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG14L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG14H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG13L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG13H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG12L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG12H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG11L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG11H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG10L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG10H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG9L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG9H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG8L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG8H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG7L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG7H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG6L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG6H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG5L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG5H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG4L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG4H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG3L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG3H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG2L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG2H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG1L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG1H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG0L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG0H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
            } B;
        } WTIMR;      /* Watchdog Threshold Interrupt Mask Register */

        int8_t Reserved74[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 30;
                vuint32_t DCLR : 1;      /* DMA clear sequence enable */
                vuint32_t DMAEN : 1;      /* DMA global enable */
            } B;
        } DMAE;      /* DMA Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t DMA31 : 1;      /* DMA enable */
                vuint32_t DMA30 : 1;      /* DMA enable */
                vuint32_t DMA29 : 1;      /* DMA enable */
                vuint32_t DMA28 : 1;      /* DMA enable */
                vuint32_t DMA27 : 1;      /* DMA enable */
                vuint32_t DMA26 : 1;      /* DMA enable */
                vuint32_t DMA25 : 1;      /* DMA enable */
                vuint32_t DMA24 : 1;      /* DMA enable */
                vuint32_t DMA23 : 1;      /* DMA enable */
                vuint32_t DMA22 : 1;      /* DMA enable */
                vuint32_t DMA21 : 1;      /* DMA enable */
                vuint32_t DMA20 : 1;      /* DMA enable */
                vuint32_t DMA19 : 1;      /* DMA enable */
                vuint32_t DMA18 : 1;      /* DMA enable */
                vuint32_t DMA17 : 1;      /* DMA enable */
                vuint32_t DMA16 : 1;      /* DMA enable */
                vuint32_t DMA15 : 1;      /* DMA enable */
                vuint32_t DMA14 : 1;      /* DMA enable */
                vuint32_t DMA13 : 1;      /* DMA enable */
                vuint32_t DMA12 : 1;      /* DMA enable */
                vuint32_t DMA11 : 1;      /* DMA enable */
                vuint32_t DMA10 : 1;      /* DMA enable */
                vuint32_t DMA9 : 1;      /* DMA enable */
                vuint32_t DMA8 : 1;      /* DMA enable */
                vuint32_t DMA7 : 1;      /* DMA enable */
                vuint32_t DMA6 : 1;      /* DMA enable */
                vuint32_t DMA5 : 1;      /* DMA enable */
                vuint32_t DMA4 : 1;      /* DMA enable */
                vuint32_t DMA3 : 1;      /* DMA enable */
                vuint32_t DMA2 : 1;      /* DMA enable */
                vuint32_t DMA1 : 1;      /* DMA enable */
                vuint32_t DMA0 : 1;      /* DMA enable */
            } B;
        } DMAR0;      /* DMA Channel Select Register 0 */

        int8_t Reserved75[24];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR0;      /* Threshold Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR1;      /* Threshold Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR2;      /* Threshold Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR3;      /* Threshold Register 3 */

        int8_t Reserved76[16];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t PREVAL0 : 2;      /* Internal voltage selection for presampling */
                vuint32_t PRECONV : 1;      /* Convert presampled value */
            } B;
        } PSCR;      /* Presampling Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRES31 : 1;      /* Presampling enable */
                vuint32_t PRES30 : 1;      /* Presampling enable */
                vuint32_t PRES29 : 1;      /* Presampling enable */
                vuint32_t PRES28 : 1;      /* Presampling enable */
                vuint32_t PRES27 : 1;      /* Presampling enable */
                vuint32_t PRES26 : 1;      /* Presampling enable */
                vuint32_t PRES25 : 1;      /* Presampling enable */
                vuint32_t PRES24 : 1;      /* Presampling enable */
                vuint32_t PRES23 : 1;      /* Presampling enable */
                vuint32_t PRES22 : 1;      /* Presampling enable */
                vuint32_t PRES21 : 1;      /* Presampling enable */
                vuint32_t PRES20 : 1;      /* Presampling enable */
                vuint32_t PRES19 : 1;      /* Presampling enable */
                vuint32_t PRES18 : 1;      /* Presampling enable */
                vuint32_t PRES17 : 1;      /* Presampling enable */
                vuint32_t PRES16 : 1;      /* Presampling enable */
                vuint32_t PRES15 : 1;      /* Presampling enable */
                vuint32_t PRES14 : 1;      /* Presampling enable */
                vuint32_t PRES13 : 1;      /* Presampling enable */
                vuint32_t PRES12 : 1;      /* Presampling enable */
                vuint32_t PRES11 : 1;      /* Presampling enable */
                vuint32_t PRES10 : 1;      /* Presampling enable */
                vuint32_t PRES9 : 1;      /* Presampling enable */
                vuint32_t PRES8 : 1;      /* Presampling enable */
                vuint32_t PRES7 : 1;      /* Presampling enable */
                vuint32_t PRES6 : 1;      /* Presampling enable */
                vuint32_t PRES5 : 1;      /* Presampling enable */
                vuint32_t PRES4 : 1;      /* Presampling enable */
                vuint32_t PRES3 : 1;      /* Presampling enable */
                vuint32_t PRES2 : 1;      /* Presampling enable */
                vuint32_t PRES1 : 1;      /* Presampling enable */
                vuint32_t PRES0 : 1;      /* Presampling enable */
            } B;
        } PSR0;      /* Presampling Register 0 */

        int8_t Reserved77[12];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t INPLATCH : 1;      /* Configuration bit for latching phase duration. */
                vuint32_t : 1;
                vuint32_t OFFSHIFT : 2;      /* Configuration for offset shift characteristic */
                vuint32_t : 1;
                vuint32_t INPCMP : 2;      /* Configuration bits for comparison +++phase duration */
                vuint32_t : 1;
                vuint32_t INPSAMP : 8;      /* Configuration +++bits for sampling phase duration */
            } B;
        } CTR0;      /* Conversion Timing Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t INPLATCH : 1;      /* Configuration bit for latching phase duration. */
                vuint32_t : 1;
                vuint32_t OFFSHIFT : 2;      /* Configuration for offset shift characteristic */
                vuint32_t : 1;
                vuint32_t INPCMP : 2;      /* Configuration bits for comparison phase duration */
                vuint32_t : 1;
                vuint32_t INPSAMP : 7;      /* Configuration bits for sampling phase duration */
                vuint32_t TSENSOR_SEL : 1;      /* Select the operating mode of the TSENS module */
            } B;
        } CTR1;      /* Conversion timing register 1 */

        int8_t Reserved78[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t CH31 : 1;      /* Sampling enable */
                vuint32_t CH30 : 1;      /* Sampling enable */
                vuint32_t CH29 : 1;      /* Sampling enable */
                vuint32_t CH28 : 1;      /* Sampling enable */
                vuint32_t CH27 : 1;      /* Sampling enable */
                vuint32_t CH26 : 1;      /* Sampling enable */
                vuint32_t CH25 : 1;      /* Sampling enable */
                vuint32_t CH24 : 1;      /* Sampling enable */
                vuint32_t CH23 : 1;      /* Sampling enable */
                vuint32_t CH22 : 1;      /* Sampling enable */
                vuint32_t CH21 : 1;      /* Sampling enable */
                vuint32_t CH20 : 1;      /* Sampling enable */
                vuint32_t CH19 : 1;      /* Sampling enable */
                vuint32_t CH18 : 1;      /* Sampling enable */
                vuint32_t CH17 : 1;      /* Sampling enable */
                vuint32_t CH16 : 1;      /* Sampling enable */
                vuint32_t CH15 : 1;      /* Sampling enable */
                vuint32_t CH14 : 1;      /* Sampling enable */
                vuint32_t CH13 : 1;      /* Sampling enable */
                vuint32_t CH12 : 1;      /* Sampling enable */
                vuint32_t CH11 : 1;      /* Sampling enable */
                vuint32_t CH10 : 1;      /* Sampling enable */
                vuint32_t CH9 : 1;      /* Sampling enable */
                vuint32_t CH8 : 1;      /* Sampling enable */
                vuint32_t CH7 : 1;      /* Sampling enable */
                vuint32_t CH6 : 1;      /* Sampling enable */
                vuint32_t CH5 : 1;      /* Sampling enable */
                vuint32_t CH4 : 1;      /* Sampling enable */
                vuint32_t CH3 : 1;      /* Sampling enable */
                vuint32_t CH2 : 1;      /* Sampling enable */
                vuint32_t CH1 : 1;      /* Sampling enable */
                vuint32_t CH0 : 1;      /* Sampling enable */
            } B;
        } NCMR0;      /* Normal Conversion Mask Register 0 */

        int8_t Reserved79[12];

        union {
            vuint32_t R;
            struct {
                vuint32_t CH31 : 1;      /* Sampling enable */
                vuint32_t CH30 : 1;      /* Sampling enable */
                vuint32_t CH29 : 1;      /* Sampling enable */
                vuint32_t CH28 : 1;      /* Sampling enable */
                vuint32_t CH27 : 1;      /* Sampling enable */
                vuint32_t CH26 : 1;      /* Sampling enable */
                vuint32_t CH25 : 1;      /* Sampling enable */
                vuint32_t CH24 : 1;      /* Sampling enable */
                vuint32_t CH23 : 1;      /* Sampling enable */
                vuint32_t CH22 : 1;      /* Sampling enable */
                vuint32_t CH21 : 1;      /* Sampling enable */
                vuint32_t CH20 : 1;      /* Sampling enable */
                vuint32_t CH19 : 1;      /* Sampling enable */
                vuint32_t CH18 : 1;      /* Sampling enable */
                vuint32_t CH17 : 1;      /* Sampling enable */
                vuint32_t CH16 : 1;      /* Sampling enable */
                vuint32_t CH15 : 1;      /* Sampling enable */
                vuint32_t CH14 : 1;      /* Sampling enable */
                vuint32_t CH13 : 1;      /* Sampling enable */
                vuint32_t CH12 : 1;      /* Sampling enable */
                vuint32_t CH11 : 1;      /* Sampling enable */
                vuint32_t CH10 : 1;      /* Sampling enable */
                vuint32_t CH9 : 1;      /* Sampling enable */
                vuint32_t CH8 : 1;      /* Sampling enable */
                vuint32_t CH7 : 1;      /* Sampling enable */
                vuint32_t CH6 : 1;      /* Sampling enable */
                vuint32_t CH5 : 1;      /* Sampling enable */
                vuint32_t CH4 : 1;      /* Sampling enable */
                vuint32_t CH3 : 1;      /* Sampling enable */
                vuint32_t CH2 : 1;      /* Sampling enable */
                vuint32_t CH1 : 1;      /* Sampling enable */
                vuint32_t CH0 : 1;      /* Sampling enable */
            } B;
        } JCMR0;      /* Injected Conversion Mask Register 0 */

        int8_t Reserved80[16];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t PDED : 8;      /* The delay between the power-down bit reset and the start of  .. */
            } B;
        } PDEDR;      /* Power Down Exit Delay Register */

        int8_t Reserved81[52];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR0;      /* Channel 0 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR1;      /* Channel 1 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR2;      /* Channel 2 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR3;      /* Channel 3 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR4;      /* Channel 4 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR5;      /* Channel 5 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR6;      /* Channel 6 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR7;      /* Channel 7 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR8;      /* Channel 8 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR9;      /* Channel 9 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR10;      /* Channel 10 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR11;      /* Channel 11 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR12;      /* Channel 12 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR13;      /* Channel 13 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR14;      /* Channel 14 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR15;      /* Channel 15 Data Register */

        int8_t Reserved82[320];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR4;      /* Threshold Register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR5;      /* Threshold Register 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR6;      /* Threshold Register 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR7;      /* Threshold Register 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR8;      /* Threshold Register 8 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR9;      /* Threshold Register 9 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR10;      /* Threshold Register 10 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR11;      /* Threshold Register 11 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR12;      /* Threshold Register 12 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR13;      /* Threshold Register 13 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR14;      /* Threshold Register 14 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR15;      /* Threshold Register 15 */

        union {
            vuint32_t R;
            struct {
                vuint32_t WSEL_CH7 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH6 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH5 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH4 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH3 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH2 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH1 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH0 : 1;      /* Selects the threshold register that provides the values to b .. */
            } B;
        } CWSEL0;      /* Channel Watchdog Selection Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t WSEL_CH15 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH14 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH13 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH12 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH11 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH10 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH9 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH8 : 1;      /* Selects the threshold register that provides the values to b .. */
            } B;
        } CWSEL1;      /* Channel Watchdog Selection Register 1 */

        int8_t Reserved83[40];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t CWEN15 : 1;      /* Enables the watchdog feature for channel_15 */
                vuint32_t CWEN14 : 1;      /* Enables the watchdog feature for channel_14 */
                vuint32_t CWEN13 : 1;      /* Enables the watchdog feature for channel_13 */
                vuint32_t CWEN12 : 1;      /* Enables the watchdog feature for channel_12 */
                vuint32_t CWEN11 : 1;      /* Enables the watchdog feature for channel_11 */
                vuint32_t CWEN10 : 1;      /* Enables the watchdog feature for channel_10 */
                vuint32_t CWEN9 : 1;      /* Enables the watchdog feature for channel_9 */
                vuint32_t CWEN8 : 1;      /* Enables the watchdog feature for channel_8 */
                vuint32_t CWEN7 : 1;      /* Enables the watchdog feature for channel_7 */
                vuint32_t CWEN6 : 1;      /* Enables the watchdog feature for channel_6 */
                vuint32_t CWEN5 : 1;      /* Enables the watchdog feature for channel_5 */
                vuint32_t CWEN4 : 1;      /* Enables the watchdog feature for channel_4 */
                vuint32_t CWEN3 : 1;      /* Enables the watchdog feature for channel_3 */
                vuint32_t CWEN2 : 1;      /* Enables the watchdog feature for channel_2 */
                vuint32_t CWEN1 : 1;      /* Enables the watchdog feature for channel_1 */
                vuint32_t CWEN0 : 1;      /* Enables the watchdog feature for channel_0 */
            } B;
        } CWENR0;      /* Channel Watchdog Enable Register 0 */

        int8_t Reserved84[12];

        union {
            vuint32_t R;
            struct {
                vuint32_t AWOR_CH31 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH30 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH29 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH28 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH27 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH26 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH25 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH24 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH23 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH22 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH21 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH20 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH19 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH18 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH17 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH16 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH15 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH14 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH13 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH12 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH11 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH10 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH9 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH8 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH7 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH6 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH5 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH4 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH3 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH2 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH1 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH0 : 1;      /* Out of range indicator */
            } B;
        } AWORR0;      /* Analog Watchdog Out of Range Register 0 */

        int8_t Reserved85[76];

        union {
            vuint32_t R;
            struct {
                vuint32_t INPSAMP_C : 8;      /* Sampling phase duration for the test conversions related to  .. */
                vuint32_t INPSAMP_RC : 8;      /* Sampling phase duration for the test conversions related to  .. */
                vuint32_t INPSAMP_S : 8;      /* Sampling phase duration for the test conversions related to  .. */
                vuint32_t : 5;
                vuint32_t ST_INPCMP : 2;      /* Configuration bits for comparison phase duration for self te .. */
                vuint32_t ST_INPLATCH : 1;      /* Configuration bits for latching phase duration for self test .. */
            } B;
        } STCR1;      /* Self Test Configuration Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t MSKWDSERR : 1;      /* Interrupt enable (STSR1[WDSERR] status bit) */
                vuint32_t SERR : 1;      /* Error fault injection control. Setting this bit causes the S .. */
                vuint32_t MSKWDTERR : 1;      /* Interrupt enable (STSR1[WDTERR] status bit) */
                vuint32_t : 1;
                vuint32_t MSKST_EOC : 1;      /* Interrupt Enable bit for STSR2[ST_EOC] */
                vuint32_t : 4;
                vuint32_t MSKWDG_EOA_C : 1;      /* Interrupt enable (STSR1[WDG_EOA_C] status bit) */
                vuint32_t MSKWDG_EOA_RC : 1;      /* Interrupt enable (STSR1[WDG_EOA_RC] status bit) */
                vuint32_t MSKWDG_EOA_S : 1;      /* Interrupt enable (STSR1[WDG_EOA_S] status bit) */
                vuint32_t MSKERR_C : 1;      /* Interrupt enable (STSR1[ERR_C] status bit) */
                vuint32_t MSKERR_RC : 1;      /* Interrupt enable (STSR1[ERR_RC] status bit) */
                vuint32_t MSKERR_S2 : 1;      /* Interrupt enable (STSR1[ERR_S2] status bit) */
                vuint32_t MSKERR_S1 : 1;      /* Interrupt enable (STSR1[ERR_S1] status bit) */
                vuint32_t MSKERR_S0 : 1;      /* Interrupt enable (STSR1[ERR_S0] status bit) */
                vuint32_t : 3;
                vuint32_t EN : 1;      /* Self-test channel enable bit. It enables the TEST channel on .. */
                vuint32_t : 2;
                vuint32_t FMA_WDSERR : 1;      /* Fault mapping for the Watchdog Sequence error. */
                vuint32_t FMA_WDTERR : 1;      /* Fault mapping for the Watchdog Timer error. */
                vuint32_t FMA_C : 1;      /* Fault mapping for the algorithm C. */
                vuint32_t FMA_RC : 1;      /* Fault mapping for the algorithm RC. */
                vuint32_t FMA_S : 1;      /* Fault mapping for the algorithm S. */
            } B;
        } STCR2;      /* Self Test Configuration Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 22;
                vuint32_t ALG : 2;      /* Algorithm scheduling. This field has different functionality .. */
                vuint32_t : 3;
                vuint32_t MSTEP : 5;      /* For one-shot mode, defines the current step for algorithms S .. */
            } B;
        } STCR3;      /* Self Test Configuration Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 13;
                vuint32_t WDT : 3;      /* Watchdog timer value. This value is used to monitor that the .. */
                vuint32_t : 8;
                vuint32_t BR : 8;      /* Baud rate for the selected algorithm in scan mode (MCR[MODE] .. */
            } B;
        } STBRR;      /* Self Test Baud Rate Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t WDSERR : 1;      /* Watchdog sequence error of the ADC sub-system (check for alg .. */
                vuint32_t : 1;
                vuint32_t WDTERR : 1;      /* Watchdog timer error of the ADC sub-system (algorithm check  .. */
                vuint32_t OVERWR : 1;      /* Overwrite error. Used to notify when the STSR1[ERRn] bit is  .. */
                vuint32_t ST_EOC : 1;      /* Self Test EOC Bit. If IMR[MSKEOC] = 1, this bit is set along .. */
                vuint32_t : 4;
                vuint32_t WDG_EOA_C : 1;      /* This bit indicates that Algorithm C has been completed. This .. */
                vuint32_t WDG_EOA_RC : 1;      /* This bit indicates that Algorithm RC has been completed. Thi .. */
                vuint32_t WDG_EOA_S : 1;      /* This bit indicates that Algorithm S has been completed. This .. */
                vuint32_t ERR_C : 1;      /* Indicates an error on the self testing channel (algorithm C) .. */
                vuint32_t ERR_RC : 1;      /* Indicates an error on the self testing channel (algorithm RC .. */
                vuint32_t ERR_S2 : 1;      /* Indicates an error on the self testing channel (algorithm SU .. */
                vuint32_t ERR_S1 : 1;      /* Indicates an error on the self testing channel (algorithm SU .. */
                vuint32_t ERR_S0 : 1;      /* Indicates an error on the self testing channel (algorithm SU .. */
                vuint32_t : 1;
                vuint32_t STEP_C : 5;      /* Step of the algorithm C when an ERR_C has occurred. */
                vuint32_t STEP_RC : 5;      /* Step of the algorithm RC when an ERR_RC has occurred. */
            } B;
        } STSR1;      /* Self Test Status Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t OVFL : 1;      /* Overflow bit. This bit is set when the divisor is zero. If t .. */
                vuint32_t : 3;
                vuint32_t DATA1 : 12;      /* Test channel converted data when the ERR_S1 has occurred. al .. */
                vuint32_t : 4;
                vuint32_t DATA0 : 12;      /* Test channel converted data when the ERR_S1 has occurred. -  .. */
            } B;
        } STSR2;      /* Self Test Status Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t DATA1 : 12;      /* Test channel converted data when the ERR_S2 has occurred. -  .. */
                vuint32_t : 4;
                vuint32_t DATA0 : 12;      /* Test channel converted data when the ERR_S0 has occurred. -  .. */
            } B;
        } STSR3;      /* Self Test Status Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t DATA1 : 12;      /* Test channel converted data when the ERR_C has occurred. - a .. */
                vuint32_t : 4;
                vuint32_t DATA0 : 12;      /* Test channel converted data when the ERR_RC has occurred. -  .. */
            } B;
        } STSR4;      /* Self Test Status Register 4 */

        int8_t Reserved86[16];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Valid data. Used to notify when the data is valid (a new val .. */
                vuint32_t OVERWR : 1;      /* Overwrite data. Used to notify when a conversion data is ove .. */
                vuint32_t : 6;
                vuint32_t TCDATA : 12;      /* Test channel converted data */
            } B;
        } STDR1;      /* Self Test Data Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t FDATA : 12;      /* Fractional part of the ratio TEST(step1)/TEST (step0) = VDD/ .. */
                vuint32_t VALID : 1;      /* Valid data. Used to notify when the data is valid (a new val .. */
                vuint32_t OVERWR : 1;      /* Overwrite data. Used to notify when a conversion data is ove .. */
                vuint32_t : 6;
                vuint32_t IDATA : 12;      /* Integer part of the ratio TEST(step1)/TEST (step0) = VDD/VBG .. */
            } B;
        } STDR2;      /* Self Test Data Register 2 */

        int8_t Reserved87[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t AWDE : 1;      /* Analog watchdog enable */
                vuint32_t WDTE : 1;      /* Watchdog timer enable. The watchdog timer verifies: -Correct .. */
                vuint32_t : 2;
                vuint32_t THRH : 12;      /* High threshold value for channel n. If the analog watchdog i .. */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n. If the analog watchdog is .. */
            } B;
        } STAW0R;      /* Self Test Analog Watchdog Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t AWDE : 1;      /* Analog watchdog enable */
                vuint32_t : 3;
                vuint32_t THRH : 12;      /* High threshold value (integer part) for test channel for alg .. */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value (integer part) for test channel for algo .. */
            } B;
        } STAW1AR;      /* Self Test Analog Watchdog Register 1A */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value (fractional part) for test channel for  .. */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value (fractional part) for test channel for a .. */
            } B;
        } STAW1BR;      /* Self Test Analog Watchdog Register 1B */

        union {
            vuint32_t R;
            struct {
                vuint32_t AWDE : 1;      /* Analog watchdog enable */
                vuint32_t : 19;
                vuint32_t THRL : 12;      /* Low threshold value for channel n (unsigned coding). If the  .. */
            } B;
        } STAW2R;      /* Self Test Analog Watchdog Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t AWDE : 1;      /* Analog watchdog enable */
                vuint32_t WDTE : 1;      /* Watchdog timer enable. The watchdog timer verifies: -Correct .. */
                vuint32_t : 2;
                vuint32_t THRH : 12;      /* High threshold value for channel n. If the analog watchdog i .. */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n. If the analog watchdog is .. */
            } B;
        } STAW3R;      /* Self Test Analog Watchdog Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t AWDE : 1;      /* Analog watchdog enable */
                vuint32_t WDTE : 1;      /* Watchdog timer enable. The watchdog timer verifies: -Correct .. */
                vuint32_t : 2;
                vuint32_t THRH : 12;      /* High threshold value for channel n. If the analog watchdog i .. */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n. If the analog watchdog is .. */
            } B;
        } STAW4R;      /* Self Test Analog Watchdog Register 4 */
    };                                             /* End of ADC0_tag */ 
#define ADC0  (*(volatile struct ADC0_tag *)         0xFFE00000UL)

/*---------------------------------------------------------------------------*/
/* Analog to Digital Converter 1                                             */
/*---------------------------------------------------------------------------*/
    struct ADC1_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t OWREN : 1;      /* Overwrite enable */
                vuint32_t WLSIDE : 1;      /* Write left /right-aligned */
                vuint32_t MODE : 1;      /* One_Shot/Scan */
                vuint32_t EDGLEV : 1;      /* Edge or level selection for external start trigger. Edge (ED .. */
                vuint32_t TRGEN : 1;      /* External trigger enable. When set enables the external trigg .. */
                vuint32_t EDGE : 1;      /* Start trigger edge/level detection. If TRGEN is one and EDGL .. */
                vuint32_t XSTRTEN : 1;      /* External Start enable. If this bit is set, Start signal is a .. */
                vuint32_t NSTART : 1;      /* Start conversion. Setting this bit starts the chain or scan  .. */
                vuint32_t : 1;
                vuint32_t JTRGEN : 1;      /* Injection external trigger enable. Setting this bit will ena .. */
                vuint32_t JEDGE : 1;      /* Injection trigger edge selection. Edge selection for externa .. */
                vuint32_t JSTART : 1;      /* Injection start. Setting this bit will start the configured  .. */
                vuint32_t : 2;
                vuint32_t CTUEN : 1;      /* Cross Trigger Unit Enable */
                vuint32_t : 8;
                vuint32_t ADCLKSEL : 1;      /* Analog clock frequency selector. If this bit is set the AD_c .. */
                vuint32_t ABORTCHAIN : 1;      /* Abort Chain. If this bit is set the ongoing chain conversion .. */
                vuint32_t ABORT : 1;      /* Abort Conversion. If this bit is set the ongoing conversion  .. */
                vuint32_t ACKO : 1;      /* Auto-clock-off enable. If set enables the auto-clock-off fea .. */
                vuint32_t : 4;
                vuint32_t PWDN : 1;      /* Power-down enable. When this bit is set, the analog module i .. */
            } B;
        } MCR;      /* Main Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 7;
                vuint32_t NSTART : 1;      /* This status bit is used to signal that a Normal conversion i .. */
                vuint32_t JABORT : 1;      /* This status bit is used to signal that an Injected conversio .. */
                vuint32_t : 2;
                vuint32_t JSTART : 1;      /* This status bit is used to signal that an Injected conversio .. */
                vuint32_t : 3;
                vuint32_t CTUSTART : 1;      /* This status bit is used to signal that a CTU conversion is o .. */
                vuint32_t CHADDR : 7;      /* Channel under measure address. This status bit is used to si .. */
                vuint32_t : 3;
                vuint32_t ACKO : 1;      /* Auto-clock-off enable. This status bit is used to signal if  .. */
                vuint32_t : 2;
                vuint32_t ADCSTATUS : 3;      /* The value of this parameter depends on ADC status */
            } B;
        } MSR;      /* Main Status Register */

        int8_t Reserved88[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 27;
                vuint32_t EOCTU : 1;      /* End of CTU conversion. It is the interrupt of the digital en .. */
                vuint32_t JEOC : 1;      /* End of injected channel conversion. It is the interrupt of t .. */
                vuint32_t JECH : 1;      /* End of injected chain conversion. It is the interrupt of the .. */
                vuint32_t EOC : 1;      /* End of channel conversion. It is the interrupt of the digita .. */
                vuint32_t ECH : 1;      /* End of chain conversion. It is the interrupt of the digital  .. */
            } B;
        } ISR;      /* Interrupt Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t EOC_CH0 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH1 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH2 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH3 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH4 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH5 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH6 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH7 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH8 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH9 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH10 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH11 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH12 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH13 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH14 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH15 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH16 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH17 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH18 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH19 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH20 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH21 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH22 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH23 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH24 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH25 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH26 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH27 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH28 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH29 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH30 : 1;      /* This field indicates the end of conversion. */
                vuint32_t EOC_CH31 : 1;      /* This field indicates the end of conversion. */
            } B;
        } CEOCFR0;      /* Channel Pending Register 0 */

        int8_t Reserved89[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 27;
                vuint32_t MSKEOCTU : 1;      /* Mask bit for EOCTU. When set, the interrupt is enabled. */
                vuint32_t MSKJEOC : 1;      /* Mask bit for JEOC. When set, the interrupt is enabled. */
                vuint32_t MSKJECH : 1;      /* Mask bit for JECH. When set, the interrupt is enabled. */
                vuint32_t MSKEOC : 1;      /* Mask bit for EOC. When set, the interrupt is enabled. */
                vuint32_t MSKECH : 1;      /* Mask bit for ECH. When set, the interrupt is enabled. */
            } B;
        } IMR;      /* Interrupt Mask Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CIM_31 : 1;      /* This field enables the interrupt for channel_31. */
                vuint32_t CIM_30 : 1;      /* This field enables the interrupt for channel_30. */
                vuint32_t CIM_29 : 1;      /* This field enables the interrupt for channel_29. */
                vuint32_t CIM_28 : 1;      /* This field enables the interrupt for channel_28. */
                vuint32_t CIM_27 : 1;      /* This field enables the interrupt for channel_27. */
                vuint32_t CIM_26 : 1;      /* This field enables the interrupt for channel_26. */
                vuint32_t CIM_25 : 1;      /* This field enables the interrupt for channel_25. */
                vuint32_t CIM_24 : 1;      /* This field enables the interrupt for channel_24. */
                vuint32_t CIM_23 : 1;      /* This field enables the interrupt for channel_23. */
                vuint32_t CIM_22 : 1;      /* This field enables the interrupt for channel_22. */
                vuint32_t CIM_21 : 1;      /* This field enables the interrupt for channel_21. */
                vuint32_t CIM_20 : 1;      /* This field enables the interrupt for channel_20. */
                vuint32_t CIM_19 : 1;      /* This field enables the interrupt for channel_19. */
                vuint32_t CIM_18 : 1;      /* This field enables the interrupt for channel_18. */
                vuint32_t CIM_17 : 1;      /* This field enables the interrupt for channel_17. */
                vuint32_t CIM_16 : 1;      /* This field enables the interrupt for channel_16. */
                vuint32_t CIM_15 : 1;      /* This field enables the interrupt for channel_15. */
                vuint32_t CIM_14 : 1;      /* This field enables the interrupt for channel_14. */
                vuint32_t CIM_13 : 1;      /* This field enables the interrupt for channel_13. */
                vuint32_t CIM_12 : 1;      /* This field enables the interrupt for channel_12. */
                vuint32_t CIM_11 : 1;      /* This field enables the interrupt for channel_11. */
                vuint32_t CIM_10 : 1;      /* This field enables the interrupt for channel_10. */
                vuint32_t CIM_9 : 1;      /* This field enables the interrupt for channel_9. */
                vuint32_t CIM_8 : 1;      /* This field enables the interrupt for channel_8. */
                vuint32_t CIM_7 : 1;      /* This field enables the interrupt for channel_7. */
                vuint32_t CIM_6 : 1;      /* This field enables the interrupt for channel_6. */
                vuint32_t CIM_5 : 1;      /* This field enables the interrupt for channel_5. */
                vuint32_t CIM_4 : 1;      /* This field enables the interrupt for channel_4. */
                vuint32_t CIM_3 : 1;      /* This field enables the interrupt for channel_3. */
                vuint32_t CIM_2 : 1;      /* This field enables the interrupt for channel_2. */
                vuint32_t CIM_1 : 1;      /* This field enables the interrupt for channel_1. */
                vuint32_t CIM_0 : 1;      /* This field enables the interrupt for channel_0. */
            } B;
        } CIMR0;      /* Channel Interrupt Mask Register 0 */

        int8_t Reserved90[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t WDG15L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG15H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG14L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG14H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG13L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG13H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG12L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG12H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG11L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG11H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG10L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG10H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG9L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG9H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG8L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG8H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG7L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG7H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG6L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG6H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG5L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG5H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG4L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG4H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG3L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG3H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG2L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG2H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG1L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG1H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG0L : 1;      /* Reading this field indicates whether an interrupt has been g .. */
                vuint32_t WDG0H : 1;      /* Reading this field indicates whether an interrupt has been g .. */
            } B;
        } WTISR;      /* Watchdog Threshold Interrupt Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t MSKWDG15L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG15H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG14L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG14H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG13L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG13H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG12L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG12H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG11L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG11H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG10L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG10H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG9L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG9H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG8L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG8H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG7L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG7H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG6L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG6H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG5L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG5H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG4L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG4H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG3L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG3H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG2L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG2H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG1L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG1H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG0L : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
                vuint32_t MSKWDG0H : 1;      /* Mask bit for the interrupt generated due to the converted va .. */
            } B;
        } WTIMR;      /* Watchdog Threshold Interrupt Mask Register */

        int8_t Reserved91[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 30;
                vuint32_t DCLR : 1;      /* DMA clear sequence enable */
                vuint32_t DMAEN : 1;      /* DMA global enable */
            } B;
        } DMAE;      /* DMA Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t DMA31 : 1;      /* DMA enable */
                vuint32_t DMA30 : 1;      /* DMA enable */
                vuint32_t DMA29 : 1;      /* DMA enable */
                vuint32_t DMA28 : 1;      /* DMA enable */
                vuint32_t DMA27 : 1;      /* DMA enable */
                vuint32_t DMA26 : 1;      /* DMA enable */
                vuint32_t DMA25 : 1;      /* DMA enable */
                vuint32_t DMA24 : 1;      /* DMA enable */
                vuint32_t DMA23 : 1;      /* DMA enable */
                vuint32_t DMA22 : 1;      /* DMA enable */
                vuint32_t DMA21 : 1;      /* DMA enable */
                vuint32_t DMA20 : 1;      /* DMA enable */
                vuint32_t DMA19 : 1;      /* DMA enable */
                vuint32_t DMA18 : 1;      /* DMA enable */
                vuint32_t DMA17 : 1;      /* DMA enable */
                vuint32_t DMA16 : 1;      /* DMA enable */
                vuint32_t DMA15 : 1;      /* DMA enable */
                vuint32_t DMA14 : 1;      /* DMA enable */
                vuint32_t DMA13 : 1;      /* DMA enable */
                vuint32_t DMA12 : 1;      /* DMA enable */
                vuint32_t DMA11 : 1;      /* DMA enable */
                vuint32_t DMA10 : 1;      /* DMA enable */
                vuint32_t DMA9 : 1;      /* DMA enable */
                vuint32_t DMA8 : 1;      /* DMA enable */
                vuint32_t DMA7 : 1;      /* DMA enable */
                vuint32_t DMA6 : 1;      /* DMA enable */
                vuint32_t DMA5 : 1;      /* DMA enable */
                vuint32_t DMA4 : 1;      /* DMA enable */
                vuint32_t DMA3 : 1;      /* DMA enable */
                vuint32_t DMA2 : 1;      /* DMA enable */
                vuint32_t DMA1 : 1;      /* DMA enable */
                vuint32_t DMA0 : 1;      /* DMA enable */
            } B;
        } DMAR0;      /* DMA Channel Select Register 0 */

        int8_t Reserved92[24];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR0;      /* Threshold Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR1;      /* Threshold Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR2;      /* Threshold Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR3;      /* Threshold Register 3 */

        int8_t Reserved93[16];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t PREVAL0 : 2;      /* Internal voltage selection for presampling */
                vuint32_t PRECONV : 1;      /* Convert presampled value */
            } B;
        } PSCR;      /* Presampling Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRES31 : 1;      /* Presampling enable */
                vuint32_t PRES30 : 1;      /* Presampling enable */
                vuint32_t PRES29 : 1;      /* Presampling enable */
                vuint32_t PRES28 : 1;      /* Presampling enable */
                vuint32_t PRES27 : 1;      /* Presampling enable */
                vuint32_t PRES26 : 1;      /* Presampling enable */
                vuint32_t PRES25 : 1;      /* Presampling enable */
                vuint32_t PRES24 : 1;      /* Presampling enable */
                vuint32_t PRES23 : 1;      /* Presampling enable */
                vuint32_t PRES22 : 1;      /* Presampling enable */
                vuint32_t PRES21 : 1;      /* Presampling enable */
                vuint32_t PRES20 : 1;      /* Presampling enable */
                vuint32_t PRES19 : 1;      /* Presampling enable */
                vuint32_t PRES18 : 1;      /* Presampling enable */
                vuint32_t PRES17 : 1;      /* Presampling enable */
                vuint32_t PRES16 : 1;      /* Presampling enable */
                vuint32_t PRES15 : 1;      /* Presampling enable */
                vuint32_t PRES14 : 1;      /* Presampling enable */
                vuint32_t PRES13 : 1;      /* Presampling enable */
                vuint32_t PRES12 : 1;      /* Presampling enable */
                vuint32_t PRES11 : 1;      /* Presampling enable */
                vuint32_t PRES10 : 1;      /* Presampling enable */
                vuint32_t PRES9 : 1;      /* Presampling enable */
                vuint32_t PRES8 : 1;      /* Presampling enable */
                vuint32_t PRES7 : 1;      /* Presampling enable */
                vuint32_t PRES6 : 1;      /* Presampling enable */
                vuint32_t PRES5 : 1;      /* Presampling enable */
                vuint32_t PRES4 : 1;      /* Presampling enable */
                vuint32_t PRES3 : 1;      /* Presampling enable */
                vuint32_t PRES2 : 1;      /* Presampling enable */
                vuint32_t PRES1 : 1;      /* Presampling enable */
                vuint32_t PRES0 : 1;      /* Presampling enable */
            } B;
        } PSR0;      /* Presampling Register 0 */

        int8_t Reserved94[12];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t INPLATCH : 1;      /* Configuration bit for latching phase duration. */
                vuint32_t : 1;
                vuint32_t OFFSHIFT : 2;      /* Configuration for offset shift characteristic */
                vuint32_t : 1;
                vuint32_t INPCMP : 2;      /* Configuration bits for comparison +++phase duration */
                vuint32_t : 1;
                vuint32_t INPSAMP : 8;      /* Configuration +++bits for sampling phase duration */
            } B;
        } CTR0;      /* Conversion Timing Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t INPLATCH : 1;      /* Configuration bit for latching phase duration. */
                vuint32_t : 1;
                vuint32_t OFFSHIFT : 2;      /* Configuration for offset shift characteristic */
                vuint32_t : 1;
                vuint32_t INPCMP : 2;      /* Configuration bits for comparison phase duration */
                vuint32_t : 1;
                vuint32_t INPSAMP : 7;      /* Configuration bits for sampling phase duration */
                vuint32_t TSENSOR_SEL : 1;      /* Select the operating mode of the TSENS module */
            } B;
        } CTR1;      /* Conversion timing register 1 */

        int8_t Reserved95[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t CH31 : 1;      /* Sampling enable */
                vuint32_t CH30 : 1;      /* Sampling enable */
                vuint32_t CH29 : 1;      /* Sampling enable */
                vuint32_t CH28 : 1;      /* Sampling enable */
                vuint32_t CH27 : 1;      /* Sampling enable */
                vuint32_t CH26 : 1;      /* Sampling enable */
                vuint32_t CH25 : 1;      /* Sampling enable */
                vuint32_t CH24 : 1;      /* Sampling enable */
                vuint32_t CH23 : 1;      /* Sampling enable */
                vuint32_t CH22 : 1;      /* Sampling enable */
                vuint32_t CH21 : 1;      /* Sampling enable */
                vuint32_t CH20 : 1;      /* Sampling enable */
                vuint32_t CH19 : 1;      /* Sampling enable */
                vuint32_t CH18 : 1;      /* Sampling enable */
                vuint32_t CH17 : 1;      /* Sampling enable */
                vuint32_t CH16 : 1;      /* Sampling enable */
                vuint32_t CH15 : 1;      /* Sampling enable */
                vuint32_t CH14 : 1;      /* Sampling enable */
                vuint32_t CH13 : 1;      /* Sampling enable */
                vuint32_t CH12 : 1;      /* Sampling enable */
                vuint32_t CH11 : 1;      /* Sampling enable */
                vuint32_t CH10 : 1;      /* Sampling enable */
                vuint32_t CH9 : 1;      /* Sampling enable */
                vuint32_t CH8 : 1;      /* Sampling enable */
                vuint32_t CH7 : 1;      /* Sampling enable */
                vuint32_t CH6 : 1;      /* Sampling enable */
                vuint32_t CH5 : 1;      /* Sampling enable */
                vuint32_t CH4 : 1;      /* Sampling enable */
                vuint32_t CH3 : 1;      /* Sampling enable */
                vuint32_t CH2 : 1;      /* Sampling enable */
                vuint32_t CH1 : 1;      /* Sampling enable */
                vuint32_t CH0 : 1;      /* Sampling enable */
            } B;
        } NCMR0;      /* Normal Conversion Mask Register 0 */

        int8_t Reserved96[12];

        union {
            vuint32_t R;
            struct {
                vuint32_t CH31 : 1;      /* Sampling enable */
                vuint32_t CH30 : 1;      /* Sampling enable */
                vuint32_t CH29 : 1;      /* Sampling enable */
                vuint32_t CH28 : 1;      /* Sampling enable */
                vuint32_t CH27 : 1;      /* Sampling enable */
                vuint32_t CH26 : 1;      /* Sampling enable */
                vuint32_t CH25 : 1;      /* Sampling enable */
                vuint32_t CH24 : 1;      /* Sampling enable */
                vuint32_t CH23 : 1;      /* Sampling enable */
                vuint32_t CH22 : 1;      /* Sampling enable */
                vuint32_t CH21 : 1;      /* Sampling enable */
                vuint32_t CH20 : 1;      /* Sampling enable */
                vuint32_t CH19 : 1;      /* Sampling enable */
                vuint32_t CH18 : 1;      /* Sampling enable */
                vuint32_t CH17 : 1;      /* Sampling enable */
                vuint32_t CH16 : 1;      /* Sampling enable */
                vuint32_t CH15 : 1;      /* Sampling enable */
                vuint32_t CH14 : 1;      /* Sampling enable */
                vuint32_t CH13 : 1;      /* Sampling enable */
                vuint32_t CH12 : 1;      /* Sampling enable */
                vuint32_t CH11 : 1;      /* Sampling enable */
                vuint32_t CH10 : 1;      /* Sampling enable */
                vuint32_t CH9 : 1;      /* Sampling enable */
                vuint32_t CH8 : 1;      /* Sampling enable */
                vuint32_t CH7 : 1;      /* Sampling enable */
                vuint32_t CH6 : 1;      /* Sampling enable */
                vuint32_t CH5 : 1;      /* Sampling enable */
                vuint32_t CH4 : 1;      /* Sampling enable */
                vuint32_t CH3 : 1;      /* Sampling enable */
                vuint32_t CH2 : 1;      /* Sampling enable */
                vuint32_t CH1 : 1;      /* Sampling enable */
                vuint32_t CH0 : 1;      /* Sampling enable */
            } B;
        } JCMR0;      /* Injected Conversion Mask Register 0 */

        int8_t Reserved97[16];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t PDED : 8;      /* The delay between the power-down bit reset and the start of  .. */
            } B;
        } PDEDR;      /* Power Down Exit Delay Register */

        int8_t Reserved98[52];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR0;      /* Channel 0 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR1;      /* Channel 1 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR2;      /* Channel 2 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR3;      /* Channel 3 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR4;      /* Channel 4 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR5;      /* Channel 5 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR6;      /* Channel 6 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR7;      /* Channel 7 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR8;      /* Channel 8 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR9;      /* Channel 9 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR10;      /* Channel 10 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR11;      /* Channel 11 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR12;      /* Channel 12 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR13;      /* Channel 13 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR14;      /* Channel 14 Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Used to notify when the data is valid (a new value has been  .. */
                vuint32_t OVERW : 1;      /* Overwrite data This bit signals that the previous converted  .. */
                vuint32_t RESULT : 2;      /* This field reflects the mode of conversion for the correspon .. */
                vuint32_t : 6;
                vuint32_t CDATA : 10;      /* Channel 0 converted data */
            } B;
        } CDR15;      /* Channel 15 Data Register */

        int8_t Reserved99[320];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR4;      /* Threshold Register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR5;      /* Threshold Register 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR6;      /* Threshold Register 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR7;      /* Threshold Register 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR8;      /* Threshold Register 8 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR9;      /* Threshold Register 9 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR10;      /* Threshold Register 10 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR11;      /* Threshold Register 11 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR12;      /* Threshold Register 12 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR13;      /* Threshold Register 13 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR14;      /* Threshold Register 14 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value for channel n */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n */
            } B;
        } THRHLR15;      /* Threshold Register 15 */

        union {
            vuint32_t R;
            struct {
                vuint32_t WSEL_CH7 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH6 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH5 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH4 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH3 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH2 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH1 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH0 : 1;      /* Selects the threshold register that provides the values to b .. */
            } B;
        } CWSEL0;      /* Channel Watchdog Selection Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t WSEL_CH15 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH14 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH13 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH12 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH11 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH10 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH9 : 1;      /* Selects the threshold register that provides the values to b .. */
                vuint32_t WSEL_CH8 : 1;      /* Selects the threshold register that provides the values to b .. */
            } B;
        } CWSEL1;      /* Channel Watchdog Selection Register 1 */

        int8_t Reserved100[40];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t CWEN15 : 1;      /* Enables the watchdog feature for channel_15 */
                vuint32_t CWEN14 : 1;      /* Enables the watchdog feature for channel_14 */
                vuint32_t CWEN13 : 1;      /* Enables the watchdog feature for channel_13 */
                vuint32_t CWEN12 : 1;      /* Enables the watchdog feature for channel_12 */
                vuint32_t CWEN11 : 1;      /* Enables the watchdog feature for channel_11 */
                vuint32_t CWEN10 : 1;      /* Enables the watchdog feature for channel_10 */
                vuint32_t CWEN9 : 1;      /* Enables the watchdog feature for channel_9 */
                vuint32_t CWEN8 : 1;      /* Enables the watchdog feature for channel_8 */
                vuint32_t CWEN7 : 1;      /* Enables the watchdog feature for channel_7 */
                vuint32_t CWEN6 : 1;      /* Enables the watchdog feature for channel_6 */
                vuint32_t CWEN5 : 1;      /* Enables the watchdog feature for channel_5 */
                vuint32_t CWEN4 : 1;      /* Enables the watchdog feature for channel_4 */
                vuint32_t CWEN3 : 1;      /* Enables the watchdog feature for channel_3 */
                vuint32_t CWEN2 : 1;      /* Enables the watchdog feature for channel_2 */
                vuint32_t CWEN1 : 1;      /* Enables the watchdog feature for channel_1 */
                vuint32_t CWEN0 : 1;      /* Enables the watchdog feature for channel_0 */
            } B;
        } CWENR0;      /* Channel Watchdog Enable Register 0 */

        int8_t Reserved101[12];

        union {
            vuint32_t R;
            struct {
                vuint32_t AWOR_CH31 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH30 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH29 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH28 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH27 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH26 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH25 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH24 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH23 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH22 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH21 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH20 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH19 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH18 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH17 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH16 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH15 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH14 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH13 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH12 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH11 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH10 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH9 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH8 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH7 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH6 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH5 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH4 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH3 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH2 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH1 : 1;      /* Out of range indicator */
                vuint32_t AWOR_CH0 : 1;      /* Out of range indicator */
            } B;
        } AWORR0;      /* Analog Watchdog Out of Range Register 0 */

        int8_t Reserved102[76];

        union {
            vuint32_t R;
            struct {
                vuint32_t INPSAMP_C : 8;      /* Sampling phase duration for the test conversions related to  .. */
                vuint32_t INPSAMP_RC : 8;      /* Sampling phase duration for the test conversions related to  .. */
                vuint32_t INPSAMP_S : 8;      /* Sampling phase duration for the test conversions related to  .. */
                vuint32_t : 5;
                vuint32_t ST_INPCMP : 2;      /* Configuration bits for comparison phase duration for self te .. */
                vuint32_t ST_INPLATCH : 1;      /* Configuration bits for latching phase duration for self test .. */
            } B;
        } STCR1;      /* Self Test Configuration Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t MSKWDSERR : 1;      /* Interrupt enable (STSR1[WDSERR] status bit) */
                vuint32_t SERR : 1;      /* Error fault injection control. Setting this bit causes the S .. */
                vuint32_t MSKWDTERR : 1;      /* Interrupt enable (STSR1[WDTERR] status bit) */
                vuint32_t : 1;
                vuint32_t MSKST_EOC : 1;      /* Interrupt Enable bit for STSR2[ST_EOC] */
                vuint32_t : 4;
                vuint32_t MSKWDG_EOA_C : 1;      /* Interrupt enable (STSR1[WDG_EOA_C] status bit) */
                vuint32_t MSKWDG_EOA_RC : 1;      /* Interrupt enable (STSR1[WDG_EOA_RC] status bit) */
                vuint32_t MSKWDG_EOA_S : 1;      /* Interrupt enable (STSR1[WDG_EOA_S] status bit) */
                vuint32_t MSKERR_C : 1;      /* Interrupt enable (STSR1[ERR_C] status bit) */
                vuint32_t MSKERR_RC : 1;      /* Interrupt enable (STSR1[ERR_RC] status bit) */
                vuint32_t MSKERR_S2 : 1;      /* Interrupt enable (STSR1[ERR_S2] status bit) */
                vuint32_t MSKERR_S1 : 1;      /* Interrupt enable (STSR1[ERR_S1] status bit) */
                vuint32_t MSKERR_S0 : 1;      /* Interrupt enable (STSR1[ERR_S0] status bit) */
                vuint32_t : 3;
                vuint32_t EN : 1;      /* Self-test channel enable bit. It enables the TEST channel on .. */
                vuint32_t : 2;
                vuint32_t FMA_WDSERR : 1;      /* Fault mapping for the Watchdog Sequence error. */
                vuint32_t FMA_WDTERR : 1;      /* Fault mapping for the Watchdog Timer error. */
                vuint32_t FMA_C : 1;      /* Fault mapping for the algorithm C. */
                vuint32_t FMA_RC : 1;      /* Fault mapping for the algorithm RC. */
                vuint32_t FMA_S : 1;      /* Fault mapping for the algorithm S. */
            } B;
        } STCR2;      /* Self Test Configuration Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 22;
                vuint32_t ALG : 2;      /* Algorithm scheduling. This field has different functionality .. */
                vuint32_t : 3;
                vuint32_t MSTEP : 5;      /* For one-shot mode, defines the current step for algorithms S .. */
            } B;
        } STCR3;      /* Self Test Configuration Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 13;
                vuint32_t WDT : 3;      /* Watchdog timer value. This value is used to monitor that the .. */
                vuint32_t : 8;
                vuint32_t BR : 8;      /* Baud rate for the selected algorithm in scan mode (MCR[MODE] .. */
            } B;
        } STBRR;      /* Self Test Baud Rate Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t WDSERR : 1;      /* Watchdog sequence error of the ADC sub-system (check for alg .. */
                vuint32_t : 1;
                vuint32_t WDTERR : 1;      /* Watchdog timer error of the ADC sub-system (algorithm check  .. */
                vuint32_t OVERWR : 1;      /* Overwrite error. Used to notify when the STSR1[ERRn] bit is  .. */
                vuint32_t ST_EOC : 1;      /* Self Test EOC Bit. If IMR[MSKEOC] = 1, this bit is set along .. */
                vuint32_t : 4;
                vuint32_t WDG_EOA_C : 1;      /* This bit indicates that Algorithm C has been completed. This .. */
                vuint32_t WDG_EOA_RC : 1;      /* This bit indicates that Algorithm RC has been completed. Thi .. */
                vuint32_t WDG_EOA_S : 1;      /* This bit indicates that Algorithm S has been completed. This .. */
                vuint32_t ERR_C : 1;      /* Indicates an error on the self testing channel (algorithm C) .. */
                vuint32_t ERR_RC : 1;      /* Indicates an error on the self testing channel (algorithm RC .. */
                vuint32_t ERR_S2 : 1;      /* Indicates an error on the self testing channel (algorithm SU .. */
                vuint32_t ERR_S1 : 1;      /* Indicates an error on the self testing channel (algorithm SU .. */
                vuint32_t ERR_S0 : 1;      /* Indicates an error on the self testing channel (algorithm SU .. */
                vuint32_t : 1;
                vuint32_t STEP_C : 5;      /* Step of the algorithm C when an ERR_C has occurred. */
                vuint32_t STEP_RC : 5;      /* Step of the algorithm RC when an ERR_RC has occurred. */
            } B;
        } STSR1;      /* Self Test Status Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t OVFL : 1;      /* Overflow bit. This bit is set when the divisor is zero. If t .. */
                vuint32_t : 3;
                vuint32_t DATA1 : 12;      /* Test channel converted data when the ERR_S1 has occurred. al .. */
                vuint32_t : 4;
                vuint32_t DATA0 : 12;      /* Test channel converted data when the ERR_S1 has occurred. -  .. */
            } B;
        } STSR2;      /* Self Test Status Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t DATA1 : 12;      /* Test channel converted data when the ERR_S2 has occurred. -  .. */
                vuint32_t : 4;
                vuint32_t DATA0 : 12;      /* Test channel converted data when the ERR_S0 has occurred. -  .. */
            } B;
        } STSR3;      /* Self Test Status Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t DATA1 : 12;      /* Test channel converted data when the ERR_C has occurred. - a .. */
                vuint32_t : 4;
                vuint32_t DATA0 : 12;      /* Test channel converted data when the ERR_RC has occurred. -  .. */
            } B;
        } STSR4;      /* Self Test Status Register 4 */

        int8_t Reserved103[16];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t VALID : 1;      /* Valid data. Used to notify when the data is valid (a new val .. */
                vuint32_t OVERWR : 1;      /* Overwrite data. Used to notify when a conversion data is ove .. */
                vuint32_t : 6;
                vuint32_t TCDATA : 12;      /* Test channel converted data */
            } B;
        } STDR1;      /* Self Test Data Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t FDATA : 12;      /* Fractional part of the ratio TEST(step1)/TEST (step0) = VDD/ .. */
                vuint32_t VALID : 1;      /* Valid data. Used to notify when the data is valid (a new val .. */
                vuint32_t OVERWR : 1;      /* Overwrite data. Used to notify when a conversion data is ove .. */
                vuint32_t : 6;
                vuint32_t IDATA : 12;      /* Integer part of the ratio TEST(step1)/TEST (step0) = VDD/VBG .. */
            } B;
        } STDR2;      /* Self Test Data Register 2 */

        int8_t Reserved104[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t AWDE : 1;      /* Analog watchdog enable */
                vuint32_t WDTE : 1;      /* Watchdog timer enable. The watchdog timer verifies: -Correct .. */
                vuint32_t : 2;
                vuint32_t THRH : 12;      /* High threshold value for channel n. If the analog watchdog i .. */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n. If the analog watchdog is .. */
            } B;
        } STAW0R;      /* Self Test Analog Watchdog Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t AWDE : 1;      /* Analog watchdog enable */
                vuint32_t : 3;
                vuint32_t THRH : 12;      /* High threshold value (integer part) for test channel for alg .. */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value (integer part) for test channel for algo .. */
            } B;
        } STAW1AR;      /* Self Test Analog Watchdog Register 1A */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t THRH : 12;      /* High threshold value (fractional part) for test channel for  .. */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value (fractional part) for test channel for a .. */
            } B;
        } STAW1BR;      /* Self Test Analog Watchdog Register 1B */

        union {
            vuint32_t R;
            struct {
                vuint32_t AWDE : 1;      /* Analog watchdog enable */
                vuint32_t : 19;
                vuint32_t THRL : 12;      /* Low threshold value for channel n (unsigned coding). If the  .. */
            } B;
        } STAW2R;      /* Self Test Analog Watchdog Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t AWDE : 1;      /* Analog watchdog enable */
                vuint32_t WDTE : 1;      /* Watchdog timer enable. The watchdog timer verifies: -Correct .. */
                vuint32_t : 2;
                vuint32_t THRH : 12;      /* High threshold value for channel n. If the analog watchdog i .. */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n. If the analog watchdog is .. */
            } B;
        } STAW3R;      /* Self Test Analog Watchdog Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t AWDE : 1;      /* Analog watchdog enable */
                vuint32_t WDTE : 1;      /* Watchdog timer enable. The watchdog timer verifies: -Correct .. */
                vuint32_t : 2;
                vuint32_t THRH : 12;      /* High threshold value for channel n. If the analog watchdog i .. */
                vuint32_t : 4;
                vuint32_t THRL : 12;      /* Low threshold value for channel n. If the analog watchdog is .. */
            } B;
        } STAW4R;      /* Self Test Analog Watchdog Register 4 */
    };                                             /* End of ADC1_tag */ 
#define ADC1  (*(volatile struct ADC1_tag *)         0xFFE04000UL)

/*---------------------------------------------------------------------------*/
/* Cross Triggering Unit                                                     */
/*---------------------------------------------------------------------------*/
    struct CTU_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t I15_FE : 1;      /* Input 15 Falling edge Enable */
                vuint32_t I15_RE : 1;      /* Input 15 Rising edge Enable */
                vuint32_t I14_FE : 1;      /* Input 14 Falling edge Enable */
                vuint32_t I14_RE : 1;      /* Input 14 Rising edge Enable */
                vuint32_t I13_FE : 1;      /* Input 13 Falling edge Enable */
                vuint32_t I13_RE : 1;      /* Input 13 Rising edge Enable */
                vuint32_t I12_FE : 1;      /* Input 12 Falling edge Enable */
                vuint32_t I12_RE : 1;      /* Input 12 Rising edge Enable */
                vuint32_t I11_FE : 1;      /* Input 11 Falling edge Enable */
                vuint32_t I11_RE : 1;      /* Input 11 Rising edge Enable */
                vuint32_t I10_FE : 1;      /* Input 10 Falling edge Enable */
                vuint32_t I10_RE : 1;      /* Input 10 Rising edge Enable */
                vuint32_t I9_FE : 1;      /* Input 9 Falling edge Enable */
                vuint32_t I9_RE : 1;      /* Input 9 Rising edge Enable */
                vuint32_t I8_FE : 1;      /* Input 8 Falling edge Enable */
                vuint32_t I8_RE : 1;      /* Input 8 Rising edge Enable */
                vuint32_t I7_FE : 1;      /* Input 7 Falling edge Enable */
                vuint32_t I7_RE : 1;      /* Input 7 Rising edge Enable */
                vuint32_t I6_FE : 1;      /* Input 6 Falling edge Enable */
                vuint32_t I6_RE : 1;      /* Input 6 Rising edge Enable */
                vuint32_t I5_FE : 1;      /* Input 5 Falling edge Enable */
                vuint32_t I5_RE : 1;      /* Input 5 Rising edge Enable */
                vuint32_t I4_FE : 1;      /* Input 4 Falling edge Enable */
                vuint32_t I4_RE : 1;      /* Input 4 Rising edge Enable */
                vuint32_t I3_FE : 1;      /* Input 3 Falling edge Enable */
                vuint32_t I3_RE : 1;      /* Input 3 Rising edge Enable */
                vuint32_t I2_FE : 1;      /* Input 2 Falling edge Enable */
                vuint32_t I2_RE : 1;      /* Input 2 Rising edge Enable */
                vuint32_t I1_FE : 1;      /* Input 1 Falling edge Enable */
                vuint32_t I1_RE : 1;      /* Input 1 Rising edge Enable */
                vuint32_t I0_FE : 1;      /* Input 0 Falling edge Enable */
                vuint32_t I0_RE : 1;      /* Input 0 Rising edge Enable */
            } B;
        } TGSISR;      /* Trigger Generator sub unit Input Selection Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 7;
                vuint16_t ET_TM : 1;      /* This bit is used for enable toggle mode for external trigger */
                vuint16_t PRES : 2;      /* TGS and SU prescaler selection bits */
                vuint16_t MRS_SM : 5;      /* MRS Selection in Sequential Mode (5 bits to select one of 32 .. */
                vuint16_t TGS_M : 1;      /* Trigger Generator sub unit Mode */
            } B;
        } TGSCR;      /* Trigger Generator sub unit Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t TXCRV : 16;      /* Trigger x Compare Register Value */
            } B;
        } T0CR;      /* Trigger 0 Compare Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t TXCRV : 16;      /* Trigger x Compare Register Value */
            } B;
        } T1CR;      /* Trigger 1 Compare Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t TXCRV : 16;      /* Trigger x Compare Register Value */
            } B;
        } T2CR;      /* Trigger 2 Compare Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t TXCRV : 16;      /* Trigger x Compare Register Value */
            } B;
        } T3CR;      /* Trigger 3 Compare Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t TXCRV : 16;      /* Trigger x Compare Register Value */
            } B;
        } T4CR;      /* Trigger 4 Compare Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t TXCRV : 16;      /* Trigger x Compare Register Value */
            } B;
        } T5CR;      /* Trigger 5 Compare Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t TXCRV : 16;      /* Trigger x Compare Register Value */
            } B;
        } T6CR;      /* Trigger 6 Compare Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t TXCRV : 16;      /* Trigger x Compare Register Value */
            } B;
        } T7CR;      /* Trigger 7 Compare Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t TGSCCV : 16;      /* TGS Counter Compare Value */
            } B;
        } TGSCCR;      /* TGS Counter Compare Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t TGSCRV : 16;      /* TGS Counter Reload Value */
            } B;
        } TGSCRR;      /* TGS Counter Reload Register */

        int8_t Reserved105[2];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 3;
                vuint32_t T3_INDEX : 5;      /* Trigger 3 Commands List 1st command address  */
                vuint32_t : 3;
                vuint32_t T2_INDEX : 5;      /* Trigger 2 Commands List 1st command address  */
                vuint32_t : 3;
                vuint32_t T1_INDEX : 5;      /* Trigger 1 Commands List 1st command address  */
                vuint32_t : 3;
                vuint32_t T0_INDEX : 5;      /* Trigger 0 Commands List 1st command address  */
            } B;
        } CLCR1;      /* Commands List Control Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 3;
                vuint32_t T7_INDEX : 5;      /* Trigger 7 Commands List 1st command address */
                vuint32_t : 3;
                vuint32_t T6_INDEX : 5;      /* Trigger 6 Commands List 1st command address  */
                vuint32_t : 3;
                vuint32_t T5_INDEX : 5;      /* Trigger 5 Commands List 1st command address  */
                vuint32_t : 3;
                vuint32_t T4_INDEX : 5;      /* Trigger 4 Commands List 1st command address  */
            } B;
        } CLCR2;      /* Commands List Control Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t T3_E : 1;      /* Trigger_3 enable */
                vuint32_t T3_ETE : 1;      /* Trigger_3 External Trigger_output enable */
                vuint32_t T3_T4E : 1;      /* Trigger_3 Timer_4 output enable */
                vuint32_t T3_T3E : 1;      /* Trigger_3 Timer_3 output enable */
                vuint32_t T3_T2E : 1;      /* Trigger_3 Timer_2 output enable */
                vuint32_t T3_T1E : 1;      /* Trigger_3 Timer_1 output enable */
                vuint32_t T3_ADCE : 1;      /* Trigger_3 ADC command output enable */
                vuint32_t : 1;
                vuint32_t T2_E : 1;      /* Trigger_2 enable */
                vuint32_t T2_ETE : 1;      /* Trigger_2 External Trigger_output enable */
                vuint32_t T2_T4E : 1;      /* Trigger_2 Timer_4 output enable */
                vuint32_t T2_T3E : 1;      /* Trigger_2 Timer_3 output enable */
                vuint32_t T2_T2E : 1;      /* Trigger_2 Timer_2 output enable */
                vuint32_t T2_T1E : 1;      /* Trigger_2 Timer_1 output enable */
                vuint32_t T2_ADCE : 1;      /* Trigger_2 ADC command output enable */
                vuint32_t : 1;
                vuint32_t T1_E : 1;      /* Trigger_1 enable */
                vuint32_t T1_ETE : 1;      /* Trigger_1 External Trigger_output enable */
                vuint32_t T1_T4E : 1;      /* Trigger_1 Timer_4 output enable */
                vuint32_t T1_T3E : 1;      /* Trigger_1 Timer_3 output enable */
                vuint32_t T1_T2E : 1;      /* Trigger_1 Timer_2 output enable */
                vuint32_t T1_T1E : 1;      /* Trigger_1 Timer_1 output enable */
                vuint32_t T1_ADCE : 1;      /* Trigger_1 ADC command output enable */
                vuint32_t : 1;
                vuint32_t T0_E : 1;      /* Trigger_0 enable */
                vuint32_t T0_ETE : 1;      /* Trigger_0 External Trigger_output enable */
                vuint32_t T0_T4E : 1;      /* Trigger_0 Timer_4 output enable */
                vuint32_t T0_T3E : 1;      /* Trigger_0 Timer_3 output enable */
                vuint32_t T0_T2E : 1;      /* Trigger_0 Timer_2 output enable */
                vuint32_t T0_T1E : 1;      /* Trigger_0 Timer_1 output enable */
                vuint32_t T0_ADCE : 1;      /* Trigger_0 ADC command output enable */
            } B;
        } THCR1;      /* Trigger Handler Control Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t T7_E : 1;      /* Trigger_7 enable */
                vuint32_t T7_ETE : 1;      /* Trigger_7 External Trigger_output enable */
                vuint32_t T7_T4E : 1;      /* Trigger_7 Timer_4 output enable */
                vuint32_t T7_T3E : 1;      /* Trigger_7 Timer_3 output enable */
                vuint32_t T7_T2E : 1;      /* Trigger_7 Timer_2 output enable */
                vuint32_t T7_T1E : 1;      /* Trigger_7 Timer_1 output enable */
                vuint32_t T7_ADCE : 1;      /* Trigger_7 ADC command output enable */
                vuint32_t : 1;
                vuint32_t T6_E : 1;      /* Trigger_6 enable */
                vuint32_t T6_ETE : 1;      /* Trigger_6 External Trigger_output enable */
                vuint32_t T6_T4E : 1;      /* Trigger_6 Timer_4 output enable */
                vuint32_t T6_T3E : 1;      /* Trigger_6 Timer_3 output enable */
                vuint32_t T6_T2E : 1;      /* Trigger_6 Timer_2 output enable */
                vuint32_t T6_T1E : 1;      /* Trigger_6 Timer_1 output enable */
                vuint32_t T6_ADCE : 1;      /* Trigger_6 ADC command output enable */
                vuint32_t : 1;
                vuint32_t T5_E : 1;      /* Trigger_5 enable */
                vuint32_t T5_ETE : 1;      /* Trigger_5 External Trigger_output enable */
                vuint32_t T5_T4E : 1;      /* Trigger_5 Timer_4 output enable */
                vuint32_t T5_T3E : 1;      /* Trigger_5 Timer_3 output enable */
                vuint32_t T5_T2E : 1;      /* Trigger_5 Timer_2 output enable */
                vuint32_t T5_T1E : 1;      /* Trigger_5 Timer_1 output enable */
                vuint32_t T5_ADCE : 1;      /* Trigger_5 ADC command output enable */
                vuint32_t : 1;
                vuint32_t T4_E : 1;      /* Trigger_4 enable */
                vuint32_t T4_ETE : 1;      /* Trigger_4 External Trigger_output enable */
                vuint32_t T4_T4E : 1;      /* Trigger_4 Timer_4 output enable */
                vuint32_t T4_T3E : 1;      /* Trigger_4 Timer_3 output enable */
                vuint32_t T4_T2E : 1;      /* Trigger_4 Timer_2 output enable */
                vuint32_t T4_T1E : 1;      /* Trigger_4 Timer_1 output enable */
                vuint32_t T4_ADCE : 1;      /* Trigger_4 ADC command output enable */
            } B;
        } THCR2;      /* Trigger Handler Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR1;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR2;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR3;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR4;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR5;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR6;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR7;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR8;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR9;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR10;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR11;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR12;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR13;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR14;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR15;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR16;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR17;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR18;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR19;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR20;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR21;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR22;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR23;      /* Commands List Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CIR : 1;      /* Command Interrupt Request bit  */
                vuint16_t LC : 1;      /* Last command bit  */
                vuint16_t CMS : 1;      /* Conversion mode selection  */
                vuint16_t FIFO : 3;      /* FIFO for ADC unit A/B  */
                vuint16_t : 4;
                vuint16_t SU : 1;      /* Selection Unit bit  */
                vuint16_t : 1;
                vuint16_t CH : 4;      /* ADC unit channel number  */
            } B;
        } CLR24;      /* Commands List Register */

        int8_t Reserved106[16];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t DE3 : 1;      /* This bit enables DMA for the FIFO3 */
                vuint32_t DE2 : 1;      /* This bit enables DMA for the FIFO2 */
                vuint32_t DE1 : 1;      /* This bit enables DMA for the FIFO1 */
                vuint32_t DE0 : 1;      /* This bit enables DMA for the FIFO0 */
            } B;
        } FDCR;      /* FIFO DMA Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t OR_EN3 : 1;      /* FIFO 3 Overrun interrupt enable */
                vuint32_t OF_EN3 : 1;      /* FIFO 3 threshold Overflow interrupt enable  */
                vuint32_t EMPTY_EN3 : 1;      /* FIFO 3 Empty interrupt enable  */
                vuint32_t FULL_EN3 : 1;      /* FIFO 3 Full interrupt enable  */
                vuint32_t OR_EN2 : 1;      /* FIFO 2 Overrun interrupt enable  */
                vuint32_t OF_EN2 : 1;      /* FIFO 2 threshold Overflow interrupt enable  */
                vuint32_t EMPTY_EN2 : 1;      /* FIFO 2 Empty interrupt enable  */
                vuint32_t FULL_EN2 : 1;      /* FIFO 2 Full interrupt enable  */
                vuint32_t OR_EN1 : 1;      /* FIFO 1 Overrun interrupt enable  */
                vuint32_t OF_EN1 : 1;      /* FIFO 1 threshold Overflow interrupt enable  */
                vuint32_t EMPTY_EN1 : 1;      /* FIFO 1 Empty interrupt enable  */
                vuint32_t FULL_EN1 : 1;      /* FIFO 1 Full interrupt enable  */
                vuint32_t OR_EN0 : 1;      /* FIFO 0 Overrun interrupt enable  */
                vuint32_t OF_EN0 : 1;      /* FIFO 0 threshold Overflow interrupt enable  */
                vuint32_t EMPTY_EN0 : 1;      /* FIFO 0 Empty interrupt enable  */
                vuint32_t FULL_EN0 : 1;      /* FIFO 0 Full interrupt enable  */
            } B;
        } FCR;      /* FIFO Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TH3 : 8;      /* FIFO 3 Threshold */
                vuint32_t TH2 : 8;      /* FIFO 2 Threshold  */
                vuint32_t TH1 : 8;      /* FIFO 1 Threshold  */
                vuint32_t TH0 : 8;      /* FIFO 0 Threshold  */
            } B;
        } FTH;      /* FIFO Threshold */

        int8_t Reserved107[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t OR3 : 1;      /* FIFO 3 Overrun interrupt flag */
                vuint32_t OF3 : 1;      /* FIFO 3 threshold Overflow interrupt flag  */
                vuint32_t EMP3 : 1;      /* FIFO 3 Empty interrupt flag  */
                vuint32_t FULL3 : 1;      /* FIFO 3 Full interrupt flag  */
                vuint32_t OR2 : 1;      /* FIFO 2 Overrun interrupt flag  */
                vuint32_t OF2 : 1;      /* FIFO 2 threshold Overflow interrupt flag  */
                vuint32_t EMP2 : 1;      /* FIFO 2 Empty interrupt flag  */
                vuint32_t FULL2 : 1;      /* FIFO 2 Full interrupt flag  */
                vuint32_t OR1 : 1;      /* FIFO 1 Overrun interrupt flag  */
                vuint32_t OF1 : 1;      /* FIFO 1 threshold Overflow interrupt flag  */
                vuint32_t EMP1 : 1;      /* FIFO 1 Empty interrupt flag  */
                vuint32_t FULL1 : 1;      /* FIFO 1 Full interrupt flag  */
                vuint32_t OR0 : 1;      /* FIFO 0 Overrun interrupt flag  */
                vuint32_t OF0 : 1;      /* FIFO 0 threshold Overflow interrupt flag  */
                vuint32_t EMP0 : 1;      /* FIFO 0 Empty interrupt flag  */
                vuint32_t FULL0 : 1;      /* FIFO 0 Full interrupt flag  */
            } B;
        } FST;      /* FIFO Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 11;
                vuint32_t N_CH : 5;      /* Number of stored channel */
                vuint32_t : 6;
                vuint32_t DATA : 10;      /* Data of stored channel  */
            } B;
        } FR0;      /* FIFO Right aligned data 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 11;
                vuint32_t N_CH : 5;      /* Number of stored channel */
                vuint32_t : 6;
                vuint32_t DATA : 10;      /* Data of stored channel  */
            } B;
        } FR1;      /* FIFO Right aligned data 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 11;
                vuint32_t N_CH : 5;      /* Number of stored channel */
                vuint32_t : 6;
                vuint32_t DATA : 10;      /* Data of stored channel  */
            } B;
        } FR2;      /* FIFO Right aligned data 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 11;
                vuint32_t N_CH : 5;      /* Number of stored channel */
                vuint32_t : 6;
                vuint32_t DATA : 10;      /* Data of stored channel  */
            } B;
        } FR3;      /* FIFO Right aligned data 3 */

        int8_t Reserved108[16];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 11;
                vuint32_t N_CH : 5;      /* Number of stored channel */
                vuint32_t : 1;
                vuint32_t DATA : 10;      /* Data of stored channel  */
            } B;
        } FL0;      /* FIFO Left aligned data 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 11;
                vuint32_t N_CH : 5;      /* Number of stored channel */
                vuint32_t : 1;
                vuint32_t DATA : 10;      /* Data of stored channel  */
            } B;
        } FL1;      /* FIFO Left aligned data 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 11;
                vuint32_t N_CH : 5;      /* Number of stored channel */
                vuint32_t : 1;
                vuint32_t DATA : 10;      /* Data of stored channel  */
            } B;
        } FL2;      /* FIFO Left aligned data 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 11;
                vuint32_t N_CH : 5;      /* Number of stored channel */
                vuint32_t : 1;
                vuint32_t DATA : 10;      /* Data of stored channel  */
            } B;
        } FL3;      /* FIFO Left aligned data 3 */

        int8_t Reserved109[16];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t ET_OE : 1;      /* External Trigger generation Overrun Error */
                vuint16_t : 1;
                vuint16_t T4_OE : 1;      /* Timer_4 trigger generation Overrun Error */
                vuint16_t T3_OE : 1;      /* Timer_3 trigger generation Overrun Error */
                vuint16_t T2_OE : 1;      /* Timer_2 trigger generation Overrun Error */
                vuint16_t T1_OE : 1;      /* Timer_1 trigger generation Overrun Error */
                vuint16_t ADC_OE : 1;      /* ADC command generation Overrun Error  */
                vuint16_t TGS_OSM : 1;      /* TGS Overrun in Sequential Mode  */
                vuint16_t MRS_O : 1;      /* Master Reload Signal Overrun  */
                vuint16_t ICE : 1;      /* Invalid Command Error  */
                vuint16_t SM_TO : 1;      /* Trigger Overrun (more than 8 EV) in TGS Sequential Mode  */
            } B;
        } CTUEFR;      /* Cross Triggering Unit Error Flag Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t SERR_B : 1;      /* If this bit is set means that the slice time between the sta .. */
                vuint16_t SERR_A : 1;      /* If this bit is set means that the slice time between the sta .. */
                vuint16_t ADC_I : 1;      /* ADC command interrupt flag */
                vuint16_t T7_I : 1;      /* Trigger_7 interrupt flag */
                vuint16_t T6_I : 1;      /* Trigger_6 interrupt flag */
                vuint16_t T5_I : 1;      /* Trigger_5 interrupt flag */
                vuint16_t T4_I : 1;      /* Trigger_4 interrupt flag */
                vuint16_t T3_I : 1;      /* Trigger_3 interrupt flag */
                vuint16_t T2_I : 1;      /* Trigger_2 interrupt flag */
                vuint16_t T1_I : 1;      /* Trigger_1 interrupt flag */
                vuint16_t T0_I : 1;      /* Trigger_0 interrupt flag */
            } B;
        } CTUIFR;      /* Cross Triggering Unit Interrupt Flag Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t T7_IE : 1;      /* Trigger 7 Interrupt Enable */
                vuint16_t T6_IE : 1;      /* Trigger 6 Interrupt Enable  */
                vuint16_t T5_IE : 1;      /* Trigger 5 Interrupt Enable  */
                vuint16_t T4_IE : 1;      /* Trigger 4 Interrupt Enable  */
                vuint16_t T3_IE : 1;      /* Trigger 3 Interrupt Enable  */
                vuint16_t T2_IE : 1;      /* Trigger 2 Interrupt Enable  */
                vuint16_t T1_IE : 1;      /* Trigger 1 Interrupt Enable  */
                vuint16_t T0_IE : 1;      /* Trigger 0 Interrupt Enable  */
                vuint16_t : 2;
                vuint16_t SAF_CNT_B_EN : 1;      /* If this bit is set the counter used to check the conversion  .. */
                vuint16_t SAF_CNT_A_EN : 1;      /* If this bit is set the counter used to check the conversion  .. */
                vuint16_t DMA_DE : 1;      /* If this bit is set, a dma done is like a write in the gre bi .. */
                vuint16_t MRS_DMAE : 1;      /* DMA transfer Enable on MRS occurrence if GRE bit is set  */
                vuint16_t MRS_IE : 1;      /* MRS Interrupt Enable  */
                vuint16_t IEE : 1;      /* Interrupt Error Enable  */
            } B;
        } CTUIR;      /* Cross Triggering Unit Interrupt Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 8;
                vuint16_t COTR : 8;      /* Control ON-Time and Guard Time for external trigger */
            } B;
        } COTR;      /* Control ON-Time Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t T7_SG : 1;      /* Trigger 7 Software Generated */
                vuint16_t T6_SG : 1;      /* Trigger 6 Software Generated  */
                vuint16_t T5_SG : 1;      /* Trigger 5 Software Generated  */
                vuint16_t T4_SG : 1;      /* Trigger 4 Software Generated  */
                vuint16_t T3_SG : 1;      /* Trigger 3 Software Generated  */
                vuint16_t T2_SG : 1;      /* Trigger 2 Software Generated  */
                vuint16_t T1_SG : 1;      /* Trigger 1 Software Generated  */
                vuint16_t T0_SG : 1;      /* Trigger 0 Software Generated  */
                vuint16_t CRU_ADC_R : 1;      /* CTU/ADC state machine Reset  */
                vuint16_t CTU_ODIS : 1;      /* CTU Output Disable  */
                vuint16_t DFE : 1;      /* Digital Filter Enable  */
                vuint16_t CGRE : 1;      /* Clear GRE  */
                vuint16_t FGRE : 1;      /* Flag GRE  */
                vuint16_t MRS_SG : 1;      /* MRS Software Generated  */
                vuint16_t GRE : 1;      /* General Reload Enable  */
                vuint16_t TGSISR_RE : 1;      /* TGS Input Selection Register Reload Enable  */
            } B;
        } CTUCR;      /* Cross triggering unit control register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 8;
                vuint16_t N : 8;      /* Digital Filter value (the external signal is considered at 1 .. */
            } B;
        } CTUDF;      /* Cross Triggering Unit Digital Filter */

        union {
            vuint16_t R;
            struct {
                vuint16_t VALUE : 16;      /* This value is the number of system clock cycle needed for th .. */
            } B;
        } CTUEXP_A;      /* Cross triggering unit expected value A */

        union {
            vuint16_t R;
            struct {
                vuint16_t VALUE : 16;      /* This value is the number of system clock cycle needed for th .. */
            } B;
        } CTUEXP_B;      /* Cross triggering unit expected value B */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 8;
                vuint16_t VALUE : 8;      /* Setting at one this bit you mask the same bit of the expecte .. */
            } B;
        } CTUCNTRNG;      /* Cross triggering unit counter range */
    };                                             /* End of CTU_tag */ 
#define CTU  (*(volatile struct CTU_tag *)          0xFFE0C000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 0 Configuration                                                    */
/*---------------------------------------------------------------------------*/
    struct ETIMER_0_CFG_tag {

        int8_t Reserved110[268];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 8;
                vuint16_t ENBL7 : 1;      /* Timer Channel 7 Enable */
                vuint16_t ENBL6 : 1;      /* Timer Channel 6 Enable */
                vuint16_t ENBL5 : 1;      /* Timer Channel 5 Enable */
                vuint16_t ENBL4 : 1;      /* Timer Channel 4 Enable */
                vuint16_t ENBL3 : 1;      /* Timer Channel 3 Enable */
                vuint16_t ENBL2 : 1;      /* Timer Channel 2 Enable */
                vuint16_t ENBL1 : 1;      /* Timer Channel 1 Enable */
                vuint16_t ENBL0 : 1;      /* Timer Channel 0 Enable */
            } B;
        } ENBL;      /* Channel Enable Register */

        int8_t Reserved111[2];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ0 : 5;      /* DMA Request Select */
            } B;
        } DREQ0;      /* DMA Request 0 Select Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ1 : 5;      /* DMA Request Select */
            } B;
        } DREQ1;      /* DMA Request 1 Select Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ2 : 5;      /* DMA Request Select */
            } B;
        } DREQ2;      /* DMA Request 2 Select Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ3 : 5;      /* DMA Request Select */
            } B;
        } DREQ3;      /* DMA Request 3 Select Register */
    };                                             /* End of ETIMER_0_CFG_tag */ 
#define ETIMER_0_CFG  (*(volatile struct ETIMER_0_CFG_tag *) 0xFFE18000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 0 Watchdog                                                         */
/*---------------------------------------------------------------------------*/
    struct ETIMER_0_WDT_tag {

        int8_t Reserved112[256];

        union {
            vuint16_t R;
            struct {
            } B;
        } WDTOL;      /* Watchdog Time-out Low Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } WDTOH;      /* Watchdog Time-out High Register */
    };                                             /* End of ETIMER_0_WDT_tag */ 
#define ETIMER_0_WDT  (*(volatile struct ETIMER_0_WDT_tag *) 0xFFE18000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 0 Fault                                                            */
/*---------------------------------------------------------------------------*/
    struct ETIMER_0_tag {

        int8_t Reserved113[260];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 3;
                vuint16_t FTEST : 1;      /* Fault Test. This read/write bit is used to simulate a fault  .. */
                vuint16_t FIE : 4;      /* Fault Interrupt Enable. These read/write bits enable interru .. */
                vuint16_t : 4;
                vuint16_t FLVL : 4;      /* Fault Active Logic Level. These read/write bits select the a .. */
            } B;
        } FCTRL;      /* Fault Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t FFPIN : 4;      /* Filtered Fault Pin. These read only bits reflect the current .. */
                vuint16_t : 4;
                vuint16_t FFLAG : 4;      /* These read only flags are set within 2 IPBus clock cycles af .. */
            } B;
        } FSTS;      /* Fault Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FFILT_CNT : 3;      /* FAULT Filter Sample Count. These bits represent the number o .. */
                vuint16_t FFILT_PER : 8;      /* FAULT Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FFILT;      /* Fault Filter Registers */
    };                                             /* End of ETIMER_0_tag */ 
#define ETIMER_0  (*(volatile struct ETIMER_0_tag *)     0xFFE18000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 0 Channel 0                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_00_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_00_tag */ 
#define ETIMER_00  (*(volatile struct ETIMER_00_tag *)    0xFFE18000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 0 Channel 1                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_01_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_01_tag */ 
#define ETIMER_01  (*(volatile struct ETIMER_01_tag *)    0xFFE18020UL)

/*---------------------------------------------------------------------------*/
/* eTimer 0 Channel 2                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_02_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_02_tag */ 
#define ETIMER_02  (*(volatile struct ETIMER_02_tag *)    0xFFE18040UL)

/*---------------------------------------------------------------------------*/
/* eTimer 0 Channel 3                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_03_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_03_tag */ 
#define ETIMER_03  (*(volatile struct ETIMER_03_tag *)    0xFFE18060UL)

/*---------------------------------------------------------------------------*/
/* eTimer 0 Channel 4                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_04_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_04_tag */ 
#define ETIMER_04  (*(volatile struct ETIMER_04_tag *)    0xFFE18080UL)

/*---------------------------------------------------------------------------*/
/* eTimer 0 Channel 5                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_05_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_05_tag */ 
#define ETIMER_05  (*(volatile struct ETIMER_05_tag *)    0xFFE180A0UL)

/*---------------------------------------------------------------------------*/
/* eTimer 0 Channel 6                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_06_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_06_tag */ 
#define ETIMER_06  (*(volatile struct ETIMER_06_tag *)    0xFFE180C0UL)

/*---------------------------------------------------------------------------*/
/* eTimer 0 Channel 7                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_07_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_07_tag */ 
#define ETIMER_07  (*(volatile struct ETIMER_07_tag *)    0xFFE180E0UL)

/*---------------------------------------------------------------------------*/
/* eTimer 1 Configuration                                                    */
/*---------------------------------------------------------------------------*/
    struct ETIMER_1_CFG_tag {

        int8_t Reserved114[268];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 8;
                vuint16_t ENBL7 : 1;      /* Timer Channel 7 Enable */
                vuint16_t ENBL6 : 1;      /* Timer Channel 6 Enable */
                vuint16_t ENBL5 : 1;      /* Timer Channel 5 Enable */
                vuint16_t ENBL4 : 1;      /* Timer Channel 4 Enable */
                vuint16_t ENBL3 : 1;      /* Timer Channel 3 Enable */
                vuint16_t ENBL2 : 1;      /* Timer Channel 2 Enable */
                vuint16_t ENBL1 : 1;      /* Timer Channel 1 Enable */
                vuint16_t ENBL0 : 1;      /* Timer Channel 0 Enable */
            } B;
        } ENBL;      /* Channel Enable Register */

        int8_t Reserved115[2];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ0 : 5;      /* DMA Request Select */
            } B;
        } DREQ0;      /* DMA Request 0 Select Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ1 : 5;      /* DMA Request Select */
            } B;
        } DREQ1;      /* DMA Request 1 Select Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ2 : 5;      /* DMA Request Select */
            } B;
        } DREQ2;      /* DMA Request 2 Select Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ3 : 5;      /* DMA Request Select */
            } B;
        } DREQ3;      /* DMA Request 3 Select Register */
    };                                             /* End of ETIMER_1_CFG_tag */ 
#define ETIMER_1_CFG  (*(volatile struct ETIMER_1_CFG_tag *) 0xFFE1C000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 1 Watchdog                                                         */
/*---------------------------------------------------------------------------*/
    struct ETIMER_1_WDT_tag {

        int8_t Reserved116[256];

        union {
            vuint16_t R;
            struct {
            } B;
        } WDTOL;      /* Watchdog Time-out Low Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } WDTOH;      /* Watchdog Time-out High Register */
    };                                             /* End of ETIMER_1_WDT_tag */ 
#define ETIMER_1_WDT  (*(volatile struct ETIMER_1_WDT_tag *) 0xFFE1C000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 1 Fault                                                            */
/*---------------------------------------------------------------------------*/
    struct ETIMER_1_tag {

        int8_t Reserved117[260];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 3;
                vuint16_t FTEST : 1;      /* Fault Test. This read/write bit is used to simulate a fault  .. */
                vuint16_t FIE : 4;      /* Fault Interrupt Enable. These read/write bits enable interru .. */
                vuint16_t : 4;
                vuint16_t FLVL : 4;      /* Fault Active Logic Level. These read/write bits select the a .. */
            } B;
        } FCTRL;      /* Fault Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t FFPIN : 4;      /* Filtered Fault Pin. These read only bits reflect the current .. */
                vuint16_t : 4;
                vuint16_t FFLAG : 4;      /* These read only flags are set within 2 IPBus clock cycles af .. */
            } B;
        } FSTS;      /* Fault Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FFILT_CNT : 3;      /* FAULT Filter Sample Count. These bits represent the number o .. */
                vuint16_t FFILT_PER : 8;      /* FAULT Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FFILT;      /* Fault Filter Registers */
    };                                             /* End of ETIMER_1_tag */ 
#define ETIMER_1  (*(volatile struct ETIMER_1_tag *)     0xFFE1C000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 1 Channel 0                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_10_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_10_tag */ 
#define ETIMER_10  (*(volatile struct ETIMER_10_tag *)    0xFFE1C000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 1 Channel 1                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_11_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_11_tag */ 
#define ETIMER_11  (*(volatile struct ETIMER_11_tag *)    0xFFE1C020UL)

/*---------------------------------------------------------------------------*/
/* eTimer 1 Channel 2                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_12_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_12_tag */ 
#define ETIMER_12  (*(volatile struct ETIMER_12_tag *)    0xFFE1C040UL)

/*---------------------------------------------------------------------------*/
/* eTimer 1 Channel 3                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_13_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_13_tag */ 
#define ETIMER_13  (*(volatile struct ETIMER_13_tag *)    0xFFE1C060UL)

/*---------------------------------------------------------------------------*/
/* eTimer 1 Channel 4                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_14_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_14_tag */ 
#define ETIMER_14  (*(volatile struct ETIMER_14_tag *)    0xFFE1C080UL)

/*---------------------------------------------------------------------------*/
/* eTimer 1 Channel 5                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_15_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_15_tag */ 
#define ETIMER_15  (*(volatile struct ETIMER_15_tag *)    0xFFE1C0A0UL)

/*---------------------------------------------------------------------------*/
/* eTimer 1 Channel 6                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_16_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_16_tag */ 
#define ETIMER_16  (*(volatile struct ETIMER_16_tag *)    0xFFE1C0C0UL)

/*---------------------------------------------------------------------------*/
/* eTimer 1 Channel 7                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_17_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_17_tag */ 
#define ETIMER_17  (*(volatile struct ETIMER_17_tag *)    0xFFE1C0E0UL)

/*---------------------------------------------------------------------------*/
/* eTimer 2 Configuration                                                    */
/*---------------------------------------------------------------------------*/
    struct ETIMER_2_CFG_tag {

        int8_t Reserved118[268];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 8;
                vuint16_t ENBL7 : 1;      /* Timer Channel 7 Enable */
                vuint16_t ENBL6 : 1;      /* Timer Channel 6 Enable */
                vuint16_t ENBL5 : 1;      /* Timer Channel 5 Enable */
                vuint16_t ENBL4 : 1;      /* Timer Channel 4 Enable */
                vuint16_t ENBL3 : 1;      /* Timer Channel 3 Enable */
                vuint16_t ENBL2 : 1;      /* Timer Channel 2 Enable */
                vuint16_t ENBL1 : 1;      /* Timer Channel 1 Enable */
                vuint16_t ENBL0 : 1;      /* Timer Channel 0 Enable */
            } B;
        } ENBL;      /* Channel Enable Register */

        int8_t Reserved119[2];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ0 : 5;      /* DMA Request Select */
            } B;
        } DREQ0;      /* DMA Request 0 Select Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ1 : 5;      /* DMA Request Select */
            } B;
        } DREQ1;      /* DMA Request 1 Select Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ2 : 5;      /* DMA Request Select */
            } B;
        } DREQ2;      /* DMA Request 2 Select Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t DREQ3 : 5;      /* DMA Request Select */
            } B;
        } DREQ3;      /* DMA Request 3 Select Register */
    };                                             /* End of ETIMER_2_CFG_tag */ 
#define ETIMER_2_CFG  (*(volatile struct ETIMER_2_CFG_tag *) 0xFFE20000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 2 Watchdog                                                         */
/*---------------------------------------------------------------------------*/
    struct ETIMER_2_WDT_tag {

        int8_t Reserved120[256];

        union {
            vuint16_t R;
            struct {
            } B;
        } WDTOL;      /* Watchdog Time-out Low Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } WDTOH;      /* Watchdog Time-out High Register */
    };                                             /* End of ETIMER_2_WDT_tag */ 
#define ETIMER_2_WDT  (*(volatile struct ETIMER_2_WDT_tag *) 0xFFE20000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 2 Fault                                                            */
/*---------------------------------------------------------------------------*/
    struct ETIMER_2_tag {

        int8_t Reserved121[260];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 3;
                vuint16_t FTEST : 1;      /* Fault Test. This read/write bit is used to simulate a fault  .. */
                vuint16_t FIE : 4;      /* Fault Interrupt Enable. These read/write bits enable interru .. */
                vuint16_t : 4;
                vuint16_t FLVL : 4;      /* Fault Active Logic Level. These read/write bits select the a .. */
            } B;
        } FCTRL;      /* Fault Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t FFPIN : 4;      /* Filtered Fault Pin. These read only bits reflect the current .. */
                vuint16_t : 4;
                vuint16_t FFLAG : 4;      /* These read only flags are set within 2 IPBus clock cycles af .. */
            } B;
        } FSTS;      /* Fault Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FFILT_CNT : 3;      /* FAULT Filter Sample Count. These bits represent the number o .. */
                vuint16_t FFILT_PER : 8;      /* FAULT Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FFILT;      /* Fault Filter Registers */
    };                                             /* End of ETIMER_2_tag */ 
#define ETIMER_2  (*(volatile struct ETIMER_2_tag *)     0xFFE20000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 2 Channel 0                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_20_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_20_tag */ 
#define ETIMER_20  (*(volatile struct ETIMER_20_tag *)    0xFFE20000UL)

/*---------------------------------------------------------------------------*/
/* eTimer 2 Channel 1                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_21_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_21_tag */ 
#define ETIMER_21  (*(volatile struct ETIMER_21_tag *)    0xFFE20020UL)

/*---------------------------------------------------------------------------*/
/* eTimer 2 Channel 2                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_22_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_22_tag */ 
#define ETIMER_22  (*(volatile struct ETIMER_22_tag *)    0xFFE20040UL)

/*---------------------------------------------------------------------------*/
/* eTimer 2 Channel 3                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_23_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_23_tag */ 
#define ETIMER_23  (*(volatile struct ETIMER_23_tag *)    0xFFE20060UL)

/*---------------------------------------------------------------------------*/
/* eTimer 2 Channel 4                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_24_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_24_tag */ 
#define ETIMER_24  (*(volatile struct ETIMER_24_tag *)    0xFFE20080UL)

/*---------------------------------------------------------------------------*/
/* eTimer 2 Channel 5                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_25_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_25_tag */ 
#define ETIMER_25  (*(volatile struct ETIMER_25_tag *)    0xFFE200A0UL)

/*---------------------------------------------------------------------------*/
/* eTimer 2 Channel 6                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_26_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_26_tag */ 
#define ETIMER_26  (*(volatile struct ETIMER_26_tag *)    0xFFE200C0UL)

/*---------------------------------------------------------------------------*/
/* eTimer 2 Channel 7                                                        */
/*---------------------------------------------------------------------------*/
    struct ETIMER_27_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP1;      /* Compare Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } COMP2;      /* Compare Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT1;      /* Capture Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CAPT2;      /* Capture Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } LOAD;      /* Load Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } HOLD;      /* Hold Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CNTR;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CNTMODE : 3;      /* Count Mode. These bits control the basic counting and behavi .. */
                vuint16_t PRISRC : 5;      /* Primary Count Source */
                vuint16_t ONCE : 1;      /* Count Once. This bit selects continuous or one shot counting .. */
                vuint16_t LENGTH : 1;      /* Count Length. This bit determines whether the counter counts .. */
                vuint16_t DIR : 1;      /* Count Direction */
                vuint16_t SECSRC : 5;      /* Secondary Count Source */
            } B;
        } CTRL1;      /* Control Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t OEN : 1;      /* Output Enable. This bit determines the direction of the exte .. */
                vuint16_t RDNT : 1;      /* Redundant Channel Enable. This bit enables redundant channel .. */
                vuint16_t INPUT : 1;      /* External input signal. This read only bit reflects the curre .. */
                vuint16_t VAL : 1;      /* Forced OFLAG Value. This bit determines the value of the OFL .. */
                vuint16_t FORCE : 1;      /* Force the OFLAG output. This write only bit forces the curre .. */
                vuint16_t COFRC : 1;      /* Co-channel OFLAG Force. This bit enables the compare from an .. */
                vuint16_t COINIT : 2;      /* Co-channel Initialization. These bits enable another channel .. */
                vuint16_t SIPS : 1;      /* Secondary Source Input Polarity Select. This bit inverts the .. */
                vuint16_t PIPS : 1;      /* Primary Source Input Polarity Select. This bit inverts the p .. */
                vuint16_t OPS : 1;      /* Output Polarity Select. This bit inverts the OFLAG output si .. */
                vuint16_t MSTR : 1;      /* Master Mode. This bit enables the compare function's output  .. */
                vuint16_t OUTMODE : 4;      /* Output Mode */
            } B;
        } CTRL2;      /* Control Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t STPEN : 1;      /* Stop Actions Enable. This bit allows the tri-stating of the  .. */
                vuint16_t ROC : 2;      /* Reload on Capture. These bits enable the capture function to .. */
                vuint16_t FMODE : 1;      /* Fault Safing Mode. This bit determines the safing mode of th .. */
                vuint16_t FDIS : 4;      /* Fault Disable Mask. Each of these four bits is one-to-one as .. */
                vuint16_t C2FCNT : 3;      /* CAPT2 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t C1FCNT : 3;      /* CAPT1 FIFO Word Count. This field reflects the number of wor .. */
                vuint16_t DBGEN : 2;      /* Debug Actions Enable. These bits allow the counter channel t .. */
            } B;
        } CTRL3;      /* Control Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t WDF : 1;      /* Watchdog Time-out Flag. This bit is set when the watchdog ti .. */
                vuint16_t RCF : 1;      /* Redundant Channel Flag. This bit is set when there is a misc .. */
                vuint16_t ICF2 : 1;      /* Input Capture 2 Flag. This bit is set when an input capture  .. */
                vuint16_t ICF1 : 1;      /* Input Capture 1 Flag. This bit is set when an input capture  .. */
                vuint16_t IEHF : 1;      /* Input Edge High Flag. This bit is set when a positive input  .. */
                vuint16_t IELF : 1;      /* Input Edge Low Flag. This bit is set when a negative input t .. */
                vuint16_t TOF : 1;      /* Timer Overflow Flag. This bit is set when the counter rolls  .. */
                vuint16_t TCF2 : 1;      /* Timer Compare 2 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF1 : 1;      /* Timer Compare 1 Flag. This bit is set when a successful comp .. */
                vuint16_t TCF : 1;      /* Timer Compare Flag. This bit is set when a successful compar .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ICF2DE : 1;      /* Input Capture 2 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t ICF1DE : 1;      /* Input Capture 1 Flag DMA Enable. Setting this bit enables DM .. */
                vuint16_t CMPLD2DE : 1;      /* Comparator Load Register 2 Flag DMA Enable. Setting this bit .. */
                vuint16_t CMPLD1DE : 1;      /* Comparator Load Register 1 Flag DMA Enable. Setting this bit .. */
                vuint16_t : 2;
                vuint16_t WDFIE : 1;      /* Watchdog Flag Interrupt Enable. Setting this bit enables int .. */
                vuint16_t RCFIE : 1;      /* Redundant Channel Flag Interrupt Enable. Setting this bit en .. */
                vuint16_t ICF2IE : 1;      /* Input Capture 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t ICF1IE : 1;      /* Input Capture 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IEHFIE : 1;      /* Input Edge High Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t IELFIE : 1;      /* Input Edge Low Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TOFIE : 1;      /* Timer Overflow Flag Interrupt Enable. Setting this bit enabl .. */
                vuint16_t TCF2IE : 1;      /* Timer Compare 2 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCF1IE : 1;      /* Timer Compare 1 Flag Interrupt Enable. Setting this bit enab .. */
                vuint16_t TCFIE : 1;      /* Timer Compare Flag Interrupt Enable. Setting this bit enable .. */
            } B;
        } INTDMA;      /* Interrupt and DMA Enable Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD1;      /* Comparator Load Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } CMPLD2;      /* Comparator Load Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLC2 : 3;      /* Compare Load Control 2. These bits control when COMP2 is pre .. */
                vuint16_t CLC1 : 3;      /* Compare Load Control 1. These bits control when COMP1 is pre .. */
                vuint16_t CMPMODE : 2;      /* Compare Mode. These bits control when the CMP1 and CMP2 regi .. */
                vuint16_t CPT2MODE : 2;      /* Capture 2 Mode Control. These bits control the operation of  .. */
                vuint16_t CPT1MODE : 2;      /* Capture 1 Mode Control. These bits control the operation of  .. */
                vuint16_t CFWM : 2;      /* Capture FIFO Water Mark. This field represents the water mar .. */
                vuint16_t ONESHOT : 1;      /* One Shot Capture Mode. This bit selects between free running .. */
                vuint16_t ARM : 1;      /* Arm Capture. Setting this bit high starts the input capture  .. */
            } B;
        } CCCTRL;      /* Compare and Capture Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FILT_CNT : 3;      /* Input Filter Sample Count. These bits represent the number o .. */
                vuint16_t FILT_PER : 8;      /* Input Filter Sample Period. These bits represent the samplin .. */
            } B;
        } FILT;      /* Input Filter Register */
    };                                             /* End of ETIMER_27_tag */ 
#define ETIMER_27  (*(volatile struct ETIMER_27_tag *)    0xFFE200E0UL)

/*---------------------------------------------------------------------------*/
/* Motor Control Pulse Width Modulator Module 0                              */
/*---------------------------------------------------------------------------*/
    struct FLEXPWM_0_tag {

        int8_t Reserved122[320];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t PWMA_EN : 4;      /* PWMA Output Enables. These bits enable the PWMA outputs of e .. */
                vuint16_t PWMB_EN : 4;      /* PWMB Output Enables. These bits enable the PWMB outputs of e .. */
                vuint16_t PWMX_EN : 4;      /* PWMX Output Enables. These bits enable the PWMX outputs of e .. */
            } B;
        } OUTEN;      /* Output Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t MASKA : 1;      /* PWMA Masks. These bits mask the PWMA outputs of each submodu .. */
                vuint16_t : 3;
                vuint16_t MASKB : 1;      /* PWMB Masks. These bits mask the PWMB outputs of each submodu .. */
                vuint16_t : 3;
                vuint16_t MASKX : 1;      /* PWMX Masks. These bits mask the PWMX outputs of each submodu .. */
            } B;
        } MASK;      /* Output Mask Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 8;
                vuint16_t OUT23_3 : 1;      /* Software Controlled Output 23_3 This bit is only used when S .. */
                vuint16_t OUT45_3 : 1;      /* Software Controlled Output 45_3 This bit is only used when S .. */
                vuint16_t OUT23_2 : 1;      /* Software Controlled Output 23_2 This bit is only used when S .. */
                vuint16_t OUT45_2 : 1;      /* Software Controlled Output 45_2 This bit is only used when S .. */
                vuint16_t OUT23_1 : 1;      /* Software Controlled Output 23_1 This bit is only used when S .. */
                vuint16_t OUT45_1 : 1;      /* Software Controlled Output 45_1 This bit is only used when S .. */
                vuint16_t OUT23_0 : 1;      /* Software Controlled Output 23_0 This bit is only used when S .. */
                vuint16_t OUT45_0 : 1;      /* Software Controlled Output 45_0 This bit is only used when S .. */
            } B;
        } SWCOUT;      /* Software Controlled Output Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t SEL23_3 : 2;      /* PWM23_3 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL45_3 : 2;      /* PWM45_3 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL23_2 : 2;      /* PWM23_2 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL45_2 : 2;      /* PWM45_2 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL23_1 : 2;      /* PWM23_1 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL45_1 : 2;      /* PWM45_1 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL23_0 : 2;      /* PWM23_0 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL45_0 : 2;      /* PWM45_0 Control Select. This field selects possible over-rid .. */
            } B;
        } DTSRCSEL;      /* Deadtime Source Select Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t IPOL : 4;      /* Current Polarity. This buffered read/write bit is used to se .. */
                vuint16_t RUN : 4;      /* Run. This read/write bit enables the clocks to the PWM gener .. */
                vuint16_t CLDOK : 4;      /* Clear Load Okay. This write only bit is used to clear the LD .. */
                vuint16_t LDOK : 4;      /* Load Okay. This read/set bit loads the PRSC bits of CTRL and .. */
            } B;
        } MCTRL;      /* Master Control Register */

        int8_t Reserved123[2];

        union {
            vuint16_t R;
            struct {
                vuint16_t FLVL : 4;      /* Fault Level These read/write bits select the active logic le .. */
                vuint16_t FAUTO : 4;      /* Automatic Fault Clearing These read/write bits select automa .. */
                vuint16_t FSAFE : 4;      /* Fault Safety Mode These read/write bits select the safety mo .. */
                vuint16_t FIE : 4;      /* Fault Interrupt Enables This read/write bit enables CPU inte .. */
            } B;
        } FCTRL;      /* Fault Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 3;
                vuint16_t FTEST : 1;      /* Fault Test. These read/write bit is used to simulate a fault .. */
                vuint16_t FFPIN : 4;      /* Filtered Fault Pins. These read-only bits reflect the curren .. */
                vuint16_t FFULL : 4;      /* Full Cycle. These read/write bits are used to control the ti .. */
                vuint16_t FFLAG : 4;      /* Fault Flags. These read-only flag is set within two CPU cycl .. */
            } B;
        } FSTS;      /* Fault Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t GSTR : 1;      /* Fault Glitch Stretch Enable. This bit is used to enable the  .. */
                vuint16_t : 4;
                vuint16_t FILT_CNT : 3;      /* Fault Filter Count. These bits represent the number of conse .. */
                vuint16_t FILT_PER : 8;      /* Fault Filter Period. These bits represent the sampling perio .. */
            } B;
        } FFILT;      /* Fault Filter Register */
    };                                             /* End of FLEXPWM_0_tag */ 
#define FLEXPWM_0  (*(volatile struct FLEXPWM_0_tag *)    0xFFE24000UL)

/*---------------------------------------------------------------------------*/
/* Motor Control Pulse Width Modulator Sub 0 Module                          */
/*---------------------------------------------------------------------------*/
    struct FLEXPWM_0_SUB0_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } CNT;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } INIT;      /* Initial Count Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DBGEN : 1;      /* Debug Enable */
                vuint16_t WAITEN : 1;      /* WAIT Enable */
                vuint16_t INDEP : 1;      /* Independent or Complementary Pair Operation */
                vuint16_t PWM23_INIT : 1;      /* PWM23 Initial Value */
                vuint16_t PWM45_INIT : 1;      /* PWM45 Initial Value */
                vuint16_t PWMX_INIT : 1;      /* PWMX Initial Value */
                vuint16_t INIT_SEL : 2;      /* Initialization Control Select */
                vuint16_t FRCEN : 1;      /* Force Initialization Enable */
                vuint16_t FORCE : 1;      /* Force Initialization */
                vuint16_t FORCE_SEL : 3;      /* Force Source Select */
                vuint16_t RELOAD_SEL : 1;      /* Reload Source Select */
                vuint16_t CLK_SEL : 2;      /* Clock Source Select */
            } B;
        } CTRL2;      /* Control 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t LDFQ : 4;      /* Load Frequency  */
                vuint16_t HALF : 1;      /* Half Cycle Reload  */
                vuint16_t FULL : 1;      /* Full Cycle Reload  */
                vuint16_t DT : 2;      /* Deadtime */
                vuint16_t : 1;
                vuint16_t PRSC : 3;      /* Prescaler  */
                vuint16_t : 1;
                vuint16_t LMOD : 1;      /* Load Mode Select. This read/write bit selects the timing of  .. */
                vuint16_t : 1;
                vuint16_t DBLEN : 1;      /* Double Switching Enable  */
            } B;
        } CTRL1;      /* Control 1 Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL0;      /* Value Register 0 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL1;      /* Value Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL2;      /* Value Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL3;      /* Value Register 3 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL4;      /* Value Register 4 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL5;      /* Value Register 5 */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACA_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACA_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACA;      /* Fractional Delay Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACB_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACB_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACB;      /* Fractional Delay Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t PWMA_IN : 1;      /* PWMA Input */
                vuint16_t PWMB_IN : 1;      /* PWMB Input */
                vuint16_t PWMX_IN : 1;      /* PWMX Input */
                vuint16_t : 2;
                vuint16_t POLA : 1;      /* PWMA Output Polarity */
                vuint16_t POLB : 1;      /* PWMB Output Polarity */
                vuint16_t POLX : 1;      /* PWMX Output Polarity */
                vuint16_t : 2;
                vuint16_t PWMAFS : 2;      /* PWMA Fault State */
                vuint16_t PWMBFS : 2;      /* PWMB Fault State */
                vuint16_t PWMXFS : 2;      /* PWMX Fault State */
            } B;
        } OCTRL;      /* Output Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t RUF : 1;      /* Registers Updated Flag This read only flag is set when one o .. */
                vuint16_t REF : 1;      /* Reload Error Flag This read/write flag is set when a reload  .. */
                vuint16_t RF : 1;      /* Reload Flag This read/write flag is set at the beginning of  .. */
                vuint16_t : 4;
                vuint16_t CFX1 : 1;      /* Capture Flag X1 This bit is set when the word count of the C .. */
                vuint16_t CFX0 : 1;      /* Capture Flag X0 This bit is set when the word count of the C .. */
                vuint16_t CMPF : 6;      /* Compare Flags These bits are set when the submodule counter  .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t REIE : 1;      /* Reload Error Interrupt Enable */
                vuint16_t RIE : 1;      /* Reload Interrupt Enable */
                vuint16_t : 4;
                vuint16_t CX1IE : 1;      /* Capture X 1 Interrupt Enable */
                vuint16_t CX0IE : 1;      /* Capture X 0 Interrupt Enable */
                vuint16_t CMPIE : 6;      /* Compare Interrupt Enables */
            } B;
        } INTEN;      /* Interrupt Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t VALDE : 1;      /* Value Registers DMA Enable */
                vuint16_t FAND : 1;      /* FIFO Watermark AND Control */
                vuint16_t CAPTDE : 2;      /* Capture DMA Enable Source Select */
                vuint16_t : 4;
                vuint16_t CX1DE : 1;      /* Capture X1 FIFO DMA Enable */
                vuint16_t CX0DE : 1;      /* Capture X0 FIFO DMA Enable */
            } B;
        } DMAEN;      /* DMA Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 10;
                vuint16_t OUT_TRIG_EN : 6;      /* Output Trigger Enables. These bits enable the generation of  .. */
            } B;
        } TCTRL;      /* Output Trigger Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t DISX : 4;      /* PWMX Fault Disable Mask */
                vuint16_t DISB : 4;      /* PWMB Fault Disable Mask */
                vuint16_t DISA : 4;      /* PWMA Fault Disable Mask */
            } B;
        } DISMAP;      /* Fault Disable Mapping Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT0 : 11;      /* Deadtime Count Register 0 */
            } B;
        } DTCNT0;      /* Deadtime Count Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT1 : 11;      /* Deadtime Count Register 1 */
            } B;
        } DTCNT1;      /* Deadtime Count Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CA1CNT : 3;      /* Capture A1 FIFO Word Count */
                vuint16_t CA0CNT : 3;      /* Capture A0 FIFO Word Count */
                vuint16_t CFAWM : 2;      /* Capture A FIFOs Water Mark */
                vuint16_t EDGCNTA_EN : 1;      /* Edge Counter A Enable */
                vuint16_t INPSELA : 1;      /* Input Select A */
                vuint16_t EDGA1 : 2;      /* Edge A 1 */
                vuint16_t EDGA0 : 2;      /* Edge A 0 */
                vuint16_t ONESHOTA : 1;      /* One Shot Mode Aux */
                vuint16_t ARMA : 1;      /* Arm A */
            } B;
        } CAPTCTRLA;      /* Capture Control Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTA : 8;      /* Edge Counter A */
                vuint16_t EDGCMPA : 8;      /* Edge Compare A */
            } B;
        } CAPTCOMPA;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t CB1CNT : 3;      /* Capture B1 FIFO Word Count */
                vuint16_t CB0CNT : 3;      /* Capture B0 FIFO Word Count */
                vuint16_t CFBWM : 2;      /* Capture B FIFOs Water Mark */
                vuint16_t EDGCNTB_EN : 1;      /* Edge Counter B Enable */
                vuint16_t INPSELB : 1;      /* Input Select B */
                vuint16_t EDGB1 : 2;      /* Edge B 1 */
                vuint16_t EDGB0 : 2;      /* Edge B 0 */
                vuint16_t ONESHOTB : 1;      /* One Shot Mode Aux */
                vuint16_t ARMB : 1;      /* Arm B */
            } B;
        } CAPTCTRLB;      /* Capture Control Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTB : 8;      /* Edge Counter B */
                vuint16_t EDGCMPB : 8;      /* Edge Compare B */
            } B;
        } CAPTCOMPB;      /* Capture Compare Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t CX1CNT : 3;      /* Capture X1 FIFO Word Count */
                vuint16_t CX0CNT : 3;      /* Capture X0 FIFO Word Count */
                vuint16_t CFXWM : 2;      /* Capture X FIFOs Water Mark */
                vuint16_t EDGCNTX_EN : 1;      /* Edge Counter X Enable */
                vuint16_t INPSELX : 1;      /* Input Select X */
                vuint16_t EDGX1 : 2;      /* Edge X 1 */
                vuint16_t EDGX0 : 2;      /* Edge X 0 */
                vuint16_t ONESHOTX : 1;      /* One Shot Mode Aux */
                vuint16_t ARMX : 1;      /* Arm X */
            } B;
        } CAPTCTRLX;      /* Capture Control Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTX : 8;      /* Edge Counter X */
                vuint16_t EDGCMPX : 8;      /* Edge Compare X */
            } B;
        } CAPTCOMPX;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL0;      /* Capture Value 0 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL0CYC : 3;      /* Capture Value 0 Cycle Register */
            } B;
        } CVAL0C;      /* Capture Value 0 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL1;      /* Capture Value 1 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL1CYC : 3;      /* Capture Value 1 Cycle Register */
            } B;
        } CVAL1C;      /* Capture Value 1 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL2;      /* Capture Value 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 2 Cycle Register */
            } B;
        } CVAL2C;      /* Capture Value 2 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL3;      /* Capture Value 3 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 3 Cycle Register */
            } B;
        } CVAL3C;      /* Capture Value 3 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL4;      /* Capture Value 4 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 4 Cycle Register */
            } B;
        } CVAL4C;      /* Capture Value 4 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL5;      /* Capture Value 5 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 5 Cycle Register */
            } B;
        } CVAL5C;      /* Capture Value 5 Cycle Register */
    };                                             /* End of FLEXPWM_0_SUB0_tag */ 
#define FLEXPWM_0_SUB0  (*(volatile struct FLEXPWM_0_SUB0_tag *) 0xFFE24000UL)

/*---------------------------------------------------------------------------*/
/* Motor Control Pulse Width Modulator Sub 1 Module                          */
/*---------------------------------------------------------------------------*/
    struct FLEXPWM_0_SUB1_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } CNT;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } INIT;      /* Initial Count Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DBGEN : 1;      /* Debug Enable */
                vuint16_t WAITEN : 1;      /* WAIT Enable */
                vuint16_t INDEP : 1;      /* Independent or Complementary Pair Operation */
                vuint16_t PWM23_INIT : 1;      /* PWM23 Initial Value */
                vuint16_t PWM45_INIT : 1;      /* PWM45 Initial Value */
                vuint16_t PWMX_INIT : 1;      /* PWMX Initial Value */
                vuint16_t INIT_SEL : 2;      /* Initialization Control Select */
                vuint16_t FRCEN : 1;      /* Force Initialization Enable */
                vuint16_t FORCE : 1;      /* Force Initialization */
                vuint16_t FORCE_SEL : 3;      /* Force Source Select */
                vuint16_t RELOAD_SEL : 1;      /* Reload Source Select */
                vuint16_t CLK_SEL : 2;      /* Clock Source Select */
            } B;
        } CTRL2;      /* Control 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t LDFQ : 4;      /* Load Frequency  */
                vuint16_t HALF : 1;      /* Half Cycle Reload  */
                vuint16_t FULL : 1;      /* Full Cycle Reload  */
                vuint16_t DT : 2;      /* Deadtime */
                vuint16_t : 1;
                vuint16_t PRSC : 3;      /* Prescaler  */
                vuint16_t : 1;
                vuint16_t LMOD : 1;      /* Load Mode Select. This read/write bit selects the timing of  .. */
                vuint16_t : 1;
                vuint16_t DBLEN : 1;      /* Double Switching Enable  */
            } B;
        } CTRL1;      /* Control 1 Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL0;      /* Value Register 0 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL1;      /* Value Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL2;      /* Value Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL3;      /* Value Register 3 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL4;      /* Value Register 4 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL5;      /* Value Register 5 */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACA_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACA_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACA;      /* Fractional Delay Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACB_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACB_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACB;      /* Fractional Delay Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t PWMA_IN : 1;      /* PWMA Input */
                vuint16_t PWMB_IN : 1;      /* PWMB Input */
                vuint16_t PWMX_IN : 1;      /* PWMX Input */
                vuint16_t : 2;
                vuint16_t POLA : 1;      /* PWMA Output Polarity */
                vuint16_t POLB : 1;      /* PWMB Output Polarity */
                vuint16_t POLX : 1;      /* PWMX Output Polarity */
                vuint16_t : 2;
                vuint16_t PWMAFS : 2;      /* PWMA Fault State */
                vuint16_t PWMBFS : 2;      /* PWMB Fault State */
                vuint16_t PWMXFS : 2;      /* PWMX Fault State */
            } B;
        } OCTRL;      /* Output Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t RUF : 1;      /* Registers Updated Flag This read only flag is set when one o .. */
                vuint16_t REF : 1;      /* Reload Error Flag This read/write flag is set when a reload  .. */
                vuint16_t RF : 1;      /* Reload Flag This read/write flag is set at the beginning of  .. */
                vuint16_t : 4;
                vuint16_t CFX1 : 1;      /* Capture Flag X1 This bit is set when the word count of the C .. */
                vuint16_t CFX0 : 1;      /* Capture Flag X0 This bit is set when the word count of the C .. */
                vuint16_t CMPF : 6;      /* Compare Flags These bits are set when the submodule counter  .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t REIE : 1;      /* Reload Error Interrupt Enable */
                vuint16_t RIE : 1;      /* Reload Interrupt Enable */
                vuint16_t : 4;
                vuint16_t CX1IE : 1;      /* Capture X 1 Interrupt Enable */
                vuint16_t CX0IE : 1;      /* Capture X 0 Interrupt Enable */
                vuint16_t CMPIE : 6;      /* Compare Interrupt Enables */
            } B;
        } INTEN;      /* Interrupt Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t VALDE : 1;      /* Value Registers DMA Enable */
                vuint16_t FAND : 1;      /* FIFO Watermark AND Control */
                vuint16_t CAPTDE : 2;      /* Capture DMA Enable Source Select */
                vuint16_t : 4;
                vuint16_t CX1DE : 1;      /* Capture X1 FIFO DMA Enable */
                vuint16_t CX0DE : 1;      /* Capture X0 FIFO DMA Enable */
            } B;
        } DMAEN;      /* DMA Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 10;
                vuint16_t OUT_TRIG_EN : 6;      /* Output Trigger Enables. These bits enable the generation of  .. */
            } B;
        } TCTRL;      /* Output Trigger Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t DISX : 4;      /* PWMX Fault Disable Mask */
                vuint16_t DISB : 4;      /* PWMB Fault Disable Mask */
                vuint16_t DISA : 4;      /* PWMA Fault Disable Mask */
            } B;
        } DISMAP;      /* Fault Disable Mapping Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT0 : 11;      /* Deadtime Count Register 0 */
            } B;
        } DTCNT0;      /* Deadtime Count Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT1 : 11;      /* Deadtime Count Register 1 */
            } B;
        } DTCNT1;      /* Deadtime Count Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CA1CNT : 3;      /* Capture A1 FIFO Word Count */
                vuint16_t CA0CNT : 3;      /* Capture A0 FIFO Word Count */
                vuint16_t CFAWM : 2;      /* Capture A FIFOs Water Mark */
                vuint16_t EDGCNTA_EN : 1;      /* Edge Counter A Enable */
                vuint16_t INPSELA : 1;      /* Input Select A */
                vuint16_t EDGA1 : 2;      /* Edge A 1 */
                vuint16_t EDGA0 : 2;      /* Edge A 0 */
                vuint16_t ONESHOTA : 1;      /* One Shot Mode Aux */
                vuint16_t ARMA : 1;      /* Arm A */
            } B;
        } CAPTCTRLA;      /* Capture Control Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTA : 8;      /* Edge Counter A */
                vuint16_t EDGCMPA : 8;      /* Edge Compare A */
            } B;
        } CAPTCOMPA;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t CB1CNT : 3;      /* Capture B1 FIFO Word Count */
                vuint16_t CB0CNT : 3;      /* Capture B0 FIFO Word Count */
                vuint16_t CFBWM : 2;      /* Capture B FIFOs Water Mark */
                vuint16_t EDGCNTB_EN : 1;      /* Edge Counter B Enable */
                vuint16_t INPSELB : 1;      /* Input Select B */
                vuint16_t EDGB1 : 2;      /* Edge B 1 */
                vuint16_t EDGB0 : 2;      /* Edge B 0 */
                vuint16_t ONESHOTB : 1;      /* One Shot Mode Aux */
                vuint16_t ARMB : 1;      /* Arm B */
            } B;
        } CAPTCTRLB;      /* Capture Control Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTB : 8;      /* Edge Counter B */
                vuint16_t EDGCMPB : 8;      /* Edge Compare B */
            } B;
        } CAPTCOMPB;      /* Capture Compare Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t CX1CNT : 3;      /* Capture X1 FIFO Word Count */
                vuint16_t CX0CNT : 3;      /* Capture X0 FIFO Word Count */
                vuint16_t CFXWM : 2;      /* Capture X FIFOs Water Mark */
                vuint16_t EDGCNTX_EN : 1;      /* Edge Counter X Enable */
                vuint16_t INPSELX : 1;      /* Input Select X */
                vuint16_t EDGX1 : 2;      /* Edge X 1 */
                vuint16_t EDGX0 : 2;      /* Edge X 0 */
                vuint16_t ONESHOTX : 1;      /* One Shot Mode Aux */
                vuint16_t ARMX : 1;      /* Arm X */
            } B;
        } CAPTCTRLX;      /* Capture Control Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTX : 8;      /* Edge Counter X */
                vuint16_t EDGCMPX : 8;      /* Edge Compare X */
            } B;
        } CAPTCOMPX;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL0;      /* Capture Value 0 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL0CYC : 3;      /* Capture Value 0 Cycle Register */
            } B;
        } CVAL0C;      /* Capture Value 0 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL1;      /* Capture Value 1 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL1CYC : 3;      /* Capture Value 1 Cycle Register */
            } B;
        } CVAL1C;      /* Capture Value 1 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL2;      /* Capture Value 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 2 Cycle Register */
            } B;
        } CVAL2C;      /* Capture Value 2 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL3;      /* Capture Value 3 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 3 Cycle Register */
            } B;
        } CVAL3C;      /* Capture Value 3 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL4;      /* Capture Value 4 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 4 Cycle Register */
            } B;
        } CVAL4C;      /* Capture Value 4 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL5;      /* Capture Value 5 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 5 Cycle Register */
            } B;
        } CVAL5C;      /* Capture Value 5 Cycle Register */
    };                                             /* End of FLEXPWM_0_SUB1_tag */ 
#define FLEXPWM_0_SUB1  (*(volatile struct FLEXPWM_0_SUB1_tag *) 0xFFE24050UL)

/*---------------------------------------------------------------------------*/
/* Motor Control Pulse Width Modulator Sub 2 Module                          */
/*---------------------------------------------------------------------------*/
    struct FLEXPWM_0_SUB2_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } CNT;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } INIT;      /* Initial Count Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DBGEN : 1;      /* Debug Enable */
                vuint16_t WAITEN : 1;      /* WAIT Enable */
                vuint16_t INDEP : 1;      /* Independent or Complementary Pair Operation */
                vuint16_t PWM23_INIT : 1;      /* PWM23 Initial Value */
                vuint16_t PWM45_INIT : 1;      /* PWM45 Initial Value */
                vuint16_t PWMX_INIT : 1;      /* PWMX Initial Value */
                vuint16_t INIT_SEL : 2;      /* Initialization Control Select */
                vuint16_t FRCEN : 1;      /* Force Initialization Enable */
                vuint16_t FORCE : 1;      /* Force Initialization */
                vuint16_t FORCE_SEL : 3;      /* Force Source Select */
                vuint16_t RELOAD_SEL : 1;      /* Reload Source Select */
                vuint16_t CLK_SEL : 2;      /* Clock Source Select */
            } B;
        } CTRL2;      /* Control 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t LDFQ : 4;      /* Load Frequency  */
                vuint16_t HALF : 1;      /* Half Cycle Reload  */
                vuint16_t FULL : 1;      /* Full Cycle Reload  */
                vuint16_t DT : 2;      /* Deadtime */
                vuint16_t : 1;
                vuint16_t PRSC : 3;      /* Prescaler  */
                vuint16_t : 1;
                vuint16_t LMOD : 1;      /* Load Mode Select. This read/write bit selects the timing of  .. */
                vuint16_t : 1;
                vuint16_t DBLEN : 1;      /* Double Switching Enable  */
            } B;
        } CTRL1;      /* Control 1 Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL0;      /* Value Register 0 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL1;      /* Value Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL2;      /* Value Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL3;      /* Value Register 3 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL4;      /* Value Register 4 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL5;      /* Value Register 5 */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACA_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACA_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACA;      /* Fractional Delay Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACB_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACB_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACB;      /* Fractional Delay Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t PWMA_IN : 1;      /* PWMA Input */
                vuint16_t PWMB_IN : 1;      /* PWMB Input */
                vuint16_t PWMX_IN : 1;      /* PWMX Input */
                vuint16_t : 2;
                vuint16_t POLA : 1;      /* PWMA Output Polarity */
                vuint16_t POLB : 1;      /* PWMB Output Polarity */
                vuint16_t POLX : 1;      /* PWMX Output Polarity */
                vuint16_t : 2;
                vuint16_t PWMAFS : 2;      /* PWMA Fault State */
                vuint16_t PWMBFS : 2;      /* PWMB Fault State */
                vuint16_t PWMXFS : 2;      /* PWMX Fault State */
            } B;
        } OCTRL;      /* Output Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t RUF : 1;      /* Registers Updated Flag This read only flag is set when one o .. */
                vuint16_t REF : 1;      /* Reload Error Flag This read/write flag is set when a reload  .. */
                vuint16_t RF : 1;      /* Reload Flag This read/write flag is set at the beginning of  .. */
                vuint16_t : 4;
                vuint16_t CFX1 : 1;      /* Capture Flag X1 This bit is set when the word count of the C .. */
                vuint16_t CFX0 : 1;      /* Capture Flag X0 This bit is set when the word count of the C .. */
                vuint16_t CMPF : 6;      /* Compare Flags These bits are set when the submodule counter  .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t REIE : 1;      /* Reload Error Interrupt Enable */
                vuint16_t RIE : 1;      /* Reload Interrupt Enable */
                vuint16_t : 4;
                vuint16_t CX1IE : 1;      /* Capture X 1 Interrupt Enable */
                vuint16_t CX0IE : 1;      /* Capture X 0 Interrupt Enable */
                vuint16_t CMPIE : 6;      /* Compare Interrupt Enables */
            } B;
        } INTEN;      /* Interrupt Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t VALDE : 1;      /* Value Registers DMA Enable */
                vuint16_t FAND : 1;      /* FIFO Watermark AND Control */
                vuint16_t CAPTDE : 2;      /* Capture DMA Enable Source Select */
                vuint16_t : 4;
                vuint16_t CX1DE : 1;      /* Capture X1 FIFO DMA Enable */
                vuint16_t CX0DE : 1;      /* Capture X0 FIFO DMA Enable */
            } B;
        } DMAEN;      /* DMA Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 10;
                vuint16_t OUT_TRIG_EN : 6;      /* Output Trigger Enables. These bits enable the generation of  .. */
            } B;
        } TCTRL;      /* Output Trigger Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t DISX : 4;      /* PWMX Fault Disable Mask */
                vuint16_t DISB : 4;      /* PWMB Fault Disable Mask */
                vuint16_t DISA : 4;      /* PWMA Fault Disable Mask */
            } B;
        } DISMAP;      /* Fault Disable Mapping Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT0 : 11;      /* Deadtime Count Register 0 */
            } B;
        } DTCNT0;      /* Deadtime Count Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT1 : 11;      /* Deadtime Count Register 1 */
            } B;
        } DTCNT1;      /* Deadtime Count Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CA1CNT : 3;      /* Capture A1 FIFO Word Count */
                vuint16_t CA0CNT : 3;      /* Capture A0 FIFO Word Count */
                vuint16_t CFAWM : 2;      /* Capture A FIFOs Water Mark */
                vuint16_t EDGCNTA_EN : 1;      /* Edge Counter A Enable */
                vuint16_t INPSELA : 1;      /* Input Select A */
                vuint16_t EDGA1 : 2;      /* Edge A 1 */
                vuint16_t EDGA0 : 2;      /* Edge A 0 */
                vuint16_t ONESHOTA : 1;      /* One Shot Mode Aux */
                vuint16_t ARMA : 1;      /* Arm A */
            } B;
        } CAPTCTRLA;      /* Capture Control Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTA : 8;      /* Edge Counter A */
                vuint16_t EDGCMPA : 8;      /* Edge Compare A */
            } B;
        } CAPTCOMPA;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t CB1CNT : 3;      /* Capture B1 FIFO Word Count */
                vuint16_t CB0CNT : 3;      /* Capture B0 FIFO Word Count */
                vuint16_t CFBWM : 2;      /* Capture B FIFOs Water Mark */
                vuint16_t EDGCNTB_EN : 1;      /* Edge Counter B Enable */
                vuint16_t INPSELB : 1;      /* Input Select B */
                vuint16_t EDGB1 : 2;      /* Edge B 1 */
                vuint16_t EDGB0 : 2;      /* Edge B 0 */
                vuint16_t ONESHOTB : 1;      /* One Shot Mode Aux */
                vuint16_t ARMB : 1;      /* Arm B */
            } B;
        } CAPTCTRLB;      /* Capture Control Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTB : 8;      /* Edge Counter B */
                vuint16_t EDGCMPB : 8;      /* Edge Compare B */
            } B;
        } CAPTCOMPB;      /* Capture Compare Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t CX1CNT : 3;      /* Capture X1 FIFO Word Count */
                vuint16_t CX0CNT : 3;      /* Capture X0 FIFO Word Count */
                vuint16_t CFXWM : 2;      /* Capture X FIFOs Water Mark */
                vuint16_t EDGCNTX_EN : 1;      /* Edge Counter X Enable */
                vuint16_t INPSELX : 1;      /* Input Select X */
                vuint16_t EDGX1 : 2;      /* Edge X 1 */
                vuint16_t EDGX0 : 2;      /* Edge X 0 */
                vuint16_t ONESHOTX : 1;      /* One Shot Mode Aux */
                vuint16_t ARMX : 1;      /* Arm X */
            } B;
        } CAPTCTRLX;      /* Capture Control Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTX : 8;      /* Edge Counter X */
                vuint16_t EDGCMPX : 8;      /* Edge Compare X */
            } B;
        } CAPTCOMPX;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL0;      /* Capture Value 0 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL0CYC : 3;      /* Capture Value 0 Cycle Register */
            } B;
        } CVAL0C;      /* Capture Value 0 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL1;      /* Capture Value 1 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL1CYC : 3;      /* Capture Value 1 Cycle Register */
            } B;
        } CVAL1C;      /* Capture Value 1 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL2;      /* Capture Value 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 2 Cycle Register */
            } B;
        } CVAL2C;      /* Capture Value 2 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL3;      /* Capture Value 3 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 3 Cycle Register */
            } B;
        } CVAL3C;      /* Capture Value 3 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL4;      /* Capture Value 4 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 4 Cycle Register */
            } B;
        } CVAL4C;      /* Capture Value 4 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL5;      /* Capture Value 5 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 5 Cycle Register */
            } B;
        } CVAL5C;      /* Capture Value 5 Cycle Register */
    };                                             /* End of FLEXPWM_0_SUB2_tag */ 
#define FLEXPWM_0_SUB2  (*(volatile struct FLEXPWM_0_SUB2_tag *) 0xFFE240A0UL)

/*---------------------------------------------------------------------------*/
/* Motor Control Pulse Width Modulator Sub 3 Module                          */
/*---------------------------------------------------------------------------*/
    struct FLEXPWM_0_SUB3_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } CNT;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } INIT;      /* Initial Count Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DBGEN : 1;      /* Debug Enable */
                vuint16_t WAITEN : 1;      /* WAIT Enable */
                vuint16_t INDEP : 1;      /* Independent or Complementary Pair Operation */
                vuint16_t PWM23_INIT : 1;      /* PWM23 Initial Value */
                vuint16_t PWM45_INIT : 1;      /* PWM45 Initial Value */
                vuint16_t PWMX_INIT : 1;      /* PWMX Initial Value */
                vuint16_t INIT_SEL : 2;      /* Initialization Control Select */
                vuint16_t FRCEN : 1;      /* Force Initialization Enable */
                vuint16_t FORCE : 1;      /* Force Initialization */
                vuint16_t FORCE_SEL : 3;      /* Force Source Select */
                vuint16_t RELOAD_SEL : 1;      /* Reload Source Select */
                vuint16_t CLK_SEL : 2;      /* Clock Source Select */
            } B;
        } CTRL2;      /* Control 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t LDFQ : 4;      /* Load Frequency  */
                vuint16_t HALF : 1;      /* Half Cycle Reload  */
                vuint16_t FULL : 1;      /* Full Cycle Reload  */
                vuint16_t DT : 2;      /* Deadtime */
                vuint16_t : 1;
                vuint16_t PRSC : 3;      /* Prescaler  */
                vuint16_t : 1;
                vuint16_t LMOD : 1;      /* Load Mode Select. This read/write bit selects the timing of  .. */
                vuint16_t : 1;
                vuint16_t DBLEN : 1;      /* Double Switching Enable  */
            } B;
        } CTRL1;      /* Control 1 Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL0;      /* Value Register 0 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL1;      /* Value Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL2;      /* Value Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL3;      /* Value Register 3 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL4;      /* Value Register 4 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL5;      /* Value Register 5 */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACA_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACA_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACA;      /* Fractional Delay Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACB_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACB_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACB;      /* Fractional Delay Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t PWMA_IN : 1;      /* PWMA Input */
                vuint16_t PWMB_IN : 1;      /* PWMB Input */
                vuint16_t PWMX_IN : 1;      /* PWMX Input */
                vuint16_t : 2;
                vuint16_t POLA : 1;      /* PWMA Output Polarity */
                vuint16_t POLB : 1;      /* PWMB Output Polarity */
                vuint16_t POLX : 1;      /* PWMX Output Polarity */
                vuint16_t : 2;
                vuint16_t PWMAFS : 2;      /* PWMA Fault State */
                vuint16_t PWMBFS : 2;      /* PWMB Fault State */
                vuint16_t PWMXFS : 2;      /* PWMX Fault State */
            } B;
        } OCTRL;      /* Output Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t RUF : 1;      /* Registers Updated Flag This read only flag is set when one o .. */
                vuint16_t REF : 1;      /* Reload Error Flag This read/write flag is set when a reload  .. */
                vuint16_t RF : 1;      /* Reload Flag This read/write flag is set at the beginning of  .. */
                vuint16_t : 4;
                vuint16_t CFX1 : 1;      /* Capture Flag X1 This bit is set when the word count of the C .. */
                vuint16_t CFX0 : 1;      /* Capture Flag X0 This bit is set when the word count of the C .. */
                vuint16_t CMPF : 6;      /* Compare Flags These bits are set when the submodule counter  .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t REIE : 1;      /* Reload Error Interrupt Enable */
                vuint16_t RIE : 1;      /* Reload Interrupt Enable */
                vuint16_t : 4;
                vuint16_t CX1IE : 1;      /* Capture X 1 Interrupt Enable */
                vuint16_t CX0IE : 1;      /* Capture X 0 Interrupt Enable */
                vuint16_t CMPIE : 6;      /* Compare Interrupt Enables */
            } B;
        } INTEN;      /* Interrupt Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t VALDE : 1;      /* Value Registers DMA Enable */
                vuint16_t FAND : 1;      /* FIFO Watermark AND Control */
                vuint16_t CAPTDE : 2;      /* Capture DMA Enable Source Select */
                vuint16_t : 4;
                vuint16_t CX1DE : 1;      /* Capture X1 FIFO DMA Enable */
                vuint16_t CX0DE : 1;      /* Capture X0 FIFO DMA Enable */
            } B;
        } DMAEN;      /* DMA Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 10;
                vuint16_t OUT_TRIG_EN : 6;      /* Output Trigger Enables. These bits enable the generation of  .. */
            } B;
        } TCTRL;      /* Output Trigger Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t DISX : 4;      /* PWMX Fault Disable Mask */
                vuint16_t DISB : 4;      /* PWMB Fault Disable Mask */
                vuint16_t DISA : 4;      /* PWMA Fault Disable Mask */
            } B;
        } DISMAP;      /* Fault Disable Mapping Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT0 : 11;      /* Deadtime Count Register 0 */
            } B;
        } DTCNT0;      /* Deadtime Count Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT1 : 11;      /* Deadtime Count Register 1 */
            } B;
        } DTCNT1;      /* Deadtime Count Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CA1CNT : 3;      /* Capture A1 FIFO Word Count */
                vuint16_t CA0CNT : 3;      /* Capture A0 FIFO Word Count */
                vuint16_t CFAWM : 2;      /* Capture A FIFOs Water Mark */
                vuint16_t EDGCNTA_EN : 1;      /* Edge Counter A Enable */
                vuint16_t INPSELA : 1;      /* Input Select A */
                vuint16_t EDGA1 : 2;      /* Edge A 1 */
                vuint16_t EDGA0 : 2;      /* Edge A 0 */
                vuint16_t ONESHOTA : 1;      /* One Shot Mode Aux */
                vuint16_t ARMA : 1;      /* Arm A */
            } B;
        } CAPTCTRLA;      /* Capture Control Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTA : 8;      /* Edge Counter A */
                vuint16_t EDGCMPA : 8;      /* Edge Compare A */
            } B;
        } CAPTCOMPA;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t CB1CNT : 3;      /* Capture B1 FIFO Word Count */
                vuint16_t CB0CNT : 3;      /* Capture B0 FIFO Word Count */
                vuint16_t CFBWM : 2;      /* Capture B FIFOs Water Mark */
                vuint16_t EDGCNTB_EN : 1;      /* Edge Counter B Enable */
                vuint16_t INPSELB : 1;      /* Input Select B */
                vuint16_t EDGB1 : 2;      /* Edge B 1 */
                vuint16_t EDGB0 : 2;      /* Edge B 0 */
                vuint16_t ONESHOTB : 1;      /* One Shot Mode Aux */
                vuint16_t ARMB : 1;      /* Arm B */
            } B;
        } CAPTCTRLB;      /* Capture Control Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTB : 8;      /* Edge Counter B */
                vuint16_t EDGCMPB : 8;      /* Edge Compare B */
            } B;
        } CAPTCOMPB;      /* Capture Compare Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t CX1CNT : 3;      /* Capture X1 FIFO Word Count */
                vuint16_t CX0CNT : 3;      /* Capture X0 FIFO Word Count */
                vuint16_t CFXWM : 2;      /* Capture X FIFOs Water Mark */
                vuint16_t EDGCNTX_EN : 1;      /* Edge Counter X Enable */
                vuint16_t INPSELX : 1;      /* Input Select X */
                vuint16_t EDGX1 : 2;      /* Edge X 1 */
                vuint16_t EDGX0 : 2;      /* Edge X 0 */
                vuint16_t ONESHOTX : 1;      /* One Shot Mode Aux */
                vuint16_t ARMX : 1;      /* Arm X */
            } B;
        } CAPTCTRLX;      /* Capture Control Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTX : 8;      /* Edge Counter X */
                vuint16_t EDGCMPX : 8;      /* Edge Compare X */
            } B;
        } CAPTCOMPX;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL0;      /* Capture Value 0 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL0CYC : 3;      /* Capture Value 0 Cycle Register */
            } B;
        } CVAL0C;      /* Capture Value 0 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL1;      /* Capture Value 1 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL1CYC : 3;      /* Capture Value 1 Cycle Register */
            } B;
        } CVAL1C;      /* Capture Value 1 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL2;      /* Capture Value 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 2 Cycle Register */
            } B;
        } CVAL2C;      /* Capture Value 2 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL3;      /* Capture Value 3 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 3 Cycle Register */
            } B;
        } CVAL3C;      /* Capture Value 3 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL4;      /* Capture Value 4 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 4 Cycle Register */
            } B;
        } CVAL4C;      /* Capture Value 4 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL5;      /* Capture Value 5 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 5 Cycle Register */
            } B;
        } CVAL5C;      /* Capture Value 5 Cycle Register */
    };                                             /* End of FLEXPWM_0_SUB3_tag */ 
#define FLEXPWM_0_SUB3  (*(volatile struct FLEXPWM_0_SUB3_tag *) 0xFFE240F0UL)

/*---------------------------------------------------------------------------*/
/* Motor Control Pulse Width Modulator Module 1                              */
/*---------------------------------------------------------------------------*/
    struct FLEXPWM_1_tag {

        int8_t Reserved124[320];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t PWMA_EN : 4;      /* PWMA Output Enables. These bits enable the PWMA outputs of e .. */
                vuint16_t PWMB_EN : 4;      /* PWMB Output Enables. These bits enable the PWMB outputs of e .. */
                vuint16_t PWMX_EN : 4;      /* PWMX Output Enables. These bits enable the PWMX outputs of e .. */
            } B;
        } OUTEN;      /* Output Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t MASKA : 1;      /* PWMA Masks. These bits mask the PWMA outputs of each submodu .. */
                vuint16_t : 3;
                vuint16_t MASKB : 1;      /* PWMB Masks. These bits mask the PWMB outputs of each submodu .. */
                vuint16_t : 3;
                vuint16_t MASKX : 1;      /* PWMX Masks. These bits mask the PWMX outputs of each submodu .. */
            } B;
        } MASK;      /* Output Mask Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 8;
                vuint16_t OUT23_3 : 1;      /* Software Controlled Output 23_3 This bit is only used when S .. */
                vuint16_t OUT45_3 : 1;      /* Software Controlled Output 45_3 This bit is only used when S .. */
                vuint16_t OUT23_2 : 1;      /* Software Controlled Output 23_2 This bit is only used when S .. */
                vuint16_t OUT45_2 : 1;      /* Software Controlled Output 45_2 This bit is only used when S .. */
                vuint16_t OUT23_1 : 1;      /* Software Controlled Output 23_1 This bit is only used when S .. */
                vuint16_t OUT45_1 : 1;      /* Software Controlled Output 45_1 This bit is only used when S .. */
                vuint16_t OUT23_0 : 1;      /* Software Controlled Output 23_0 This bit is only used when S .. */
                vuint16_t OUT45_0 : 1;      /* Software Controlled Output 45_0 This bit is only used when S .. */
            } B;
        } SWCOUT;      /* Software Controlled Output Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t SEL23_3 : 2;      /* PWM23_3 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL45_3 : 2;      /* PWM45_3 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL23_2 : 2;      /* PWM23_2 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL45_2 : 2;      /* PWM45_2 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL23_1 : 2;      /* PWM23_1 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL45_1 : 2;      /* PWM45_1 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL23_0 : 2;      /* PWM23_0 Control Select. This field selects possible over-rid .. */
                vuint16_t SEL45_0 : 2;      /* PWM45_0 Control Select. This field selects possible over-rid .. */
            } B;
        } DTSRCSEL;      /* Deadtime Source Select Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t IPOL : 4;      /* Current Polarity. This buffered read/write bit is used to se .. */
                vuint16_t RUN : 4;      /* Run. This read/write bit enables the clocks to the PWM gener .. */
                vuint16_t CLDOK : 4;      /* Clear Load Okay. This write only bit is used to clear the LD .. */
                vuint16_t LDOK : 4;      /* Load Okay. This read/set bit loads the PRSC bits of CTRL and .. */
            } B;
        } MCTRL;      /* Master Control Register */

        int8_t Reserved125[2];

        union {
            vuint16_t R;
            struct {
                vuint16_t FLVL : 4;      /* Fault Level These read/write bits select the active logic le .. */
                vuint16_t FAUTO : 4;      /* Automatic Fault Clearing These read/write bits select automa .. */
                vuint16_t FSAFE : 4;      /* Fault Safety Mode These read/write bits select the safety mo .. */
                vuint16_t FIE : 4;      /* Fault Interrupt Enables This read/write bit enables CPU inte .. */
            } B;
        } FCTRL;      /* Fault Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 3;
                vuint16_t FTEST : 1;      /* Fault Test. These read/write bit is used to simulate a fault .. */
                vuint16_t FFPIN : 4;      /* Filtered Fault Pins. These read-only bits reflect the curren .. */
                vuint16_t FFULL : 4;      /* Full Cycle. These read/write bits are used to control the ti .. */
                vuint16_t FFLAG : 4;      /* Fault Flags. These read-only flag is set within two CPU cycl .. */
            } B;
        } FSTS;      /* Fault Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t GSTR : 1;      /* Fault Glitch Stretch Enable. This bit is used to enable the  .. */
                vuint16_t : 4;
                vuint16_t FILT_CNT : 3;      /* Fault Filter Count. These bits represent the number of conse .. */
                vuint16_t FILT_PER : 8;      /* Fault Filter Period. These bits represent the sampling perio .. */
            } B;
        } FFILT;      /* Fault Filter Register */
    };                                             /* End of FLEXPWM_1_tag */ 
#define FLEXPWM_1  (*(volatile struct FLEXPWM_1_tag *)    0xFFE28000UL)

/*---------------------------------------------------------------------------*/
/* Motor Control Pulse Width Modulator Sub 0 Module                          */
/*---------------------------------------------------------------------------*/
    struct FLEXPWM_1_SUB0_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } CNT;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } INIT;      /* Initial Count Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DBGEN : 1;      /* Debug Enable */
                vuint16_t WAITEN : 1;      /* WAIT Enable */
                vuint16_t INDEP : 1;      /* Independent or Complementary Pair Operation */
                vuint16_t PWM23_INIT : 1;      /* PWM23 Initial Value */
                vuint16_t PWM45_INIT : 1;      /* PWM45 Initial Value */
                vuint16_t PWMX_INIT : 1;      /* PWMX Initial Value */
                vuint16_t INIT_SEL : 2;      /* Initialization Control Select */
                vuint16_t FRCEN : 1;      /* Force Initialization Enable */
                vuint16_t FORCE : 1;      /* Force Initialization */
                vuint16_t FORCE_SEL : 3;      /* Force Source Select */
                vuint16_t RELOAD_SEL : 1;      /* Reload Source Select */
                vuint16_t CLK_SEL : 2;      /* Clock Source Select */
            } B;
        } CTRL2;      /* Control 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t LDFQ : 4;      /* Load Frequency  */
                vuint16_t HALF : 1;      /* Half Cycle Reload  */
                vuint16_t FULL : 1;      /* Full Cycle Reload  */
                vuint16_t DT : 2;      /* Deadtime */
                vuint16_t : 1;
                vuint16_t PRSC : 3;      /* Prescaler  */
                vuint16_t : 1;
                vuint16_t LMOD : 1;      /* Load Mode Select. This read/write bit selects the timing of  .. */
                vuint16_t : 1;
                vuint16_t DBLEN : 1;      /* Double Switching Enable  */
            } B;
        } CTRL1;      /* Control 1 Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL0;      /* Value Register 0 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL1;      /* Value Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL2;      /* Value Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL3;      /* Value Register 3 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL4;      /* Value Register 4 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL5;      /* Value Register 5 */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACA_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACA_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACA;      /* Fractional Delay Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACB_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACB_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACB;      /* Fractional Delay Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t PWMA_IN : 1;      /* PWMA Input */
                vuint16_t PWMB_IN : 1;      /* PWMB Input */
                vuint16_t PWMX_IN : 1;      /* PWMX Input */
                vuint16_t : 2;
                vuint16_t POLA : 1;      /* PWMA Output Polarity */
                vuint16_t POLB : 1;      /* PWMB Output Polarity */
                vuint16_t POLX : 1;      /* PWMX Output Polarity */
                vuint16_t : 2;
                vuint16_t PWMAFS : 2;      /* PWMA Fault State */
                vuint16_t PWMBFS : 2;      /* PWMB Fault State */
                vuint16_t PWMXFS : 2;      /* PWMX Fault State */
            } B;
        } OCTRL;      /* Output Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t RUF : 1;      /* Registers Updated Flag This read only flag is set when one o .. */
                vuint16_t REF : 1;      /* Reload Error Flag This read/write flag is set when a reload  .. */
                vuint16_t RF : 1;      /* Reload Flag This read/write flag is set at the beginning of  .. */
                vuint16_t : 4;
                vuint16_t CFX1 : 1;      /* Capture Flag X1 This bit is set when the word count of the C .. */
                vuint16_t CFX0 : 1;      /* Capture Flag X0 This bit is set when the word count of the C .. */
                vuint16_t CMPF : 6;      /* Compare Flags These bits are set when the submodule counter  .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t REIE : 1;      /* Reload Error Interrupt Enable */
                vuint16_t RIE : 1;      /* Reload Interrupt Enable */
                vuint16_t : 4;
                vuint16_t CX1IE : 1;      /* Capture X 1 Interrupt Enable */
                vuint16_t CX0IE : 1;      /* Capture X 0 Interrupt Enable */
                vuint16_t CMPIE : 6;      /* Compare Interrupt Enables */
            } B;
        } INTEN;      /* Interrupt Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t VALDE : 1;      /* Value Registers DMA Enable */
                vuint16_t FAND : 1;      /* FIFO Watermark AND Control */
                vuint16_t CAPTDE : 2;      /* Capture DMA Enable Source Select */
                vuint16_t : 4;
                vuint16_t CX1DE : 1;      /* Capture X1 FIFO DMA Enable */
                vuint16_t CX0DE : 1;      /* Capture X0 FIFO DMA Enable */
            } B;
        } DMAEN;      /* DMA Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 10;
                vuint16_t OUT_TRIG_EN : 6;      /* Output Trigger Enables. These bits enable the generation of  .. */
            } B;
        } TCTRL;      /* Output Trigger Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t DISX : 4;      /* PWMX Fault Disable Mask */
                vuint16_t DISB : 4;      /* PWMB Fault Disable Mask */
                vuint16_t DISA : 4;      /* PWMA Fault Disable Mask */
            } B;
        } DISMAP;      /* Fault Disable Mapping Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT0 : 11;      /* Deadtime Count Register 0 */
            } B;
        } DTCNT0;      /* Deadtime Count Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT1 : 11;      /* Deadtime Count Register 1 */
            } B;
        } DTCNT1;      /* Deadtime Count Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CA1CNT : 3;      /* Capture A1 FIFO Word Count */
                vuint16_t CA0CNT : 3;      /* Capture A0 FIFO Word Count */
                vuint16_t CFAWM : 2;      /* Capture A FIFOs Water Mark */
                vuint16_t EDGCNTA_EN : 1;      /* Edge Counter A Enable */
                vuint16_t INPSELA : 1;      /* Input Select A */
                vuint16_t EDGA1 : 2;      /* Edge A 1 */
                vuint16_t EDGA0 : 2;      /* Edge A 0 */
                vuint16_t ONESHOTA : 1;      /* One Shot Mode Aux */
                vuint16_t ARMA : 1;      /* Arm A */
            } B;
        } CAPTCTRLA;      /* Capture Control Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTA : 8;      /* Edge Counter A */
                vuint16_t EDGCMPA : 8;      /* Edge Compare A */
            } B;
        } CAPTCOMPA;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t CB1CNT : 3;      /* Capture B1 FIFO Word Count */
                vuint16_t CB0CNT : 3;      /* Capture B0 FIFO Word Count */
                vuint16_t CFBWM : 2;      /* Capture B FIFOs Water Mark */
                vuint16_t EDGCNTB_EN : 1;      /* Edge Counter B Enable */
                vuint16_t INPSELB : 1;      /* Input Select B */
                vuint16_t EDGB1 : 2;      /* Edge B 1 */
                vuint16_t EDGB0 : 2;      /* Edge B 0 */
                vuint16_t ONESHOTB : 1;      /* One Shot Mode Aux */
                vuint16_t ARMB : 1;      /* Arm B */
            } B;
        } CAPTCTRLB;      /* Capture Control Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTB : 8;      /* Edge Counter B */
                vuint16_t EDGCMPB : 8;      /* Edge Compare B */
            } B;
        } CAPTCOMPB;      /* Capture Compare Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t CX1CNT : 3;      /* Capture X1 FIFO Word Count */
                vuint16_t CX0CNT : 3;      /* Capture X0 FIFO Word Count */
                vuint16_t CFXWM : 2;      /* Capture X FIFOs Water Mark */
                vuint16_t EDGCNTX_EN : 1;      /* Edge Counter X Enable */
                vuint16_t INPSELX : 1;      /* Input Select X */
                vuint16_t EDGX1 : 2;      /* Edge X 1 */
                vuint16_t EDGX0 : 2;      /* Edge X 0 */
                vuint16_t ONESHOTX : 1;      /* One Shot Mode Aux */
                vuint16_t ARMX : 1;      /* Arm X */
            } B;
        } CAPTCTRLX;      /* Capture Control Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTX : 8;      /* Edge Counter X */
                vuint16_t EDGCMPX : 8;      /* Edge Compare X */
            } B;
        } CAPTCOMPX;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL0;      /* Capture Value 0 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL0CYC : 3;      /* Capture Value 0 Cycle Register */
            } B;
        } CVAL0C;      /* Capture Value 0 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL1;      /* Capture Value 1 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL1CYC : 3;      /* Capture Value 1 Cycle Register */
            } B;
        } CVAL1C;      /* Capture Value 1 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL2;      /* Capture Value 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 2 Cycle Register */
            } B;
        } CVAL2C;      /* Capture Value 2 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL3;      /* Capture Value 3 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 3 Cycle Register */
            } B;
        } CVAL3C;      /* Capture Value 3 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL4;      /* Capture Value 4 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 4 Cycle Register */
            } B;
        } CVAL4C;      /* Capture Value 4 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL5;      /* Capture Value 5 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 5 Cycle Register */
            } B;
        } CVAL5C;      /* Capture Value 5 Cycle Register */
    };                                             /* End of FLEXPWM_1_SUB0_tag */ 
#define FLEXPWM_1_SUB0  (*(volatile struct FLEXPWM_1_SUB0_tag *) 0xFFE28000UL)

/*---------------------------------------------------------------------------*/
/* Motor Control Pulse Width Modulator Sub 1 Module                          */
/*---------------------------------------------------------------------------*/
    struct FLEXPWM_1_SUB1_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } CNT;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } INIT;      /* Initial Count Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DBGEN : 1;      /* Debug Enable */
                vuint16_t WAITEN : 1;      /* WAIT Enable */
                vuint16_t INDEP : 1;      /* Independent or Complementary Pair Operation */
                vuint16_t PWM23_INIT : 1;      /* PWM23 Initial Value */
                vuint16_t PWM45_INIT : 1;      /* PWM45 Initial Value */
                vuint16_t PWMX_INIT : 1;      /* PWMX Initial Value */
                vuint16_t INIT_SEL : 2;      /* Initialization Control Select */
                vuint16_t FRCEN : 1;      /* Force Initialization Enable */
                vuint16_t FORCE : 1;      /* Force Initialization */
                vuint16_t FORCE_SEL : 3;      /* Force Source Select */
                vuint16_t RELOAD_SEL : 1;      /* Reload Source Select */
                vuint16_t CLK_SEL : 2;      /* Clock Source Select */
            } B;
        } CTRL2;      /* Control 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t LDFQ : 4;      /* Load Frequency  */
                vuint16_t HALF : 1;      /* Half Cycle Reload  */
                vuint16_t FULL : 1;      /* Full Cycle Reload  */
                vuint16_t DT : 2;      /* Deadtime */
                vuint16_t : 1;
                vuint16_t PRSC : 3;      /* Prescaler  */
                vuint16_t : 1;
                vuint16_t LMOD : 1;      /* Load Mode Select. This read/write bit selects the timing of  .. */
                vuint16_t : 1;
                vuint16_t DBLEN : 1;      /* Double Switching Enable  */
            } B;
        } CTRL1;      /* Control 1 Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL0;      /* Value Register 0 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL1;      /* Value Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL2;      /* Value Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL3;      /* Value Register 3 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL4;      /* Value Register 4 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL5;      /* Value Register 5 */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACA_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACA_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACA;      /* Fractional Delay Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACB_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACB_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACB;      /* Fractional Delay Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t PWMA_IN : 1;      /* PWMA Input */
                vuint16_t PWMB_IN : 1;      /* PWMB Input */
                vuint16_t PWMX_IN : 1;      /* PWMX Input */
                vuint16_t : 2;
                vuint16_t POLA : 1;      /* PWMA Output Polarity */
                vuint16_t POLB : 1;      /* PWMB Output Polarity */
                vuint16_t POLX : 1;      /* PWMX Output Polarity */
                vuint16_t : 2;
                vuint16_t PWMAFS : 2;      /* PWMA Fault State */
                vuint16_t PWMBFS : 2;      /* PWMB Fault State */
                vuint16_t PWMXFS : 2;      /* PWMX Fault State */
            } B;
        } OCTRL;      /* Output Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t RUF : 1;      /* Registers Updated Flag This read only flag is set when one o .. */
                vuint16_t REF : 1;      /* Reload Error Flag This read/write flag is set when a reload  .. */
                vuint16_t RF : 1;      /* Reload Flag This read/write flag is set at the beginning of  .. */
                vuint16_t : 4;
                vuint16_t CFX1 : 1;      /* Capture Flag X1 This bit is set when the word count of the C .. */
                vuint16_t CFX0 : 1;      /* Capture Flag X0 This bit is set when the word count of the C .. */
                vuint16_t CMPF : 6;      /* Compare Flags These bits are set when the submodule counter  .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t REIE : 1;      /* Reload Error Interrupt Enable */
                vuint16_t RIE : 1;      /* Reload Interrupt Enable */
                vuint16_t : 4;
                vuint16_t CX1IE : 1;      /* Capture X 1 Interrupt Enable */
                vuint16_t CX0IE : 1;      /* Capture X 0 Interrupt Enable */
                vuint16_t CMPIE : 6;      /* Compare Interrupt Enables */
            } B;
        } INTEN;      /* Interrupt Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t VALDE : 1;      /* Value Registers DMA Enable */
                vuint16_t FAND : 1;      /* FIFO Watermark AND Control */
                vuint16_t CAPTDE : 2;      /* Capture DMA Enable Source Select */
                vuint16_t : 4;
                vuint16_t CX1DE : 1;      /* Capture X1 FIFO DMA Enable */
                vuint16_t CX0DE : 1;      /* Capture X0 FIFO DMA Enable */
            } B;
        } DMAEN;      /* DMA Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 10;
                vuint16_t OUT_TRIG_EN : 6;      /* Output Trigger Enables. These bits enable the generation of  .. */
            } B;
        } TCTRL;      /* Output Trigger Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t DISX : 4;      /* PWMX Fault Disable Mask */
                vuint16_t DISB : 4;      /* PWMB Fault Disable Mask */
                vuint16_t DISA : 4;      /* PWMA Fault Disable Mask */
            } B;
        } DISMAP;      /* Fault Disable Mapping Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT0 : 11;      /* Deadtime Count Register 0 */
            } B;
        } DTCNT0;      /* Deadtime Count Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT1 : 11;      /* Deadtime Count Register 1 */
            } B;
        } DTCNT1;      /* Deadtime Count Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CA1CNT : 3;      /* Capture A1 FIFO Word Count */
                vuint16_t CA0CNT : 3;      /* Capture A0 FIFO Word Count */
                vuint16_t CFAWM : 2;      /* Capture A FIFOs Water Mark */
                vuint16_t EDGCNTA_EN : 1;      /* Edge Counter A Enable */
                vuint16_t INPSELA : 1;      /* Input Select A */
                vuint16_t EDGA1 : 2;      /* Edge A 1 */
                vuint16_t EDGA0 : 2;      /* Edge A 0 */
                vuint16_t ONESHOTA : 1;      /* One Shot Mode Aux */
                vuint16_t ARMA : 1;      /* Arm A */
            } B;
        } CAPTCTRLA;      /* Capture Control Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTA : 8;      /* Edge Counter A */
                vuint16_t EDGCMPA : 8;      /* Edge Compare A */
            } B;
        } CAPTCOMPA;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t CB1CNT : 3;      /* Capture B1 FIFO Word Count */
                vuint16_t CB0CNT : 3;      /* Capture B0 FIFO Word Count */
                vuint16_t CFBWM : 2;      /* Capture B FIFOs Water Mark */
                vuint16_t EDGCNTB_EN : 1;      /* Edge Counter B Enable */
                vuint16_t INPSELB : 1;      /* Input Select B */
                vuint16_t EDGB1 : 2;      /* Edge B 1 */
                vuint16_t EDGB0 : 2;      /* Edge B 0 */
                vuint16_t ONESHOTB : 1;      /* One Shot Mode Aux */
                vuint16_t ARMB : 1;      /* Arm B */
            } B;
        } CAPTCTRLB;      /* Capture Control Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTB : 8;      /* Edge Counter B */
                vuint16_t EDGCMPB : 8;      /* Edge Compare B */
            } B;
        } CAPTCOMPB;      /* Capture Compare Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t CX1CNT : 3;      /* Capture X1 FIFO Word Count */
                vuint16_t CX0CNT : 3;      /* Capture X0 FIFO Word Count */
                vuint16_t CFXWM : 2;      /* Capture X FIFOs Water Mark */
                vuint16_t EDGCNTX_EN : 1;      /* Edge Counter X Enable */
                vuint16_t INPSELX : 1;      /* Input Select X */
                vuint16_t EDGX1 : 2;      /* Edge X 1 */
                vuint16_t EDGX0 : 2;      /* Edge X 0 */
                vuint16_t ONESHOTX : 1;      /* One Shot Mode Aux */
                vuint16_t ARMX : 1;      /* Arm X */
            } B;
        } CAPTCTRLX;      /* Capture Control Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTX : 8;      /* Edge Counter X */
                vuint16_t EDGCMPX : 8;      /* Edge Compare X */
            } B;
        } CAPTCOMPX;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL0;      /* Capture Value 0 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL0CYC : 3;      /* Capture Value 0 Cycle Register */
            } B;
        } CVAL0C;      /* Capture Value 0 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL1;      /* Capture Value 1 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL1CYC : 3;      /* Capture Value 1 Cycle Register */
            } B;
        } CVAL1C;      /* Capture Value 1 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL2;      /* Capture Value 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 2 Cycle Register */
            } B;
        } CVAL2C;      /* Capture Value 2 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL3;      /* Capture Value 3 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 3 Cycle Register */
            } B;
        } CVAL3C;      /* Capture Value 3 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL4;      /* Capture Value 4 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 4 Cycle Register */
            } B;
        } CVAL4C;      /* Capture Value 4 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL5;      /* Capture Value 5 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 5 Cycle Register */
            } B;
        } CVAL5C;      /* Capture Value 5 Cycle Register */
    };                                             /* End of FLEXPWM_1_SUB1_tag */ 
#define FLEXPWM_1_SUB1  (*(volatile struct FLEXPWM_1_SUB1_tag *) 0xFFE28050UL)

/*---------------------------------------------------------------------------*/
/* Motor Control Pulse Width Modulator Sub 2 Module                          */
/*---------------------------------------------------------------------------*/
    struct FLEXPWM_1_SUB2_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } CNT;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } INIT;      /* Initial Count Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DBGEN : 1;      /* Debug Enable */
                vuint16_t WAITEN : 1;      /* WAIT Enable */
                vuint16_t INDEP : 1;      /* Independent or Complementary Pair Operation */
                vuint16_t PWM23_INIT : 1;      /* PWM23 Initial Value */
                vuint16_t PWM45_INIT : 1;      /* PWM45 Initial Value */
                vuint16_t PWMX_INIT : 1;      /* PWMX Initial Value */
                vuint16_t INIT_SEL : 2;      /* Initialization Control Select */
                vuint16_t FRCEN : 1;      /* Force Initialization Enable */
                vuint16_t FORCE : 1;      /* Force Initialization */
                vuint16_t FORCE_SEL : 3;      /* Force Source Select */
                vuint16_t RELOAD_SEL : 1;      /* Reload Source Select */
                vuint16_t CLK_SEL : 2;      /* Clock Source Select */
            } B;
        } CTRL2;      /* Control 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t LDFQ : 4;      /* Load Frequency  */
                vuint16_t HALF : 1;      /* Half Cycle Reload  */
                vuint16_t FULL : 1;      /* Full Cycle Reload  */
                vuint16_t DT : 2;      /* Deadtime */
                vuint16_t : 1;
                vuint16_t PRSC : 3;      /* Prescaler  */
                vuint16_t : 1;
                vuint16_t LMOD : 1;      /* Load Mode Select. This read/write bit selects the timing of  .. */
                vuint16_t : 1;
                vuint16_t DBLEN : 1;      /* Double Switching Enable  */
            } B;
        } CTRL1;      /* Control 1 Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL0;      /* Value Register 0 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL1;      /* Value Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL2;      /* Value Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL3;      /* Value Register 3 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL4;      /* Value Register 4 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL5;      /* Value Register 5 */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACA_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACA_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACA;      /* Fractional Delay Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACB_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACB_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACB;      /* Fractional Delay Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t PWMA_IN : 1;      /* PWMA Input */
                vuint16_t PWMB_IN : 1;      /* PWMB Input */
                vuint16_t PWMX_IN : 1;      /* PWMX Input */
                vuint16_t : 2;
                vuint16_t POLA : 1;      /* PWMA Output Polarity */
                vuint16_t POLB : 1;      /* PWMB Output Polarity */
                vuint16_t POLX : 1;      /* PWMX Output Polarity */
                vuint16_t : 2;
                vuint16_t PWMAFS : 2;      /* PWMA Fault State */
                vuint16_t PWMBFS : 2;      /* PWMB Fault State */
                vuint16_t PWMXFS : 2;      /* PWMX Fault State */
            } B;
        } OCTRL;      /* Output Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t RUF : 1;      /* Registers Updated Flag This read only flag is set when one o .. */
                vuint16_t REF : 1;      /* Reload Error Flag This read/write flag is set when a reload  .. */
                vuint16_t RF : 1;      /* Reload Flag This read/write flag is set at the beginning of  .. */
                vuint16_t : 4;
                vuint16_t CFX1 : 1;      /* Capture Flag X1 This bit is set when the word count of the C .. */
                vuint16_t CFX0 : 1;      /* Capture Flag X0 This bit is set when the word count of the C .. */
                vuint16_t CMPF : 6;      /* Compare Flags These bits are set when the submodule counter  .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t REIE : 1;      /* Reload Error Interrupt Enable */
                vuint16_t RIE : 1;      /* Reload Interrupt Enable */
                vuint16_t : 4;
                vuint16_t CX1IE : 1;      /* Capture X 1 Interrupt Enable */
                vuint16_t CX0IE : 1;      /* Capture X 0 Interrupt Enable */
                vuint16_t CMPIE : 6;      /* Compare Interrupt Enables */
            } B;
        } INTEN;      /* Interrupt Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t VALDE : 1;      /* Value Registers DMA Enable */
                vuint16_t FAND : 1;      /* FIFO Watermark AND Control */
                vuint16_t CAPTDE : 2;      /* Capture DMA Enable Source Select */
                vuint16_t : 4;
                vuint16_t CX1DE : 1;      /* Capture X1 FIFO DMA Enable */
                vuint16_t CX0DE : 1;      /* Capture X0 FIFO DMA Enable */
            } B;
        } DMAEN;      /* DMA Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 10;
                vuint16_t OUT_TRIG_EN : 6;      /* Output Trigger Enables. These bits enable the generation of  .. */
            } B;
        } TCTRL;      /* Output Trigger Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t DISX : 4;      /* PWMX Fault Disable Mask */
                vuint16_t DISB : 4;      /* PWMB Fault Disable Mask */
                vuint16_t DISA : 4;      /* PWMA Fault Disable Mask */
            } B;
        } DISMAP;      /* Fault Disable Mapping Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT0 : 11;      /* Deadtime Count Register 0 */
            } B;
        } DTCNT0;      /* Deadtime Count Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT1 : 11;      /* Deadtime Count Register 1 */
            } B;
        } DTCNT1;      /* Deadtime Count Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CA1CNT : 3;      /* Capture A1 FIFO Word Count */
                vuint16_t CA0CNT : 3;      /* Capture A0 FIFO Word Count */
                vuint16_t CFAWM : 2;      /* Capture A FIFOs Water Mark */
                vuint16_t EDGCNTA_EN : 1;      /* Edge Counter A Enable */
                vuint16_t INPSELA : 1;      /* Input Select A */
                vuint16_t EDGA1 : 2;      /* Edge A 1 */
                vuint16_t EDGA0 : 2;      /* Edge A 0 */
                vuint16_t ONESHOTA : 1;      /* One Shot Mode Aux */
                vuint16_t ARMA : 1;      /* Arm A */
            } B;
        } CAPTCTRLA;      /* Capture Control Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTA : 8;      /* Edge Counter A */
                vuint16_t EDGCMPA : 8;      /* Edge Compare A */
            } B;
        } CAPTCOMPA;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t CB1CNT : 3;      /* Capture B1 FIFO Word Count */
                vuint16_t CB0CNT : 3;      /* Capture B0 FIFO Word Count */
                vuint16_t CFBWM : 2;      /* Capture B FIFOs Water Mark */
                vuint16_t EDGCNTB_EN : 1;      /* Edge Counter B Enable */
                vuint16_t INPSELB : 1;      /* Input Select B */
                vuint16_t EDGB1 : 2;      /* Edge B 1 */
                vuint16_t EDGB0 : 2;      /* Edge B 0 */
                vuint16_t ONESHOTB : 1;      /* One Shot Mode Aux */
                vuint16_t ARMB : 1;      /* Arm B */
            } B;
        } CAPTCTRLB;      /* Capture Control Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTB : 8;      /* Edge Counter B */
                vuint16_t EDGCMPB : 8;      /* Edge Compare B */
            } B;
        } CAPTCOMPB;      /* Capture Compare Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t CX1CNT : 3;      /* Capture X1 FIFO Word Count */
                vuint16_t CX0CNT : 3;      /* Capture X0 FIFO Word Count */
                vuint16_t CFXWM : 2;      /* Capture X FIFOs Water Mark */
                vuint16_t EDGCNTX_EN : 1;      /* Edge Counter X Enable */
                vuint16_t INPSELX : 1;      /* Input Select X */
                vuint16_t EDGX1 : 2;      /* Edge X 1 */
                vuint16_t EDGX0 : 2;      /* Edge X 0 */
                vuint16_t ONESHOTX : 1;      /* One Shot Mode Aux */
                vuint16_t ARMX : 1;      /* Arm X */
            } B;
        } CAPTCTRLX;      /* Capture Control Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTX : 8;      /* Edge Counter X */
                vuint16_t EDGCMPX : 8;      /* Edge Compare X */
            } B;
        } CAPTCOMPX;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL0;      /* Capture Value 0 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL0CYC : 3;      /* Capture Value 0 Cycle Register */
            } B;
        } CVAL0C;      /* Capture Value 0 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL1;      /* Capture Value 1 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL1CYC : 3;      /* Capture Value 1 Cycle Register */
            } B;
        } CVAL1C;      /* Capture Value 1 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL2;      /* Capture Value 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 2 Cycle Register */
            } B;
        } CVAL2C;      /* Capture Value 2 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL3;      /* Capture Value 3 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 3 Cycle Register */
            } B;
        } CVAL3C;      /* Capture Value 3 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL4;      /* Capture Value 4 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 4 Cycle Register */
            } B;
        } CVAL4C;      /* Capture Value 4 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL5;      /* Capture Value 5 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 5 Cycle Register */
            } B;
        } CVAL5C;      /* Capture Value 5 Cycle Register */
    };                                             /* End of FLEXPWM_1_SUB2_tag */ 
#define FLEXPWM_1_SUB2  (*(volatile struct FLEXPWM_1_SUB2_tag *) 0xFFE280A0UL)

/*---------------------------------------------------------------------------*/
/* Motor Control Pulse Width Modulator Sub 3 Module                          */
/*---------------------------------------------------------------------------*/
    struct FLEXPWM_1_SUB3_tag {

        union {
            vuint16_t R;
            struct {
            } B;
        } CNT;      /* Counter Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } INIT;      /* Initial Count Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DBGEN : 1;      /* Debug Enable */
                vuint16_t WAITEN : 1;      /* WAIT Enable */
                vuint16_t INDEP : 1;      /* Independent or Complementary Pair Operation */
                vuint16_t PWM23_INIT : 1;      /* PWM23 Initial Value */
                vuint16_t PWM45_INIT : 1;      /* PWM45 Initial Value */
                vuint16_t PWMX_INIT : 1;      /* PWMX Initial Value */
                vuint16_t INIT_SEL : 2;      /* Initialization Control Select */
                vuint16_t FRCEN : 1;      /* Force Initialization Enable */
                vuint16_t FORCE : 1;      /* Force Initialization */
                vuint16_t FORCE_SEL : 3;      /* Force Source Select */
                vuint16_t RELOAD_SEL : 1;      /* Reload Source Select */
                vuint16_t CLK_SEL : 2;      /* Clock Source Select */
            } B;
        } CTRL2;      /* Control 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t LDFQ : 4;      /* Load Frequency  */
                vuint16_t HALF : 1;      /* Half Cycle Reload  */
                vuint16_t FULL : 1;      /* Full Cycle Reload  */
                vuint16_t DT : 2;      /* Deadtime */
                vuint16_t : 1;
                vuint16_t PRSC : 3;      /* Prescaler  */
                vuint16_t : 1;
                vuint16_t LMOD : 1;      /* Load Mode Select. This read/write bit selects the timing of  .. */
                vuint16_t : 1;
                vuint16_t DBLEN : 1;      /* Double Switching Enable  */
            } B;
        } CTRL1;      /* Control 1 Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL0;      /* Value Register 0 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL1;      /* Value Register 1 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL2;      /* Value Register 2 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL3;      /* Value Register 3 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL4;      /* Value Register 4 */

        union {
            vuint16_t R;
            struct {
            } B;
        } VAL5;      /* Value Register 5 */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACA_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACA_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACA;      /* Fractional Delay Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRACB_EN : 1;      /* Fractional Delay Enables. This bit enables use of the fracti .. */
                vuint16_t : 10;
                vuint16_t FRACB_DLY : 5;      /* Fractional Delay Values. These bits control the fractional c .. */
            } B;
        } FRACB;      /* Fractional Delay Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t PWMA_IN : 1;      /* PWMA Input */
                vuint16_t PWMB_IN : 1;      /* PWMB Input */
                vuint16_t PWMX_IN : 1;      /* PWMX Input */
                vuint16_t : 2;
                vuint16_t POLA : 1;      /* PWMA Output Polarity */
                vuint16_t POLB : 1;      /* PWMB Output Polarity */
                vuint16_t POLX : 1;      /* PWMX Output Polarity */
                vuint16_t : 2;
                vuint16_t PWMAFS : 2;      /* PWMA Fault State */
                vuint16_t PWMBFS : 2;      /* PWMB Fault State */
                vuint16_t PWMXFS : 2;      /* PWMX Fault State */
            } B;
        } OCTRL;      /* Output Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t RUF : 1;      /* Registers Updated Flag This read only flag is set when one o .. */
                vuint16_t REF : 1;      /* Reload Error Flag This read/write flag is set when a reload  .. */
                vuint16_t RF : 1;      /* Reload Flag This read/write flag is set at the beginning of  .. */
                vuint16_t : 4;
                vuint16_t CFX1 : 1;      /* Capture Flag X1 This bit is set when the word count of the C .. */
                vuint16_t CFX0 : 1;      /* Capture Flag X0 This bit is set when the word count of the C .. */
                vuint16_t CMPF : 6;      /* Compare Flags These bits are set when the submodule counter  .. */
            } B;
        } STS;      /* Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t REIE : 1;      /* Reload Error Interrupt Enable */
                vuint16_t RIE : 1;      /* Reload Interrupt Enable */
                vuint16_t : 4;
                vuint16_t CX1IE : 1;      /* Capture X 1 Interrupt Enable */
                vuint16_t CX0IE : 1;      /* Capture X 0 Interrupt Enable */
                vuint16_t CMPIE : 6;      /* Compare Interrupt Enables */
            } B;
        } INTEN;      /* Interrupt Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t VALDE : 1;      /* Value Registers DMA Enable */
                vuint16_t FAND : 1;      /* FIFO Watermark AND Control */
                vuint16_t CAPTDE : 2;      /* Capture DMA Enable Source Select */
                vuint16_t : 4;
                vuint16_t CX1DE : 1;      /* Capture X1 FIFO DMA Enable */
                vuint16_t CX0DE : 1;      /* Capture X0 FIFO DMA Enable */
            } B;
        } DMAEN;      /* DMA Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 10;
                vuint16_t OUT_TRIG_EN : 6;      /* Output Trigger Enables. These bits enable the generation of  .. */
            } B;
        } TCTRL;      /* Output Trigger Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t DISX : 4;      /* PWMX Fault Disable Mask */
                vuint16_t DISB : 4;      /* PWMB Fault Disable Mask */
                vuint16_t DISA : 4;      /* PWMA Fault Disable Mask */
            } B;
        } DISMAP;      /* Fault Disable Mapping Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT0 : 11;      /* Deadtime Count Register 0 */
            } B;
        } DTCNT0;      /* Deadtime Count Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t DTCNT1 : 11;      /* Deadtime Count Register 1 */
            } B;
        } DTCNT1;      /* Deadtime Count Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CA1CNT : 3;      /* Capture A1 FIFO Word Count */
                vuint16_t CA0CNT : 3;      /* Capture A0 FIFO Word Count */
                vuint16_t CFAWM : 2;      /* Capture A FIFOs Water Mark */
                vuint16_t EDGCNTA_EN : 1;      /* Edge Counter A Enable */
                vuint16_t INPSELA : 1;      /* Input Select A */
                vuint16_t EDGA1 : 2;      /* Edge A 1 */
                vuint16_t EDGA0 : 2;      /* Edge A 0 */
                vuint16_t ONESHOTA : 1;      /* One Shot Mode Aux */
                vuint16_t ARMA : 1;      /* Arm A */
            } B;
        } CAPTCTRLA;      /* Capture Control Register A */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTA : 8;      /* Edge Counter A */
                vuint16_t EDGCMPA : 8;      /* Edge Compare A */
            } B;
        } CAPTCOMPA;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t CB1CNT : 3;      /* Capture B1 FIFO Word Count */
                vuint16_t CB0CNT : 3;      /* Capture B0 FIFO Word Count */
                vuint16_t CFBWM : 2;      /* Capture B FIFOs Water Mark */
                vuint16_t EDGCNTB_EN : 1;      /* Edge Counter B Enable */
                vuint16_t INPSELB : 1;      /* Input Select B */
                vuint16_t EDGB1 : 2;      /* Edge B 1 */
                vuint16_t EDGB0 : 2;      /* Edge B 0 */
                vuint16_t ONESHOTB : 1;      /* One Shot Mode Aux */
                vuint16_t ARMB : 1;      /* Arm B */
            } B;
        } CAPTCTRLB;      /* Capture Control Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTB : 8;      /* Edge Counter B */
                vuint16_t EDGCMPB : 8;      /* Edge Compare B */
            } B;
        } CAPTCOMPB;      /* Capture Compare Register B */

        union {
            vuint16_t R;
            struct {
                vuint16_t CX1CNT : 3;      /* Capture X1 FIFO Word Count */
                vuint16_t CX0CNT : 3;      /* Capture X0 FIFO Word Count */
                vuint16_t CFXWM : 2;      /* Capture X FIFOs Water Mark */
                vuint16_t EDGCNTX_EN : 1;      /* Edge Counter X Enable */
                vuint16_t INPSELX : 1;      /* Input Select X */
                vuint16_t EDGX1 : 2;      /* Edge X 1 */
                vuint16_t EDGX0 : 2;      /* Edge X 0 */
                vuint16_t ONESHOTX : 1;      /* One Shot Mode Aux */
                vuint16_t ARMX : 1;      /* Arm X */
            } B;
        } CAPTCTRLX;      /* Capture Control Register X */

        union {
            vuint16_t R;
            struct {
                vuint16_t EDGCNTX : 8;      /* Edge Counter X */
                vuint16_t EDGCMPX : 8;      /* Edge Compare X */
            } B;
        } CAPTCOMPX;      /* Capture Compare Register X */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL0;      /* Capture Value 0 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL0CYC : 3;      /* Capture Value 0 Cycle Register */
            } B;
        } CVAL0C;      /* Capture Value 0 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL1;      /* Capture Value 1 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 13;
                vuint16_t CVAL1CYC : 3;      /* Capture Value 1 Cycle Register */
            } B;
        } CVAL1C;      /* Capture Value 1 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL2;      /* Capture Value 2 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 2 Cycle Register */
            } B;
        } CVAL2C;      /* Capture Value 2 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL3;      /* Capture Value 3 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 3 Cycle Register */
            } B;
        } CVAL3C;      /* Capture Value 3 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL4;      /* Capture Value 4 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL0CYC : 4;      /* Capture Value 4 Cycle Register */
            } B;
        } CVAL4C;      /* Capture Value 4 Cycle Register */

        union {
            vuint16_t R;
            struct {
            } B;
        } CVAL5;      /* Capture Value 5 Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t CVAL1CYC : 4;      /* Capture Value 5 Cycle Register */
            } B;
        } CVAL5C;      /* Capture Value 5 Cycle Register */
    };                                             /* End of FLEXPWM_1_SUB3_tag */ 
#define FLEXPWM_1_SUB3  (*(volatile struct FLEXPWM_1_SUB3_tag *) 0xFFE280F0UL)

/*---------------------------------------------------------------------------*/
/* LIN controller (LINFlex)                                                  */
/*---------------------------------------------------------------------------*/
    struct LINFLEX_0_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t CCD : 1;      /* Checksum Calculation disable This bit is used to disable the .. */
                vuint32_t CFD : 1;      /* Checksum field disable This bit is used to disable the check .. */
                vuint32_t LASE : 1;      /* LIN Slave Automatic Resynchronization Enable  */
                vuint32_t AWUM : 1;      /* Automatic Wake-Up Mode This bit controls the behavior of the .. */
                vuint32_t MBL : 4;      /* LIN Master Break Length. These bits indicate the Break lengt .. */
                vuint32_t BF : 1;      /* Bypass filter  */
                vuint32_t SFTM : 1;      /* Self Test Mode This bit controls the Self Test mode. */
                vuint32_t LBKM : 1;      /* Loop Back Mode This bit controls the Loop Back mode. */
                vuint32_t MME : 1;      /* Master Mode Enable  */
                vuint32_t SBDT : 1;      /* Slave Mode Break Detection Threshold  */
                vuint32_t RBLM : 1;      /* Receive Buffer Locked Mode  */
                vuint32_t SLEEP : 1;      /* Sleep Mode Request This bit is set by software to request LI .. */
                vuint32_t INIT : 1;      /* Initialization Request The software sets this bit to switch  .. */
            } B;
        } LINCR1;      /* LIN Control Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t SZIE : 1;      /* Stuck at Zero Interrupt Enable  */
                vuint32_t OCIE : 1;      /* Output Compare Interrupt Enable  */
                vuint32_t BEIE : 1;      /* Bit Error Interrupt Enable  */
                vuint32_t CEIE : 1;      /* Checksum Error Interrupt Enable  */
                vuint32_t HEIE : 1;      /* Header Error Interrupt Enable  */
                vuint32_t : 2;
                vuint32_t FEIE : 1;      /* Framing Error Interrupt Enable  */
                vuint32_t BOIE : 1;      /* Buffer Overrun Interrupt Enable  */
                vuint32_t LSIE : 1;      /* LIN State Interrupt Enable  */
                vuint32_t WUIE : 1;      /* Wake-up Interrupt Enable  */
                vuint32_t DBFIE : 1;      /* Data Buffer Full Interrupt Enable  */
                vuint32_t DBEIE : 1;      /* Data Buffer Empty Interrupt Enable  */
                vuint32_t DRIE : 1;      /* Data Reception Complete Interrupt Enable  */
                vuint32_t DTIE : 1;      /* Data Transmitted Interrupt Enable  */
                vuint32_t HRIE : 1;      /* Header Received Interrupt Enable  */
            } B;
        } LINIER;      /* LIN Interrupt Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t LINS : 4;      /* LIN mode states description */
                vuint32_t : 2;
                vuint32_t RMB : 1;      /* Release Message Buffer  */
                vuint32_t : 1;
                vuint32_t RBSY : 1;      /* Receiver Busy Flag  */
                vuint32_t RPS : 1;      /* LIN receive pin state This bit reflects the current status o .. */
                vuint32_t WUF : 1;      /* Wake-up Flag This bit is set by hardware and indicates to th .. */
                vuint32_t DBFF : 1;      /* Data Buffer Full Flag This bit is set by hardware and indica .. */
                vuint32_t DBEF : 1;      /* Data Buffer Empty Flag This bit is set by hardware and indic .. */
                vuint32_t DRF : 1;      /* Data Reception Completed Flag This bit is set by hardware an .. */
                vuint32_t DTF : 1;      /* Data Transmission Completed Flag This bit is set by hardware .. */
                vuint32_t HRF : 1;      /* Header Reception Flag This bit is set by hardware and indica .. */
            } B;
        } LINSR;      /* LIN Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t SZF : 1;      /* Stuck at zero Flag. This bit is set by hardware when the bus .. */
                vuint32_t OCF : 1;      /* Output Compare Flag. */
                vuint32_t BEF : 1;      /* Bit Error Flag. This bit is set by hardware and indicates to .. */
                vuint32_t CEF : 1;      /* Checksum error Flag. This bit is set by hardware and indicat .. */
                vuint32_t SFEF : 1;      /* Synch Field Error Flag. This bit is set by hardware and indi .. */
                vuint32_t BDEF : 1;      /* Break Delimiter Error Flag. This bit is set by hardware and  .. */
                vuint32_t IDPEF : 1;      /* Identifier Parity Error Flag. This bit is set by hardware an .. */
                vuint32_t FEF : 1;      /* Framing Error Flag. This bit is set by hardware and indicate .. */
                vuint32_t BOF : 1;      /* Buffer Overrun Flag. This bit is set by hardware when a new  .. */
                vuint32_t : 6;
                vuint32_t NF : 1;      /* Noise Flag. This bit is set by hardware when noise is detect .. */
            } B;
        } LINESR;      /* LIN Error Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t TDFLTFC : 3;      /* Transmitter data field length / TX FIFO counter. This field  .. */
                vuint32_t RDFLRFC : 3;      /* Receiver data field length / Rx FIFO counter. This field has .. */
                vuint32_t RFBM : 1;      /* Rx FIFO/buffer mode. This field can be programmed in initial .. */
                vuint32_t TFBM : 1;      /* TX FIFO/buffer mode. This field can be programmed in initial .. */
                vuint32_t WL1 : 1;      /* Word Length in UART mode  */
                vuint32_t PC1 : 1;      /* Parity control 1 */
                vuint32_t RXEN : 1;      /* Receiver Enable  */
                vuint32_t TXEN : 1;      /* Transmitter Enable  */
                vuint32_t PC0 : 1;      /* Parity control 0 */
                vuint32_t PCE : 1;      /* Parity Control Enable  */
                vuint32_t WL0 : 1;      /* Word Length in UART mode  */
                vuint32_t UART : 1;      /* UART mode enable  */
            } B;
        } UARTCR;      /* UART Mode Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t SZF : 1;      /* Stuck at zero Flag This bit is set by hardware when the bus  .. */
                vuint32_t OCF : 1;      /* OCF Output Compare Flag  */
                vuint32_t PE3 : 1;      /* Parity Error Flag RX3 This bit indicates if there is a parit .. */
                vuint32_t PE2 : 1;      /* Parity Error Flag RX2 This bit indicates if there is a parit .. */
                vuint32_t PE1 : 1;      /* Parity Error Flag RX1 This bit indicates if there is a parit .. */
                vuint32_t PE0 : 1;      /* Parity Error Flag RX0 This bit indicates if there is a parit .. */
                vuint32_t RMB : 1;      /* Release Message Buffer  */
                vuint32_t FEF : 1;      /* Framing Error Flag This bit is set by hardware and indicates .. */
                vuint32_t BOF : 1;      /* Buffer Overrun Flag This bit is set by hardware when a new d .. */
                vuint32_t RPS : 1;      /* LIN Receive Pin State This bit reflects the current status o .. */
                vuint32_t WUF : 1;      /* Wake-up Flag This bit is set by hardware and indicates to th .. */
                vuint32_t : 1;
                vuint32_t TO : 1;      /* Timeout. The LINFlex3 controller sets this field when a UART .. */
                vuint32_t DRFRFE : 1;      /* Data reception completed flag / Rx FIFO empty flag. The LINF .. */
                vuint32_t DTFTFF : 1;      /* Data transmission completed flag / TX FIFO full flag. The LI .. */
                vuint32_t NF : 1;      /* Noise Flag This bit is set by hardware when noise is detecte .. */
            } B;
        } UARTSR;      /* UART Mode Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 21;
                vuint32_t LTOM : 1;      /* LIN timeout mode  */
                vuint32_t IOT : 1;      /* Idle on Timeout  */
                vuint32_t TOCE : 1;      /* Timeout counter enable  */
                vuint32_t CNT : 8;      /* Counter Value. These bits indicate the LIN Timeout counter v .. */
            } B;
        } LINTCSR;      /* LIN Time-Out Control Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t OC2 : 8;      /* Output compare 2 value These bits contain the value to be co .. */
                vuint32_t OC1 : 8;      /* Output compare 1 value These bits contain the value to be co .. */
            } B;
        } LINOCR;      /* LIN Output Compare Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 20;
                vuint32_t RTO : 4;      /* Response timeout value This register contains the response t .. */
                vuint32_t : 1;
                vuint32_t HTO : 7;      /* Header timeout value This register contains the header timeo .. */
            } B;
        } LINTOCR;      /* LIN Time-Out Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t DIV_F : 4;      /* Fraction bits of LFDIV The 4 fraction bits define the value  .. */
            } B;
        } LINFBRR;      /* LIN Fractional Baud Rate Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t DIV_M : 20;      /* LFDIV mantissa. These bits define the LINFlex3 divider (LFDI .. */
            } B;
        } LINIBRR;      /* LIN Integer Baud Rate Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t CF : 8;      /* Checksum bits When CCD bit in LINCR1 is cleared these bits a .. */
            } B;
        } LINCFR;      /* LIN Checksum Field Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 17;
                vuint32_t IOBE : 1;      /* Idle on Bit Error  */
                vuint32_t IOPE : 1;      /* Idle on Identifier Parity Error  */
                vuint32_t WURQ : 1;      /* Wake-up Generation Request Setting this bit generates a wake .. */
                vuint32_t DDRQ : 1;      /* Data Discard Request Set by software to stop data reception  .. */
                vuint32_t DTRQ : 1;      /* Data Transmission Request Set by software in Slave mode to r .. */
                vuint32_t ABRQ : 1;      /* Abort Request Set by software to abort the current transmiss .. */
                vuint32_t HTRQ : 1;      /* Header Transmission Request Set by software to request the t .. */
            } B;
        } LINCR2;      /* LIN Control Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } BIDR;      /* Buffer Identifier Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATA3 : 8;      /* Data Byte 3 Data byte 3 of the data field  */
                vuint32_t DATA2 : 8;      /* Data Byte 2 Data byte 2 of the data field  */
                vuint32_t DATA1 : 8;      /* Data Byte 1 Data byte 1 of the data field  */
                vuint32_t DATA0 : 8;      /* Data Byte 0 Data byte 0 of the data field  */
            } B;
        } BDRL;      /* Buffer Data Register Least Significant */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATA7 : 8;      /* Data Byte 7 Data byte 7 of the data field  */
                vuint32_t DATA6 : 8;      /* Data Byte 6 Data byte 6 of the data field  */
                vuint32_t DATA5 : 8;      /* Data Byte 5 Data byte 5 of the data field  */
                vuint32_t DATA4 : 8;      /* Data Byte 4 Data byte 4 of the data field  */
            } B;
        } BDRM;      /* Buffer Data Register Most Significant */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t FACT : 8;      /* Filter active The software sets the bit FACT[x] to activate  .. */
            } B;
        } IFER;      /* Identifier Filter Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t IFMI : 4;      /* Filter match index This register contains the index correspo .. */
            } B;
        } IFMI;      /* Identifier Filter Match Index */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t IFM : 4;      /* Filter mode */
            } B;
        } IFMR;      /* Identifier Filter Mode Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR0;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR1;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR2;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR3;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR4;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR5;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR6;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR7;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR8;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR9;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR10;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR11;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR12;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR13;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR14;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR15;      /* Identifier Filter Control Register */
    };                                             /* End of LINFLEX_0_tag */ 
#define LINFLEX_0  (*(volatile struct LINFLEX_0_tag *)    0xFFE40000UL)

/*---------------------------------------------------------------------------*/
/* LIN controller (LINFlex)                                                  */
/*---------------------------------------------------------------------------*/
    struct LINFLEX_1_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t CCD : 1;      /* Checksum Calculation disable This bit is used to disable the .. */
                vuint32_t CFD : 1;      /* Checksum field disable This bit is used to disable the check .. */
                vuint32_t LASE : 1;      /* LIN Slave Automatic Resynchronization Enable  */
                vuint32_t AWUM : 1;      /* Automatic Wake-Up Mode This bit controls the behavior of the .. */
                vuint32_t MBL : 4;      /* LIN Master Break Length. These bits indicate the Break lengt .. */
                vuint32_t BF : 1;      /* Bypass filter  */
                vuint32_t SFTM : 1;      /* Self Test Mode This bit controls the Self Test mode. */
                vuint32_t LBKM : 1;      /* Loop Back Mode This bit controls the Loop Back mode. */
                vuint32_t MME : 1;      /* Master Mode Enable  */
                vuint32_t SBDT : 1;      /* Slave Mode Break Detection Threshold  */
                vuint32_t RBLM : 1;      /* Receive Buffer Locked Mode  */
                vuint32_t SLEEP : 1;      /* Sleep Mode Request This bit is set by software to request LI .. */
                vuint32_t INIT : 1;      /* Initialization Request The software sets this bit to switch  .. */
            } B;
        } LINCR1;      /* LIN Control Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t SZIE : 1;      /* Stuck at Zero Interrupt Enable  */
                vuint32_t OCIE : 1;      /* Output Compare Interrupt Enable  */
                vuint32_t BEIE : 1;      /* Bit Error Interrupt Enable  */
                vuint32_t CEIE : 1;      /* Checksum Error Interrupt Enable  */
                vuint32_t HEIE : 1;      /* Header Error Interrupt Enable  */
                vuint32_t : 2;
                vuint32_t FEIE : 1;      /* Framing Error Interrupt Enable  */
                vuint32_t BOIE : 1;      /* Buffer Overrun Interrupt Enable  */
                vuint32_t LSIE : 1;      /* LIN State Interrupt Enable  */
                vuint32_t WUIE : 1;      /* Wake-up Interrupt Enable  */
                vuint32_t DBFIE : 1;      /* Data Buffer Full Interrupt Enable  */
                vuint32_t DBEIE : 1;      /* Data Buffer Empty Interrupt Enable  */
                vuint32_t DRIE : 1;      /* Data Reception Complete Interrupt Enable  */
                vuint32_t DTIE : 1;      /* Data Transmitted Interrupt Enable  */
                vuint32_t HRIE : 1;      /* Header Received Interrupt Enable  */
            } B;
        } LINIER;      /* LIN Interrupt Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t LINS : 4;      /* LIN mode states description */
                vuint32_t : 2;
                vuint32_t RMB : 1;      /* Release Message Buffer  */
                vuint32_t : 1;
                vuint32_t RBSY : 1;      /* Receiver Busy Flag  */
                vuint32_t RPS : 1;      /* LIN receive pin state This bit reflects the current status o .. */
                vuint32_t WUF : 1;      /* Wake-up Flag This bit is set by hardware and indicates to th .. */
                vuint32_t DBFF : 1;      /* Data Buffer Full Flag This bit is set by hardware and indica .. */
                vuint32_t DBEF : 1;      /* Data Buffer Empty Flag This bit is set by hardware and indic .. */
                vuint32_t DRF : 1;      /* Data Reception Completed Flag This bit is set by hardware an .. */
                vuint32_t DTF : 1;      /* Data Transmission Completed Flag This bit is set by hardware .. */
                vuint32_t HRF : 1;      /* Header Reception Flag This bit is set by hardware and indica .. */
            } B;
        } LINSR;      /* LIN Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t SZF : 1;      /* Stuck at zero Flag. This bit is set by hardware when the bus .. */
                vuint32_t OCF : 1;      /* Output Compare Flag. */
                vuint32_t BEF : 1;      /* Bit Error Flag. This bit is set by hardware and indicates to .. */
                vuint32_t CEF : 1;      /* Checksum error Flag. This bit is set by hardware and indicat .. */
                vuint32_t SFEF : 1;      /* Synch Field Error Flag. This bit is set by hardware and indi .. */
                vuint32_t BDEF : 1;      /* Break Delimiter Error Flag. This bit is set by hardware and  .. */
                vuint32_t IDPEF : 1;      /* Identifier Parity Error Flag. This bit is set by hardware an .. */
                vuint32_t FEF : 1;      /* Framing Error Flag. This bit is set by hardware and indicate .. */
                vuint32_t BOF : 1;      /* Buffer Overrun Flag. This bit is set by hardware when a new  .. */
                vuint32_t : 6;
                vuint32_t NF : 1;      /* Noise Flag. This bit is set by hardware when noise is detect .. */
            } B;
        } LINESR;      /* LIN Error Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t TDFLTFC : 3;      /* Transmitter data field length / TX FIFO counter. This field  .. */
                vuint32_t RDFLRFC : 3;      /* Receiver data field length / Rx FIFO counter. This field has .. */
                vuint32_t RFBM : 1;      /* Rx FIFO/buffer mode. This field can be programmed in initial .. */
                vuint32_t TFBM : 1;      /* TX FIFO/buffer mode. This field can be programmed in initial .. */
                vuint32_t WL1 : 1;      /* Word Length in UART mode  */
                vuint32_t PC1 : 1;      /* Parity control 1 */
                vuint32_t RXEN : 1;      /* Receiver Enable  */
                vuint32_t TXEN : 1;      /* Transmitter Enable  */
                vuint32_t PC0 : 1;      /* Parity control 0 */
                vuint32_t PCE : 1;      /* Parity Control Enable  */
                vuint32_t WL0 : 1;      /* Word Length in UART mode  */
                vuint32_t UART : 1;      /* UART mode enable  */
            } B;
        } UARTCR;      /* UART Mode Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t SZF : 1;      /* Stuck at zero Flag This bit is set by hardware when the bus  .. */
                vuint32_t OCF : 1;      /* OCF Output Compare Flag  */
                vuint32_t PE3 : 1;      /* Parity Error Flag RX3 This bit indicates if there is a parit .. */
                vuint32_t PE2 : 1;      /* Parity Error Flag RX2 This bit indicates if there is a parit .. */
                vuint32_t PE1 : 1;      /* Parity Error Flag RX1 This bit indicates if there is a parit .. */
                vuint32_t PE0 : 1;      /* Parity Error Flag RX0 This bit indicates if there is a parit .. */
                vuint32_t RMB : 1;      /* Release Message Buffer  */
                vuint32_t FEF : 1;      /* Framing Error Flag This bit is set by hardware and indicates .. */
                vuint32_t BOF : 1;      /* Buffer Overrun Flag This bit is set by hardware when a new d .. */
                vuint32_t RPS : 1;      /* LIN Receive Pin State This bit reflects the current status o .. */
                vuint32_t WUF : 1;      /* Wake-up Flag This bit is set by hardware and indicates to th .. */
                vuint32_t : 1;
                vuint32_t TO : 1;      /* Timeout. The LINFlex3 controller sets this field when a UART .. */
                vuint32_t DRFRFE : 1;      /* Data reception completed flag / Rx FIFO empty flag. The LINF .. */
                vuint32_t DTFTFF : 1;      /* Data transmission completed flag / TX FIFO full flag. The LI .. */
                vuint32_t NF : 1;      /* Noise Flag This bit is set by hardware when noise is detecte .. */
            } B;
        } UARTSR;      /* UART Mode Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 21;
                vuint32_t LTOM : 1;      /* LIN timeout mode  */
                vuint32_t IOT : 1;      /* Idle on Timeout  */
                vuint32_t TOCE : 1;      /* Timeout counter enable  */
                vuint32_t CNT : 8;      /* Counter Value. These bits indicate the LIN Timeout counter v .. */
            } B;
        } LINTCSR;      /* LIN Time-Out Control Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t OC2 : 8;      /* Output compare 2 value These bits contain the value to be co .. */
                vuint32_t OC1 : 8;      /* Output compare 1 value These bits contain the value to be co .. */
            } B;
        } LINOCR;      /* LIN Output Compare Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 20;
                vuint32_t RTO : 4;      /* Response timeout value This register contains the response t .. */
                vuint32_t : 1;
                vuint32_t HTO : 7;      /* Header timeout value This register contains the header timeo .. */
            } B;
        } LINTOCR;      /* LIN Time-Out Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t DIV_F : 4;      /* Fraction bits of LFDIV The 4 fraction bits define the value  .. */
            } B;
        } LINFBRR;      /* LIN Fractional Baud Rate Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 12;
                vuint32_t DIV_M : 20;      /* LFDIV mantissa. These bits define the LINFlex3 divider (LFDI .. */
            } B;
        } LINIBRR;      /* LIN Integer Baud Rate Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t CF : 8;      /* Checksum bits When CCD bit in LINCR1 is cleared these bits a .. */
            } B;
        } LINCFR;      /* LIN Checksum Field Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 17;
                vuint32_t IOBE : 1;      /* Idle on Bit Error  */
                vuint32_t IOPE : 1;      /* Idle on Identifier Parity Error  */
                vuint32_t WURQ : 1;      /* Wake-up Generation Request Setting this bit generates a wake .. */
                vuint32_t DDRQ : 1;      /* Data Discard Request Set by software to stop data reception  .. */
                vuint32_t DTRQ : 1;      /* Data Transmission Request Set by software in Slave mode to r .. */
                vuint32_t ABRQ : 1;      /* Abort Request Set by software to abort the current transmiss .. */
                vuint32_t HTRQ : 1;      /* Header Transmission Request Set by software to request the t .. */
            } B;
        } LINCR2;      /* LIN Control Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } BIDR;      /* Buffer Identifier Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATA3 : 8;      /* Data Byte 3 Data byte 3 of the data field  */
                vuint32_t DATA2 : 8;      /* Data Byte 2 Data byte 2 of the data field  */
                vuint32_t DATA1 : 8;      /* Data Byte 1 Data byte 1 of the data field  */
                vuint32_t DATA0 : 8;      /* Data Byte 0 Data byte 0 of the data field  */
            } B;
        } BDRL;      /* Buffer Data Register Least Significant */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATA7 : 8;      /* Data Byte 7 Data byte 7 of the data field  */
                vuint32_t DATA6 : 8;      /* Data Byte 6 Data byte 6 of the data field  */
                vuint32_t DATA5 : 8;      /* Data Byte 5 Data byte 5 of the data field  */
                vuint32_t DATA4 : 8;      /* Data Byte 4 Data byte 4 of the data field  */
            } B;
        } BDRM;      /* Buffer Data Register Most Significant */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 24;
                vuint32_t FACT : 8;      /* Filter active The software sets the bit FACT[x] to activate  .. */
            } B;
        } IFER;      /* Identifier Filter Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t IFMI : 4;      /* Filter match index This register contains the index correspo .. */
            } B;
        } IFMI;      /* Identifier Filter Match Index */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t IFM : 4;      /* Filter mode */
            } B;
        } IFMR;      /* Identifier Filter Mode Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR0;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR1;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR2;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR3;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR4;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR5;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR6;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR7;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR8;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR9;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR10;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR11;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR12;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR13;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR14;      /* Identifier Filter Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t DFL : 6;      /* Data Field Length These bits define the number of data bytes .. */
                vuint32_t DIR : 1;      /* Direction This bit controls the direction of the data field. .. */
                vuint32_t CCS : 1;      /* Classic Checksum This bit controls the type of checksum appl .. */
                vuint32_t : 2;
                vuint32_t ID : 6;      /* Identifier Identifier part of the identifier field without t .. */
            } B;
        } IFCR15;      /* Identifier Filter Control Register */
    };                                             /* End of LINFLEX_1_tag */ 
#define LINFLEX_1  (*(volatile struct LINFLEX_1_tag *)    0xFFE44000UL)

/*---------------------------------------------------------------------------*/
/* Cyclic redundancy check Unit                                              */
/*---------------------------------------------------------------------------*/
    struct CRC_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t POLYG : 1;      /* Polynomial selection. This bit can be read and written by th .. */
                vuint32_t SWAP : 1;      /* SWAP selection. This bit can be read and written by the soft .. */
                vuint32_t INV : 1;      /* INV selection. This bit can be read and written by the softw .. */
            } B;
        } CFG1;      /* CRC Configuration Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t INP : 32;      /* Input data for the CRC computation. The INP register can be  .. */
            } B;
        } INP1;      /* CRC Input Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CSTAT : 32;      /* Status of the CRC signature. The CSTAT register includes the .. */
            } B;
        } CSTAT1;      /* CRC Current Status Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t OUTP : 32;      /* Final CRC signature. The OUTP register includes the final si .. */
            } B;
        } COUTP1;      /* CRC Output Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t POLYG : 1;      /* Polynomial selection. This bit can be read and written by th .. */
                vuint32_t SWAP : 1;      /* SWAP selection. This bit can be read and written by the soft .. */
                vuint32_t INV : 1;      /* INV selection. This bit can be read and written by the softw .. */
            } B;
        } CFG2;      /* CRC Configuration Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t INP : 32;      /* Input data for the CRC computation. The INP register can be  .. */
            } B;
        } INP2;      /* CRC Input Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CSTAT : 32;      /* Status of the CRC signature. The CSTAT register includes the .. */
            } B;
        } CSTAT2;      /* CRC Current Status Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t OUTP : 32;      /* Final CRC signature. The OUTP register includes the final si .. */
            } B;
        } COUTP2;      /* CRC Output Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t POLYG : 1;      /* Polynomial selection. This bit can be read and written by th .. */
                vuint32_t SWAP : 1;      /* SWAP selection. This bit can be read and written by the soft .. */
                vuint32_t INV : 1;      /* INV selection. This bit can be read and written by the softw .. */
            } B;
        } CFG3;      /* CRC Configuration Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t INP : 32;      /* Input data for the CRC computation. The INP register can be  .. */
            } B;
        } INP3;      /* CRC Input Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CSTAT : 32;      /* Status of the CRC signature. The CSTAT register includes the .. */
            } B;
        } CSTAT3;      /* CRC Current Status Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t OUTP : 32;      /* Final CRC signature. The OUTP register includes the final si .. */
            } B;
        } COUTP3;      /* CRC Output Register 3 */
    };                                             /* End of CRC_tag */ 
#define CRC  (*(volatile struct CRC_tag *)          0xFFE68000UL)

/*---------------------------------------------------------------------------*/
/* Fault Collection and Control Unit                                         */
/*---------------------------------------------------------------------------*/
    struct FCCU_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 23;
                vuint32_t NVML : 1;      /* NVM configuration loaded. At the end of the reset phase3, NV .. */
                vuint32_t OPS : 2;      /* Operation status. This bit can be read and cleared (via OP15 .. */
                vuint32_t : 1;
                vuint32_t OPR : 5;      /* Operation run. This bit can be read and written by the softw .. */
            } B;
        } CTRL;      /* Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CTRLK : 32;      /* Control register key. Key for the operation OP1 = 913756AFh    .. */
            } B;
        } CTRLK;      /* CTRL Key Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 10;
                vuint32_t RCCE1 : 1;      /* RCC1 enable (valid only if SCF =1) */
                vuint32_t RCCE0 : 1;      /* RCC0 enable (valid only if SCF =1) */
                vuint32_t SMRT : 4;      /* Safe Mode Request Timer */
                vuint32_t : 4;
                vuint32_t CM : 1;      /* Config mode. */
                vuint32_t SM : 1;      /* Switching mode. SM has no effect on the bi-stable protocol. */
                vuint32_t PS : 1;      /* Polarity selection */
                vuint32_t FOM : 3;      /* Fault Output Mode selection. */
                vuint32_t FOP : 6;      /* Fault Output Prescaler. FOP defines the prescaler setting us .. */
            } B;
        } CFG;      /* Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFC31 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC30 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC29 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC28 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC27 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC26 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC25 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC24 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC23 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC22 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC21 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC20 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC19 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC18 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC17 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC16 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC15 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC14 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC13 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC12 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC11 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC10 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC9 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC8 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC7 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC6 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC5 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC4 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC3 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC2 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC1 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC0 : 1;      /* Critical fault configuration. The critical fault configurati .. */
            } B;
        } CF_CFG0;      /* Critical fault configuration Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFC31 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC30 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC29 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC28 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC27 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC26 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC25 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC24 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC23 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC22 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC21 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC20 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC19 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC18 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC17 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC16 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC15 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC14 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC13 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC12 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC11 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC10 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC9 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC8 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC7 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC6 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC5 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC4 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC3 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC2 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC1 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC0 : 1;      /* Critical fault configuration. The critical fault configurati .. */
            } B;
        } CF_CFG1;      /* Critical fault configuration Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFC31 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC30 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC29 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC28 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC27 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC26 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC25 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC24 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC23 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC22 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC21 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC20 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC19 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC18 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC17 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC16 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC15 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC14 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC13 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC12 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC11 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC10 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC9 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC8 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC7 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC6 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC5 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC4 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC3 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC2 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC1 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC0 : 1;      /* Critical fault configuration. The critical fault configurati .. */
            } B;
        } CF_CFG2;      /* Critical fault configuration Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFC31 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC30 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC29 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC28 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC27 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC26 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC25 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC24 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC23 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC22 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC21 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC20 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC19 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC18 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC17 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC16 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC15 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC14 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC13 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC12 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC11 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC10 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC9 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC8 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC7 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC6 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC5 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC4 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC3 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC2 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC1 : 1;      /* Critical fault configuration. The critical fault configurati .. */
                vuint32_t CFC0 : 1;      /* Critical fault configuration. The critical fault configurati .. */
            } B;
        } CF_CFG3;      /* Critical fault configuration Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFC31 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC30 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC29 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC28 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC27 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC26 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC25 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC24 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC23 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC22 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC21 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC20 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC19 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC18 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC17 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC16 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC15 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC14 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC13 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC12 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC11 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC10 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC9 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC8 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC7 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC6 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC5 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC4 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC3 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC2 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC1 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC0 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
            } B;
        } NCF_CFG0;      /* Non-critical fault configuration Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFC31 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC30 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC29 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC28 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC27 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC26 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC25 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC24 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC23 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC22 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC21 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC20 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC19 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC18 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC17 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC16 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC15 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC14 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC13 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC12 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC11 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC10 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC9 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC8 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC7 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC6 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC5 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC4 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC3 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC2 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC1 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC0 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
            } B;
        } NCF_CFG1;      /* Non-critical fault configuration Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFC31 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC30 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC29 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC28 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC27 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC26 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC25 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC24 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC23 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC22 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC21 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC20 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC19 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC18 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC17 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC16 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC15 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC14 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC13 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC12 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC11 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC10 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC9 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC8 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC7 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC6 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC5 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC4 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC3 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC2 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC1 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC0 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
            } B;
        } NCF_CFG2;      /* Non-critical fault configuration Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFC31 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC30 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC29 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC28 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC27 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC26 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC25 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC24 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC23 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC22 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC21 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC20 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC19 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC18 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC17 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC16 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC15 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC14 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC13 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC12 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC11 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC10 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC9 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC8 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC7 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC6 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC5 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC4 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC3 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC2 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC1 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
                vuint32_t NCFC0 : 1;      /* Non-critical fault configuration. The non-critical fault con .. */
            } B;
        } NCF_CFG3;      /* Non-critical fault configuration Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFSC15 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC14 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC13 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC12 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC11 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC10 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC9 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC8 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC7 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC6 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC5 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC4 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC3 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC2 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC1 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC0 : 2;      /* Critical fault state configuration */
            } B;
        } CSF_CFG0;      /* Critical fault state configuration Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFSC15 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC14 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC13 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC12 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC11 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC10 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC9 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC8 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC7 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC6 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC5 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC4 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC3 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC2 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC1 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC0 : 2;      /* Critical fault state configuration */
            } B;
        } CSF_CFG1;      /* Critical fault state configuration Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFSC15 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC14 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC13 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC12 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC11 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC10 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC9 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC8 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC7 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC6 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC5 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC4 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC3 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC2 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC1 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC0 : 2;      /* Critical fault state configuration */
            } B;
        } CSF_CFG2;      /* Critical fault state configuration Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFSC15 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC14 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC13 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC12 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC11 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC10 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC9 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC8 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC7 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC6 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC5 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC4 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC3 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC2 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC1 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC0 : 2;      /* Critical fault state configuration */
            } B;
        } CSF_CFG3;      /* Critical fault state configuration Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFSC15 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC14 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC13 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC12 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC11 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC10 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC9 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC8 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC7 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC6 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC5 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC4 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC3 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC2 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC1 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC0 : 2;      /* Critical fault state configuration */
            } B;
        } CSF_CFG4;      /* Critical fault state configuration Register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFSC15 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC14 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC13 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC12 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC11 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC10 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC9 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC8 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC7 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC6 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC5 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC4 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC3 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC2 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC1 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC0 : 2;      /* Critical fault state configuration */
            } B;
        } CSF_CFG5;      /* Critical fault state configuration Register 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFSC15 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC14 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC13 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC12 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC11 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC10 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC9 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC8 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC7 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC6 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC5 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC4 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC3 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC2 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC1 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC0 : 2;      /* Critical fault state configuration */
            } B;
        } CSF_CFG6;      /* Critical fault state configuration Register 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFSC15 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC14 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC13 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC12 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC11 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC10 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC9 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC8 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC7 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC6 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC5 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC4 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC3 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC2 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC1 : 2;      /* Critical fault state configuration */
                vuint32_t CFSC0 : 2;      /* Critical fault state configuration */
            } B;
        } CSF_CFG7;      /* Critical fault state configuration Register 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFSC15 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC14 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC13 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC12 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC11 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC10 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC9 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC8 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC7 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC6 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC5 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC4 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC3 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC2 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC1 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC0 : 2;      /* Non-critical fault state configuration */
            } B;
        } NCSF_CFG0;      /* Non-Non-critical fault state configuration Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFSC15 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC14 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC13 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC12 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC11 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC10 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC9 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC8 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC7 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC6 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC5 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC4 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC3 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC2 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC1 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC0 : 2;      /* Non-critical fault state configuration */
            } B;
        } NCSF_CFG1;      /* Non-Non-critical fault state configuration Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFSC15 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC14 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC13 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC12 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC11 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC10 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC9 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC8 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC7 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC6 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC5 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC4 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC3 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC2 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC1 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC0 : 2;      /* Non-critical fault state configuration */
            } B;
        } NCSF_CFG2;      /* Non-Non-critical fault state configuration Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFSC15 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC14 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC13 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC12 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC11 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC10 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC9 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC8 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC7 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC6 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC5 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC4 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC3 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC2 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC1 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC0 : 2;      /* Non-critical fault state configuration */
            } B;
        } NCSF_CFG3;      /* Non-Non-critical fault state configuration Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFSC15 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC14 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC13 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC12 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC11 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC10 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC9 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC8 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC7 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC6 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC5 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC4 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC3 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC2 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC1 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC0 : 2;      /* Non-critical fault state configuration */
            } B;
        } NCSF_CFG4;      /* Non-Non-critical fault state configuration Register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFSC15 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC14 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC13 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC12 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC11 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC10 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC9 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC8 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC7 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC6 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC5 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC4 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC3 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC2 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC1 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC0 : 2;      /* Non-critical fault state configuration */
            } B;
        } NCSF_CFG5;      /* Non-Non-critical fault state configuration Register 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFSC15 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC14 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC13 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC12 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC11 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC10 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC9 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC8 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC7 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC6 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC5 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC4 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC3 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC2 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC1 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC0 : 2;      /* Non-critical fault state configuration */
            } B;
        } NCSF_CFG6;      /* Non-Non-critical fault state configuration Register 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFSC15 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC14 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC13 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC12 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC11 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC10 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC9 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC8 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC7 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC6 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC5 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC4 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC3 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC2 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC1 : 2;      /* Non-critical fault state configuration */
                vuint32_t NCFSC0 : 2;      /* Non-critical fault state configuration */
            } B;
        } NCSF_CFG7;      /* Non-Non-critical fault state configuration Register 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFS31 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS30 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS29 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS28 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS27 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS26 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS25 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS24 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS23 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS22 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS21 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS20 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS19 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS18 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS17 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS16 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS15 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS14 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS13 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS12 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS11 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS10 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS9 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS8 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS7 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS6 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS5 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS4 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS3 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS2 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS1 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS0 : 1;      /* Critical fault status. The status bits related to the critic .. */
            } B;
        } CFS0;      /* Critical fault status Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFS31 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS30 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS29 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS28 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS27 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS26 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS25 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS24 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS23 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS22 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS21 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS20 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS19 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS18 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS17 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS16 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS15 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS14 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS13 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS12 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS11 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS10 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS9 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS8 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS7 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS6 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS5 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS4 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS3 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS2 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS1 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS0 : 1;      /* Critical fault status. The status bits related to the critic .. */
            } B;
        } CFS1;      /* Critical fault status Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFS31 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS30 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS29 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS28 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS27 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS26 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS25 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS24 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS23 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS22 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS21 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS20 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS19 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS18 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS17 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS16 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS15 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS14 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS13 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS12 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS11 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS10 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS9 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS8 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS7 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS6 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS5 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS4 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS3 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS2 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS1 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS0 : 1;      /* Critical fault status. The status bits related to the critic .. */
            } B;
        } CFS2;      /* Critical fault status Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFS31 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS30 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS29 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS28 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS27 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS26 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS25 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS24 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS23 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS22 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS21 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS20 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS19 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS18 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS17 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS16 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS15 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS14 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS13 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS12 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS11 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS10 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS9 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS8 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS7 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS6 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS5 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS4 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS3 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS2 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS1 : 1;      /* Critical fault status. The status bits related to the critic .. */
                vuint32_t CFS0 : 1;      /* Critical fault status. The status bits related to the critic .. */
            } B;
        } CFS3;      /* Critical fault status Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t CFK : 32;      /* Critical fault key. Critical fault key = 0x618B7A50 */
            } B;
        } CFK;      /* CF Key Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFS31 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS30 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS29 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS28 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS27 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS26 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS25 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS24 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS23 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS22 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS21 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS20 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS19 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS18 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS17 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS16 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS15 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS14 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS13 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS12 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS11 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS10 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS9 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS8 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS7 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS6 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS5 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS4 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS3 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS2 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS1 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS0 : 1;      /* Non-critical fault status. The status bits related to the no .. */
            } B;
        } NCFS0;      /* Non-critical fault status Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFS31 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS30 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS29 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS28 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS27 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS26 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS25 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS24 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS23 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS22 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS21 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS20 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS19 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS18 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS17 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS16 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS15 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS14 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS13 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS12 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS11 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS10 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS9 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS8 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS7 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS6 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS5 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS4 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS3 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS2 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS1 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS0 : 1;      /* Non-critical fault status. The status bits related to the no .. */
            } B;
        } NCFS1;      /* Non-critical fault status Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFS31 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS30 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS29 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS28 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS27 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS26 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS25 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS24 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS23 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS22 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS21 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS20 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS19 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS18 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS17 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS16 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS15 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS14 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS13 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS12 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS11 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS10 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS9 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS8 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS7 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS6 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS5 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS4 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS3 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS2 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS1 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS0 : 1;      /* Non-critical fault status. The status bits related to the no .. */
            } B;
        } NCFS2;      /* Non-critical fault status Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFS31 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS30 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS29 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS28 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS27 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS26 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS25 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS24 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS23 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS22 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS21 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS20 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS19 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS18 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS17 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS16 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS15 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS14 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS13 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS12 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS11 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS10 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS9 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS8 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS7 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS6 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS5 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS4 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS3 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS2 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS1 : 1;      /* Non-critical fault status. The status bits related to the no .. */
                vuint32_t NCFS0 : 1;      /* Non-critical fault status. The status bits related to the no .. */
            } B;
        } NCFS3;      /* Non-critical fault status Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFK : 32;      /* NCFK. Critical fault key = 0xAB3498FE */
            } B;
        } NCFK;      /* NCF Key Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFE31 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE30 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE29 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE28 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE27 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE26 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE25 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE24 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE23 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE22 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE21 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE20 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE19 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE18 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE17 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE16 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE15 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE14 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE13 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE12 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE11 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE10 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE9 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE8 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE7 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE6 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE5 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE4 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE3 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE2 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE1 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE0 : 1;      /* Non-critical fault enable */
            } B;
        } NCFE0;      /* Non-critical fault enable Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFE31 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE30 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE29 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE28 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE27 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE26 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE25 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE24 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE23 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE22 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE21 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE20 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE19 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE18 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE17 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE16 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE15 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE14 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE13 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE12 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE11 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE10 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE9 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE8 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE7 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE6 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE5 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE4 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE3 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE2 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE1 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE0 : 1;      /* Non-critical fault enable */
            } B;
        } NCFE1;      /* Non-critical fault enable Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFE31 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE30 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE29 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE28 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE27 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE26 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE25 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE24 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE23 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE22 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE21 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE20 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE19 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE18 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE17 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE16 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE15 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE14 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE13 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE12 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE11 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE10 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE9 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE8 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE7 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE6 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE5 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE4 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE3 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE2 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE1 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE0 : 1;      /* Non-critical fault enable */
            } B;
        } NCFE2;      /* Non-critical fault enable Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFE31 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE30 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE29 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE28 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE27 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE26 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE25 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE24 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE23 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE22 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE21 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE20 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE19 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE18 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE17 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE16 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE15 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE14 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE13 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE12 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE11 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE10 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE9 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE8 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE7 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE6 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE5 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE4 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE3 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE2 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE1 : 1;      /* Non-critical fault enable */
                vuint32_t NCFE0 : 1;      /* Non-critical fault enable */
            } B;
        } NCFE3;      /* Non-critical fault enable Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFTOE31 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE30 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE29 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE28 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE27 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE26 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE25 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE24 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE23 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE22 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE21 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE20 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE19 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE18 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE17 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE16 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE15 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE14 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE13 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE12 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE11 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE10 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE9 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE8 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE7 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE6 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE5 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE4 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE3 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE2 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE1 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE0 : 1;      /* Non-critical fault time-out enable */
            } B;
        } NCFTOE0;      /* Non-critical fault time-out enable Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFTOE31 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE30 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE29 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE28 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE27 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE26 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE25 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE24 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE23 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE22 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE21 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE20 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE19 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE18 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE17 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE16 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE15 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE14 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE13 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE12 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE11 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE10 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE9 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE8 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE7 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE6 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE5 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE4 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE3 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE2 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE1 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE0 : 1;      /* Non-critical fault time-out enable */
            } B;
        } NCFTOE1;      /* Non-critical fault time-out enable Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFTOE31 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE30 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE29 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE28 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE27 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE26 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE25 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE24 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE23 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE22 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE21 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE20 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE19 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE18 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE17 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE16 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE15 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE14 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE13 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE12 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE11 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE10 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE9 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE8 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE7 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE6 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE5 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE4 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE3 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE2 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE1 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE0 : 1;      /* Non-critical fault time-out enable */
            } B;
        } NCFTOE2;      /* Non-critical fault time-out enable Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NCFTOE31 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE30 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE29 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE28 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE27 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE26 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE25 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE24 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE23 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE22 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE21 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE20 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE19 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE18 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE17 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE16 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE15 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE14 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE13 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE12 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE11 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE10 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE9 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE8 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE7 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE6 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE5 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE4 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE3 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE2 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE1 : 1;      /* Non-critical fault time-out enable */
                vuint32_t NCFTOE0 : 1;      /* Non-critical fault time-out enable */
            } B;
        } NCFTOE3;      /* Non-critical fault time-out enable Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TO : 32;      /* Non-critical fault timeout. Timeout = (TO) x TRC16MHz */
            } B;
        } NCF_TO;      /* NCF Timeout Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t TO : 3;      /* Configuration time-out. Timeout = TRC16MHz x 2(TO + 10) */
            } B;
        } CFG_TO;      /* CFG Timeout Register */

        int8_t Reserved126[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t STATUS : 3;      /* FCCU Status */
            } B;
        } STAT;      /* Status Register */

        int8_t Reserved127[20];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 25;
                vuint32_t FCFC : 7;      /* Fake critical fault code */
            } B;
        } CFF;      /* CF Fake Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 25;
                vuint32_t FNFC : 7;      /* Fake non-critical fault code */
            } B;
        } NCFF;      /* NCF Fake Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t NMI_STAT : 1;      /* NMI Interrupt Status */
                vuint32_t ALRM_STAT : 1;      /* Alarm Interrupt Status */
                vuint32_t CFG_TO_STAT : 1;      /* Configuration Time-out Status */
            } B;
        } IRQ_STAT;      /* IRQ Status Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t CFG_TO_IEN : 1;      /* Configuration Time-out Interrupt Enable */
            } B;
        } IRQ_EN;      /* IRQ Enable Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t XTMR : 32;      /* Alarm/Watchdog/Safe request timer. The current timer value i .. */
            } B;
        } XTMR;      /* xTMR Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t VL3 : 1;      /* Valid. It indicates that the correspondent MCSx and FSx fiel .. */
                vuint32_t FS3 : 1;      /* Fault status. It indicates that the correspondent MCSx field .. */
                vuint32_t : 2;
                vuint32_t MCS3 : 4;      /* Magic carpet state. The MCSx is the magic carpet state. On a .. */
                vuint32_t VL2 : 1;      /* Valid. It indicates that the correspondent MCSx and FSx fiel .. */
                vuint32_t FS2 : 1;      /* Fault status. It indicates that the correspondent MCSx field .. */
                vuint32_t : 2;
                vuint32_t MCS2 : 4;      /* Magic carpet state. The MCSx is the magic carpet state. On a .. */
                vuint32_t VL1 : 1;      /* Valid. It indicates that the correspondent MCSx and FSx fiel .. */
                vuint32_t FS1 : 1;      /* Fault status. It indicates that the correspondent MCSx field .. */
                vuint32_t : 2;
                vuint32_t MCS1 : 4;      /* Magic carpet state. The MCSx is the magic carpet state. On a .. */
                vuint32_t VL0 : 1;      /* Valid. It indicates that the correspondent MCSx and FSx fiel .. */
                vuint32_t FS0 : 1;      /* Fault status. It indicates that the correspondent MCSx field .. */
                vuint32_t : 2;
                vuint32_t MCS0 : 4;      /* Magic carpet state. The MCSx is the magic carpet state. On a .. */
            } B;
        } MCS;      /* MCS Register */
    };                                             /* End of FCCU_tag */ 
#define FCCU  (*(volatile struct FCCU_tag *)         0xFFE6C000UL)

/*---------------------------------------------------------------------------*/
/* Sine wave generator                                                       */
/*---------------------------------------------------------------------------*/
    struct SWG_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t LDOS : 1;      /* Load sine wave frequency */
                vuint32_t NRO : 1;      /* Noise reduction enable */
                vuint32_t IOAMPL : 4;      /* Output sine wave amplitude */
                vuint32_t : 2;
                vuint32_t SEMASK : 1;      /* SWG error interrupt mask */
                vuint32_t : 5;
                vuint32_t S0H1 : 1;      /* Stop mode behavior */
                vuint32_t PDS : 1;      /* Enter/exit Power Down mode */
                vuint32_t IOFREQ : 16;      /* Output sine wave frequency */
            } B;
        } CTRL;      /* SWG control register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t SERR : 1;      /* Error interrupt status bit */
                vuint32_t : 3;
                vuint32_t FERR : 1;      /* Force error interrupt */
            } B;
        } STAT;      /* SWG status register */
    };                                             /* End of SWG_tag */ 
#define SWG  (*(volatile struct SWG_tag *)          0xFFE78000UL)

/*---------------------------------------------------------------------------*/
/* Platform Flash Module and Flash Bus Interface Unit                        */
/*---------------------------------------------------------------------------*/
    struct PFLASH_tag {

        int8_t Reserved128[28];

        union {
            vuint32_t R;
            struct {
                vuint32_t B02_APC : 5;      /* Bank0+2 Address Pipelining Control. This field is used to co .. */
                vuint32_t B02_WWSC : 5;      /* Bank0+2 Write Wait State Control. This field is used to cont .. */
                vuint32_t B02_RWSC : 5;      /* Bank0+2 Read Wait State Control. This field is used to contr .. */
                vuint32_t B02_RWWC1 : 2;      /* Bank0+2 Read-While-Write Control. Bit 2-1. This 3-bit field  .. */
                vuint32_t B02_P1_BCFG : 2;      /* Bank0+2, Port 1 Page Buffer Configuration. This field contro .. */
                vuint32_t B02_P1_DPFE : 1;      /* Bank0+2, Port 1 Data Prefetch Enable. This field enables or  .. */
                vuint32_t B02_P1_IPFE : 1;      /* Bank0+2, Port 1 Instruction Prefetch Enable. This field enab .. */
                vuint32_t B02_P1_PFLM : 2;      /* Bank0+2, Port 1 Prefetch Limit. This field controls the pref .. */
                vuint32_t B02_P1_BFE : 1;      /* Bank0+2, Port 1 Buffer Enable. This bit enables or disables  .. */
                vuint32_t B02_RWWC0 : 1;      /* Bank0+2 Read-While-Write Control. Bit 0. This 3-bit field de .. */
                vuint32_t B02_P0_BCFG : 2;      /* Bank0+2, Port 0 Page Buffer Configuration. This field contro .. */
                vuint32_t B02_P0_DPFE : 1;      /* Bank0+2, Port 0 Data Prefetch Enable. This field enables or  .. */
                vuint32_t B02_P0_IPFE : 1;      /* Bank0+2, Port 0 Instruction Prefetch Enable. This field enab .. */
                vuint32_t B02_P0_PFLM : 2;      /* Bank0+2, Port 0 Prefetch Limit. This field controls the pref .. */
                vuint32_t B02_P0_BFE : 1;      /* Bank0+2, Port 0 Buffer Enable. This bit enables or disables  .. */
            } B;
        } PFCR0;      /* Platform Flash Configuration Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t B1_APC : 5;      /* Bank1 Address Pipelining Control. This field is used to cont .. */
                vuint32_t B1_WWSC : 5;      /* Bank1 Write Wait State Control. This field is used to contro .. */
                vuint32_t B1_RWSC : 5;      /* Bank1 Read Wait State Control. This field is used to control .. */
                vuint32_t B1_RWWC1 : 2;      /* Bank1 Read-While-Write Control. Bit 2-1. This 3-bit field de .. */
                vuint32_t : 6;
                vuint32_t B1_P1_BFE : 1;      /* Bank1, Port 1 Buffer Enable. This bit enables or disables re .. */
                vuint32_t B1_RWWC0 : 1;      /* Bank1 Read-While-Write Control. Bit 0. This 3-bit field defi .. */
                vuint32_t : 6;
                vuint32_t B1_P0_BFE : 1;      /* Bank1, Port 0 Buffer Enable. This bit enables or disables re .. */
            } B;
        } PFCR1;      /* Platform Flash Configuration Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 6;
                vuint32_t ARBM : 2;      /* Arbitration Mode. This 2-bit field controls the arbitration  .. */
                vuint32_t M7PFD : 1;      /* Master x Prefetch Disable. These bits control whether prefet .. */
                vuint32_t M6PFD : 1;      /* Master x Prefetch Disable. These bits control whether prefet .. */
                vuint32_t M5PFD : 1;      /* Master x Prefetch Disable. These bits control whether prefet .. */
                vuint32_t M4PFD : 1;      /* Master x Prefetch Disable. These bits control whether prefet .. */
                vuint32_t M3PFD : 1;      /* Master x Prefetch Disable. These bits control whether prefet .. */
                vuint32_t M2PFD : 1;      /* Master x Prefetch Disable. These bits control whether prefet .. */
                vuint32_t M1PFD : 1;      /* Master x Prefetch Disable. These bits control whether prefet .. */
                vuint32_t M0PFD : 1;      /* Master x Prefetch Disable. These bits control whether prefet .. */
                vuint32_t M7AP : 2;      /* Master x Access Protection . These fields control whether re .. */
                vuint32_t M6AP : 2;      /* Master x Access Protection . These fields control whether re .. */
                vuint32_t M5AP : 2;      /* Master x Access Protection . These fields control whether re .. */
                vuint32_t M4AP : 2;      /* Master x Access Protection . These fields control whether re .. */
                vuint32_t M3AP : 2;      /* Master x Access Protection . These fields control whether re .. */
                vuint32_t M2AP : 2;      /* Master x Access Protection . These fields control whether re .. */
                vuint32_t M1AP : 2;      /* Master x Access Protection . These fields control whether re .. */
                vuint32_t M0AP : 2;      /* Master x Access Protection . These fields control whether re .. */
            } B;
        } PFAPR;      /* Platform Flash Access Protection Register */
    };                                             /* End of PFLASH_tag */ 
#define PFLASH  (*(volatile struct PFLASH_tag *)       0xFFE88000UL)

/*---------------------------------------------------------------------------*/
/* Peripheral Bridge                                                         */
/*---------------------------------------------------------------------------*/
    struct AIPS_LITE_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MTR0 : 1;      /* Master trusted for reads. Determines whether the master is t .. */
                vuint32_t MTW0 : 1;      /* Master trusted for writes. Determines whether the master is  .. */
                vuint32_t MPL0 : 1;      /* Master privilege level. Determines how the privilege level o .. */
                vuint32_t : 1;
                vuint32_t MTR1 : 1;      /* Master trusted for reads. Determines whether the CPU is trus .. */
                vuint32_t MTW1 : 1;      /* Master trusted for writes. Determines whether the master is  .. */
                vuint32_t MPL1 : 1;      /* Master privilege level. Determines how the privilege level o .. */
                vuint32_t : 1;
                vuint32_t MTR2 : 1;      /* Master trusted for reads. Determines whether the FEC is trus .. */
                vuint32_t MTW2 : 1;      /* Master trusted for writes. Determines whether the master is  .. */
                vuint32_t MPL2 : 1;      /* Master privilege level. Determines how the privilege level o .. */
                vuint32_t : 1;
                vuint32_t MTR3 : 1;      /* Master trusted for reads. Determines whether the FEC is trus .. */
                vuint32_t MTW3 : 1;      /* Master trusted for writes. Determines whether the master is  .. */
                vuint32_t MPL3 : 1;      /* Master privilege level. Determines how the privilege level o .. */
                vuint32_t : 9;
                vuint32_t MTR6 : 1;      /* Master trusted for reads. Determines whether the FEC is trus .. */
                vuint32_t MTW6 : 1;      /* Master trusted for writes. Determines whether the master is  .. */
                vuint32_t MPL6 : 1;      /* Master privilege level. Determines how the privilege level o .. */
            } B;
        } MPROT0;      /* Master privilege register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MTR8 : 1;      /* Master trusted for reads. Determines whether the master is t .. */
                vuint32_t MTW8 : 1;      /* Master trusted for writes. Determines whether the master is  .. */
                vuint32_t MPL8 : 1;      /* Master privilege level. Determines how the privilege level o .. */
                vuint32_t : 1;
                vuint32_t MTR9 : 1;      /* Master trusted for reads. Determines whether the CPU is trus .. */
                vuint32_t MTW9 : 1;      /* Master trusted for writes. Determines whether the master is  .. */
                vuint32_t MPL9 : 1;      /* Master privilege level. Determines how the privilege level o .. */
            } B;
        } MPROT1;      /* Master privilege register 1 */

        int8_t Reserved129[24];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t SP0 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP0 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP0 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP1 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP1 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP1 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 9;
                vuint32_t SP4 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP4 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP4 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } PACR0;      /* Peripheral access control register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 5;
                vuint32_t SP9 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP9 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP9 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 17;
                vuint32_t SP14 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP14 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP14 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP15 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP15 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP15 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } PACR1;      /* Peripheral access control register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t SP16 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP16 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP17 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP18 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP18 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP18 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } PACR2;      /* Peripheral access control register 2 */

        int8_t Reserved130[20];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 17;
                vuint32_t SP4 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP4 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP4 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP5 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP5 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP5 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP6 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP6 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP6 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } OPACR0;      /* Off-platform peripheral access control register 0 */

        int8_t Reserved131[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t SP16 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP16 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP16 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP17 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP17 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP17 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 21;
                vuint32_t SP23 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP23 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP23 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } OPACR2;      /* Off-platform peripheral access control register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t SP24 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP24 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP24 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 25;
                vuint32_t SP31 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP31 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP31 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } OPACR3;      /* Off-platform peripheral access control register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t SP32 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP32 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP32 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP33 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP33 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP33 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 5;
                vuint32_t SP35 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP35 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP35 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 10;
                vuint32_t SP38 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP38 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP38 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t SP39 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP39 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP39 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } OPACR4;      /* Off-platform peripheral access control register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t SP40 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP40 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP40 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP41 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP41 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP41 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP42 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP42 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP42 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } OPACR5;      /* Off-platform peripheral access control register 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t SP48 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP48 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP48 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP49 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP49 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP49 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } OPACR6;      /* Off-platform peripheral access control register 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 9;
                vuint32_t SP58 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP58 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP58 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP59 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP59 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP59 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } OPACR7;      /* Off-platform peripheral access control register 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 17;
                vuint32_t SP68 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP68 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP68 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP69 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP69 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP69 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } OPACR8;      /* Off-platform peripheral access control register 8 */

        int8_t Reserved132[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 25;
                vuint32_t SP86 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP86 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP86 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP87 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP87 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP87 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } OPACR10;      /* Off-platform peripheral access control register 10 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t SP88 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP88 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP88 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP89 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP89 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP89 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP90 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP90 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP90 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 5;
                vuint32_t SP92 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP92 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP92 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
                vuint32_t : 1;
                vuint32_t SP93 : 1;      /* Supervisor protect. Determines whether the peripheral requir .. */
                vuint32_t WP93 : 1;      /* Write protect. Determines whether the peripheral allows writ .. */
                vuint32_t TP93 : 1;      /* Trusted protect. Determines whether the peripheral allows ac .. */
            } B;
        } OPACR11;      /* Off-platform peripheral access control register 11 */
    };                                             /* End of AIPS_LITE_tag */ 
#define AIPS_LITE  (*(volatile struct AIPS_LITE_tag *)    0xFFF00000UL)

/*---------------------------------------------------------------------------*/
/* System Bus Crossbar Switch                                                */
/*---------------------------------------------------------------------------*/
    struct XBAR_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } MPR0;      /* Master priority register for slave port 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } AMPR0;      /* Alternate Master priority register for slave port 0 */

        int8_t Reserved133[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t RO : 1;      /* Read only. Used to force all of a slave port's registers to  .. */
                vuint32_t HLP : 1;      /* Halt Low Priority. This bit is used to set the initial arbit .. */
                vuint32_t : 6;
                vuint32_t HPE7 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE6 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE5 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE4 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE3 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE2 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE1 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE0 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t : 6;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } SGPCR0;      /* Slave General-purpose control register for slave port 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t HLP : 1;      /* Halt Low Priority. This bit is used to set the initial arbit .. */
                vuint32_t : 6;
                vuint32_t HPE7 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE6 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE5 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE4 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE3 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE2 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE1 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE0 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t : 6;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } ASGPCR0;      /* Alternate Slave General-purpose control register for slave port 0 */

        int8_t Reserved134[232];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } MPR1;      /* Master priority register for slave port 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } AMPR1;      /* Alternate Master priority register for slave port 0 */

        int8_t Reserved135[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t RO : 1;      /* Read only. Used to force all of a slave port's registers to  .. */
                vuint32_t : 21;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } SGPCR1;      /* General-purpose control register for slave port 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t HLP : 1;      /* Halt Low Priority. This bit is used to set the initial arbit .. */
                vuint32_t : 6;
                vuint32_t HPE7 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE6 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE5 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE4 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE3 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE2 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE1 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE0 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t : 6;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } ASGPCR1;      /* Alternate Slave General-purpose control register for slave port 0 */

        int8_t Reserved136[232];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } MPR2;      /* Master priority register for slave port 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } AMPR2;      /* Alternate Master priority register for slave port 0 */

        int8_t Reserved137[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t RO : 1;      /* Read only. Used to force all of a slave port's registers to  .. */
                vuint32_t : 21;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } SGPCR2;      /* General-purpose control register for slave port 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t HLP : 1;      /* Halt Low Priority. This bit is used to set the initial arbit .. */
                vuint32_t : 6;
                vuint32_t HPE7 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE6 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE5 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE4 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE3 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE2 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE1 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE0 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t : 6;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } ASGPCR2;      /* Alternate Slave General-purpose control register for slave port 0 */

        int8_t Reserved138[232];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } MPR3;      /* Master priority register for slave port 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } AMPR3;      /* Alternate Master priority register for slave port 0 */

        int8_t Reserved139[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t RO : 1;      /* Read only. Used to force all of a slave port's registers to  .. */
                vuint32_t : 21;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } SGPCR3;      /* General-purpose control register for slave port 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t HLP : 1;      /* Halt Low Priority. This bit is used to set the initial arbit .. */
                vuint32_t : 6;
                vuint32_t HPE7 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE6 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE5 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE4 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE3 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE2 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE1 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE0 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t : 6;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } ASGPCR3;      /* Alternate Slave General-purpose control register for slave port 0 */

        int8_t Reserved140[232];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } MPR4;      /* Master priority register for slave port 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } AMPR4;      /* Alternate Master priority register for slave port 0 */

        int8_t Reserved141[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t RO : 1;      /* Read only. Used to force all of a slave port's registers to  .. */
                vuint32_t : 21;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } SGPCR4;      /* General-purpose control register for slave port 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t HLP : 1;      /* Halt Low Priority. This bit is used to set the initial arbit .. */
                vuint32_t : 6;
                vuint32_t HPE7 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE6 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE5 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE4 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE3 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE2 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE1 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE0 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t : 6;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } ASGPCR4;      /* Alternate Slave General-purpose control register for slave port 0 */

        int8_t Reserved142[232];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } MPR5;      /* Master priority register for slave port 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } AMPR5;      /* Alternate Master priority register for slave port 0 */

        int8_t Reserved143[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t RO : 1;      /* Read only. Used to force all of a slave port's registers to  .. */
                vuint32_t : 21;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } SGPCR5;      /* General-purpose control register for slave port 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t HLP : 1;      /* Halt Low Priority. This bit is used to set the initial arbit .. */
                vuint32_t : 6;
                vuint32_t HPE7 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE6 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE5 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE4 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE3 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE2 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE1 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE0 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t : 6;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } ASGPCR5;      /* Alternate Slave General-purpose control register for slave port 0 */

        int8_t Reserved144[232];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } MPR6;      /* Master priority register for slave port 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } AMPR6;      /* Alternate Master priority register for slave port 0 */

        int8_t Reserved145[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t RO : 1;      /* Read only. Used to force all of a slave port's registers to  .. */
                vuint32_t : 21;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } SGPCR6;      /* General-purpose control register for slave port 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t HLP : 1;      /* Halt Low Priority. This bit is used to set the initial arbit .. */
                vuint32_t : 6;
                vuint32_t HPE7 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE6 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE5 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE4 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE3 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE2 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE1 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE0 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t : 6;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } ASGPCR6;      /* Alternate Slave General-purpose control register for slave port 0 */

        int8_t Reserved146[232];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } MPR7;      /* Master priority register for slave port 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t MSTR7 : 3;      /* Master 7 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR6 : 3;      /* Master 6 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR5 : 3;      /* Master 5 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR4 : 3;      /* Master 4 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR3 : 3;      /* Master 3 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR2 : 3;      /* Master 2 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR1 : 3;      /* Master 1 priority. Set the arbitration priority for master p .. */
                vuint32_t : 1;
                vuint32_t MSTR0 : 3;      /* Master 0 priority. Set the arbitration priority for master p .. */
            } B;
        } AMPR7;      /* Alternate Master priority register for slave port 0 */

        int8_t Reserved147[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t RO : 1;      /* Read only. Used to force all of a slave port's registers to  .. */
                vuint32_t : 21;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } SGPCR7;      /* General-purpose control register for slave port 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t HLP : 1;      /* Halt Low Priority. This bit is used to set the initial arbit .. */
                vuint32_t : 6;
                vuint32_t HPE7 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE6 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE5 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE4 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE3 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE2 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE1 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t HPE0 : 1;      /* High Priority Enable. These bits are used to enable the mX_h .. */
                vuint32_t : 6;
                vuint32_t ARB : 2;      /* Arbitration mode. Used to select the arbitration policy for  .. */
                vuint32_t : 2;
                vuint32_t PCTL : 2;      /* Parking control. Used to select the parking algorithm used b .. */
                vuint32_t : 1;
                vuint32_t PARK : 3;      /* Park. Used to determine which master port this slave port pa .. */
            } B;
        } ASGPCR7;      /* Alternate Slave General-purpose control register for slave port 0 */

        int8_t Reserved148[232];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t AULB : 3;      /* Arbitrate on Undefined Length Bursts. These bits are used to .. */
            } B;
        } MGPCR0;      /* Master General Purpose Control Register 0 */

        int8_t Reserved149[252];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t AULB : 3;      /* Arbitrate on Undefined Length Bursts. These bits are used to .. */
            } B;
        } MGPCR1;      /* Master General Purpose Control Register 0 */

        int8_t Reserved150[252];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t AULB : 3;      /* Arbitrate on Undefined Length Bursts. These bits are used to .. */
            } B;
        } MGPCR2;      /* Master General Purpose Control Register 0 */

        int8_t Reserved151[252];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t AULB : 3;      /* Arbitrate on Undefined Length Bursts. These bits are used to .. */
            } B;
        } MGPCR3;      /* Master General Purpose Control Register 0 */

        int8_t Reserved152[252];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t AULB : 3;      /* Arbitrate on Undefined Length Bursts. These bits are used to .. */
            } B;
        } MGPCR4;      /* Master General Purpose Control Register 0 */

        int8_t Reserved153[252];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t AULB : 3;      /* Arbitrate on Undefined Length Bursts. These bits are used to .. */
            } B;
        } MGPCR5;      /* Master General Purpose Control Register 0 */

        int8_t Reserved154[252];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t AULB : 3;      /* Arbitrate on Undefined Length Bursts. These bits are used to .. */
            } B;
        } MGPCR6;      /* Master General Purpose Control Register 0 */

        int8_t Reserved155[252];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 29;
                vuint32_t AULB : 3;      /* Arbitrate on Undefined Length Bursts. These bits are used to .. */
            } B;
        } MGPCR7;      /* Master General Purpose Control Register 0 */
    };                                             /* End of XBAR_tag */ 
#define XBAR  (*(volatile struct XBAR_tag *)         0xFFF04000UL)

/*---------------------------------------------------------------------------*/
/* Memory Protection Unit                                                    */
/*---------------------------------------------------------------------------*/
    struct MPU_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t SPERR : 8;      /* Slave Port n Error, where the slave port number matches the  .. */
                vuint32_t : 4;
                vuint32_t HRL : 4;      /* HRL Hardware Revision Level. This 4-bit read-only field spec .. */
                vuint32_t NSP : 4;      /* Number of MPU/Slave Ports. This 4-bit read-only field specif .. */
                vuint32_t NRGD : 4;      /* Number of Region Descriptors. This 4-bit read-only field spe .. */
                vuint32_t : 7;
                vuint32_t VLD : 1;      /* Valid. This bit provides a global enable/disable for the MPU .. */
            } B;
        } CESR;      /* MPU Control/Error Status Register */

        int8_t Reserved156[12];

        union {
            vuint32_t R;
            struct {
                vuint32_t EADDR : 32;      /* Error Address. This read-only field is the reference address .. */
            } B;
        } EAR0;      /* MPU Error Address Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t EACD : 16;      /* Error Access Control Detail. This 16-bit read-only field imp .. */
                vuint32_t EPID : 8;      /* Error Process Identification. This 8-bit read-only field rec .. */
                vuint32_t EMN : 4;      /* Error Master Number. This 4-bit read-only field records the  .. */
                vuint32_t EATTR : 3;      /* Error Attributes. This 3-bit read-only field records attribu .. */
                vuint32_t ERW : 1;      /* Error Read/Write. This 1-bit read-only field signals the acc .. */
            } B;
        } EDR0;      /* MPU Error Detail Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t EADDR : 32;      /* Error Address. This read-only field is the reference address .. */
            } B;
        } EAR1;      /* MPU Error Address Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t EACD : 16;      /* Error Access Control Detail. This 16-bit read-only field imp .. */
                vuint32_t EPID : 8;      /* Error Process Identification. This 8-bit read-only field rec .. */
                vuint32_t EMN : 4;      /* Error Master Number. This 4-bit read-only field records the  .. */
                vuint32_t EATTR : 3;      /* Error Attributes. This 3-bit read-only field records attribu .. */
                vuint32_t ERW : 1;      /* Error Read/Write. This 1-bit read-only field signals the acc .. */
            } B;
        } EDR1;      /* MPU Error Detail Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t EADDR : 32;      /* Error Address. This read-only field is the reference address .. */
            } B;
        } EAR2;      /* MPU Error Address Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t EACD : 16;      /* Error Access Control Detail. This 16-bit read-only field imp .. */
                vuint32_t EPID : 8;      /* Error Process Identification. This 8-bit read-only field rec .. */
                vuint32_t EMN : 4;      /* Error Master Number. This 4-bit read-only field records the  .. */
                vuint32_t EATTR : 3;      /* Error Attributes. This 3-bit read-only field records attribu .. */
                vuint32_t ERW : 1;      /* Error Read/Write. This 1-bit read-only field signals the acc .. */
            } B;
        } EDR2;      /* MPU Error Detail Register */

        int8_t Reserved157[984];

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD0_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD0_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD0_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD0_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD1_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD1_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master ID 7 Write Enable. If set, this flag allows bus m .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master ID 6 Write Enable. If set, this flag allows bus m .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master ID 5 Write Enable. If set, this flag allows bus m .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master ID 4 Write Enable. If set, this flag allows bus m .. */
                vuint32_t M3PE : 1;      /* This be can be read and written to either a 0 or 1, but the  .. */
                vuint32_t M3SM : 2;      /* Bus Master ID 3 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M3UM_R : 1;      /* Bus Master ID 3 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M3UM_W : 1;      /* Bus Master ID 3 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M3UM_X : 1;      /* Bus Master ID 3 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2PE : 1;      /* This bit can be read and written to either a 0 or 1, but the .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGD1_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD1_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD2_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD2_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD2_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD2_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD3_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD3_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD3_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD3_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD4_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD4_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD4_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD4_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD5_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD5_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD5_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD5_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD6_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD6_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD6_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD6_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD7_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD7_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD7_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD7_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD8_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD8_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD8_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD8_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD9_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD9_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD9_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD9_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD10_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD10_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD10_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD10_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD11_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD11_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD11_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD11_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD12_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD12_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD12_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD12_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD13_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD13_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD13_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD13_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD14_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD14_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD14_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD14_WORD3;      /* MPU Region Descriptor Word 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SRTADDR : 27;      /* Start Address. This field defines the most significant bits  .. */
            } B;
        } RGD15_WORD0;      /* MPU Region Descriptor Word 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t ENDADDR : 27;      /* End Address. This field defines the most significant bits of .. */
            } B;
        } RGD15_WORD1;      /* MPU Region Descriptor Word 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 8;
                vuint32_t M3PE : 1;      /* Bus master 3 process identifier enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus master 3 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M3UM : 3;      /* Bus master 3 user mode access control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus master 2 process identifier enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus master 2 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M2UM : 3;      /* Bus master 2 user mode access control. This 3-bit field defi .. */
                vuint32_t M1PE : 1;      /* Bus master_1 process identifier enable. If set, this flag sp .. */
                vuint32_t M1SM : 2;      /* Bus master_1 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M1UM : 3;      /* Bus master_1 user mode access control. This 3-bit field defi .. */
                vuint32_t M0PE : 1;      /* Bus master_0 process identifier enable. If set, this flag sp .. */
                vuint32_t M0SM : 2;      /* Bus master_0 supervisor mode access control. This 2-bit fiel .. */
                vuint32_t M0UM : 3;      /* Bus master_0 user mode access control. This 3-bit field defi .. */
            } B;
        } RGD15_WORD2;      /* MPU Region Descriptor Word 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t PID : 8;      /* Process Identifier. This 8-bit field specifies that the opti .. */
                vuint32_t PIDMASK : 8;      /* Process Identifier Mask. This 8-bit field provides a masking .. */
                vuint32_t : 15;
                vuint32_t VLD : 1;      /* Valid. This bit signals the region descriptor is valid. Any  .. */
            } B;
        } RGD15_WORD3;      /* MPU Region Descriptor Word 3 */

        int8_t Reserved158[768];

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC0;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC1;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC2;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC3;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC4;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC5;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC6;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC7;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC8;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC9;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC10;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC11;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC12;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC13;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC14;      /* MPU Region Descriptor Alternate Access Control */

        union {
            vuint32_t R;
            struct {
                vuint32_t M7RE : 1;      /* Bus Master ID 7 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M7WE : 1;      /* Bus Master 7 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M6RE : 1;      /* Bus Master ID 6 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M6WE : 1;      /* Bus Master 6 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M5RE : 1;      /* Bus Master ID 5 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M5WE : 1;      /* Bus Master 5 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M4RE : 1;      /* Bus Master ID 4 Read Enable. If set, this flag allows bus ma .. */
                vuint32_t M4WE : 1;      /* Bus Master 4 Write Enable. If set, this flag allows bus mast .. */
                vuint32_t M3PE : 1;      /* Bus Master 3 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M3SM : 2;      /* Bus Master 3 Supervisor Mode Access Control. This 2-bit fiel .. */
                vuint32_t M3UM_R : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_W : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M3UM_X : 1;      /* Bus Master 3 User Mode Access Control. This 3-bit field defi .. */
                vuint32_t M2PE : 1;      /* Bus Master 2 Process Identifier Enable. If set, this flag sp .. */
                vuint32_t M2SM : 2;      /* Bus Master ID 2 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M2UM_R : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_W : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M2UM_X : 1;      /* Bus Master ID 2 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1PE : 1;      /* Bus Master ID 1 Process Identifier Enable. If set, this flag .. */
                vuint32_t M1SM : 2;      /* Bus Master ID 1 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M1UM_R : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_W : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M1UM_X : 1;      /* Bus Master ID 1 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0PE : 1;      /* Bus Master ID 0 Process Identifier Enable. If set, this flag .. */
                vuint32_t M0SM : 2;      /* Bus Master ID 0 Supervisor Mode Access Control. This 2-bit f .. */
                vuint32_t M0UM_R : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_W : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
                vuint32_t M0UM_X : 1;      /* Bus Master ID 0 User Mode Access Control. This 3-bit field d .. */
            } B;
        } RGDAAC15;      /* MPU Region Descriptor Alternate Access Control */
    };                                             /* End of MPU_tag */ 
#define MPU  (*(volatile struct MPU_tag *)          0xFFF10000UL)

/*---------------------------------------------------------------------------*/
/* Software Watchdog Timer                                                   */
/*---------------------------------------------------------------------------*/
    struct SWT_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t MAP0 : 1;      /* Master Access Protection for Master n. The platform bus mast .. */
                vuint32_t MAP1 : 1;      /* Master Access Protection for Master n. The platform bus mast .. */
                vuint32_t MAP2 : 1;      /* Master Access Protection for Master n. The platform bus mast .. */
                vuint32_t MAP3 : 1;      /* Master Access Protection for Master n. The platform bus mast .. */
                vuint32_t MAP4 : 1;      /* Master Access Protection for Master n. The platform bus mast .. */
                vuint32_t MAP5 : 1;      /* Master Access Protection for Master n. The platform bus mast .. */
                vuint32_t MAP6 : 1;      /* Master Access Protection for Master n. The platform bus mast .. */
                vuint32_t MAP7 : 1;      /* Master Access Protection for Master n. The platform bus mast .. */
                vuint32_t : 14;
                vuint32_t KEY : 1;      /* Keyed Service Mode. */
                vuint32_t RIA : 1;      /* Reset on Invalid Access */
                vuint32_t WNO : 1;      /* Window Mode */
                vuint32_t ITR : 1;      /* Interrupt Then Reset */
                vuint32_t HLK : 1;      /* Hard Lock. This bit is only cleared at reset */
                vuint32_t SLK : 1;      /* Soft Lock. This bit is cleared by writing the unlock sequenc .. */
                vuint32_t CSL : 1;      /* Clock Selection. Selects the clock that drives the internal  .. */
                vuint32_t STP : 1;      /* Stop Mode Control. Allows the watchdog timer to be stopped w .. */
                vuint32_t FRZ : 1;      /* Debug Mode Control. Allows the watchdog timer to be stopped  .. */
                vuint32_t WEN : 1;      /* Watchdog Enabled */
            } B;
        } CR;      /* Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t TIF : 1;      /* Time-out Interrupt Flag. The flag and interrupt are cleared  .. */
            } B;
        } IR;      /* Interrupt Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t WTO : 32;      /* Watchdog time-out period in clock cycles. An internal 32-bit .. */
            } B;
        } TO;      /* Time-out Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t WST : 32;      /* Window start value. When window mode is enabled, the service .. */
            } B;
        } WN;      /* Window Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t WSC : 16;      /* Watchdog Service Code.This field is used to service the watc .. */
            } B;
        } SR;      /* Service Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CNT : 32;      /* Watchdog Count. When the watchdog is disabled (SWT_CR[WEN]=0 .. */
            } B;
        } CO;      /* Counter Output Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t SK : 16;      /* Service Key.This field is the previous (or initial) service  .. */
            } B;
        } SK;      /* Service Key Register */
    };                                             /* End of SWT_tag */ 
#define SWT  (*(volatile struct SWT_tag *)          0xFFF38000UL)

/*---------------------------------------------------------------------------*/
/* System Timer Module                                                       */
/*---------------------------------------------------------------------------*/
    struct STM_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t CPS : 8;      /* Counter Prescaler. Selects the clock divide value for the pr .. */
                vuint32_t : 6;
                vuint32_t FRZ : 1;      /* Freeze. Allows the timer counter to be stopped when the devi .. */
                vuint32_t TEN : 1;      /* Timer Counter Enabled. */
            } B;
        } CR;      /* Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CNT : 32;      /* Timer count value used as the time base for all channels. Wh .. */
            } B;
        } CNT;      /* Counter Value */

        int8_t Reserved159[8];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t CEN : 1;      /* Channel Enable. */
            } B;
        } CCR0;      /* Channel 0 Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t CIF : 1;      /* Channel Interrupt Flag. The flag and interrupt are cleared b .. */
            } B;
        } CIR0;      /* Channel 0 Interrupt Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CMP : 32;      /* Compare value for channel n. If the STM_CCRn[CEN] bit is set .. */
            } B;
        } CMP0;      /* Channel 0 Compare Register */

        int8_t Reserved160[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t CEN : 1;      /* Channel Enable. */
            } B;
        } CCR1;      /* Channel 1 Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t CIF : 1;      /* Channel Interrupt Flag. The flag and interrupt are cleared b .. */
            } B;
        } CIR1;      /* Channel 1 Interrupt Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CMP : 32;      /* Compare value for channel n. If the STM_CCRn[CEN] bit is set .. */
            } B;
        } CMP1;      /* Channel 1 Compare Register */

        int8_t Reserved161[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t CEN : 1;      /* Channel Enable. */
            } B;
        } CCR2;      /* Channel 2 Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t CIF : 1;      /* Channel Interrupt Flag. The flag and interrupt are cleared b .. */
            } B;
        } CIR2;      /* Channel 2 Interrupt Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CMP : 32;      /* Compare value for channel n. If the STM_CCRn[CEN] bit is set .. */
            } B;
        } CMP2;      /* Channel 2 Compare Register */

        int8_t Reserved162[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t CEN : 1;      /* Channel Enable. */
            } B;
        } CCR3;      /* Channel 3 Control Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 31;
                vuint32_t CIF : 1;      /* Channel Interrupt Flag. The flag and interrupt are cleared b .. */
            } B;
        } CIR3;      /* Channel 3 Interrupt Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CMP : 32;      /* Compare value for channel n. If the STM_CCRn[CEN] bit is set .. */
            } B;
        } CMP3;      /* Channel 3 Compare Register */
    };                                             /* End of STM_tag */ 
#define STM  (*(volatile struct STM_tag *)          0xFFF3C000UL)

/*---------------------------------------------------------------------------*/
/* Error Correction Status Module                                            */
/*---------------------------------------------------------------------------*/
    struct ECSM_tag {

        union {
            vuint16_t R;
            struct {
                vuint16_t PCT : 16;      /* Processor Core Type */
            } B;
        } PCT;      /* Processor Core Type Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t REV : 16;      /* Revision. The REV[0:15] field is specified by an input signa .. */
            } B;
        } REV;      /* Revision Register */

        int8_t Reserved163[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t MC : 32;      /* IPS Module Configuration */
            } B;
        } IMC;      /* IPS Module Configuration Register */

        int8_t Reserved164[3];

        union {
            vuint8_t R;
            struct {
                vuint8_t POR : 1;      /* Power-On Reset */
                vuint8_t DIR : 1;      /* Device Input Reset */
            } B;
        } MRSR;      /* Miscellaneous Reset Status Register */

        int8_t Reserved165[20];

        union {
            vuint32_t R;
            struct {
                vuint32_t MUDCR_0 : 1;      /* Enable Crossbar Round-Robin Arbitration */
                vuint32_t MUDCR_1 : 1;      /* PRAM wait-state control. This bit is used to select whether  .. */
                vuint32_t : 14;
                vuint32_t MUDCR_2 : 1;      /* Enable Crossbar Round-Robin Arbitration */
            } B;
        } MUDCR;      /* Miscellaneous User-Defined Control Register */

        int8_t Reserved166[27];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 2;
                vuint8_t ER1BR : 1;      /* Enable RAM 1-bit Reporting */
                vuint8_t EF1BR : 1;      /* Enable Flash 1-bit Reporting */
                vuint8_t : 2;
                vuint8_t ERNCR : 1;      /* Enable RAM Non-Correctable Reporting */
                vuint8_t EFNCR : 1;      /* Enable Flash Non-Correctable Reporting */
            } B;
        } ECR;      /* ECC Configuration Register */

        int8_t Reserved167[3];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 2;
                vuint8_t R1BC : 1;      /* RAM 1-bit Correction. This bit can only be set if ECR[EPR1BR .. */
                vuint8_t F1BC : 1;      /* Flash 1-bit Correction. This bit can only be set if ECR[EPF1 .. */
                vuint8_t : 2;
                vuint8_t RNCE : 1;      /* RAM non-correctable error. The occurrence of a properly-enab .. */
                vuint8_t FNCE : 1;      /* Flash non-correctable error. The occurrence of a properly-en .. */
            } B;
        } ESR;      /* ECC Status Register */

        int8_t Reserved168[2];

        union {
            vuint16_t R;
            struct {
                vuint16_t FRCAP : 1;      /* Force Platform RAM Error Injection Access Protection The ass .. */
                vuint16_t : 1;
                vuint16_t FRC1BI : 1;      /* Force RAM Continuous 1-bit Data Inversions The assertion of  .. */
                vuint16_t FR11BI : 1;      /* Force RAM One 1-bit Data Inversion The assertion of this bit .. */
                vuint16_t : 2;
                vuint16_t FRCNCI : 1;      /* Force RAM Continuous Non-Correctable Data Inversions The ass .. */
                vuint16_t FR1NCI : 1;      /* Force RAM One Non-Correctable Data Inversions The assertion  .. */
                vuint16_t : 1;
                vuint16_t ERRBIT : 7;      /* The vector defines the bit position which is complemented to .. */
            } B;
        } EEGR;      /* ECC Error Generation Register */

        int8_t Reserved169[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t FEAR : 32;      /* Flash ECC address. Contains the faulting access address of t .. */
            } B;
        } FEAR;      /* Flash ECC Address Register */

        int8_t Reserved170[2];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t FEMR : 4;      /* Flash ECC master number. contains the AxBS bus master number .. */
            } B;
        } FEMR;      /* Flash ECC Master Number Register */

        union {
            vuint8_t R;
            struct {
                vuint8_t WRITE : 1;      /* Write. The reset value of this field is undefined. */
                vuint8_t SIZE : 3;      /* Size. The reset value of this field is undefined. */
                vuint8_t PROT3 : 1;      /* Protection: cache. The reset value of this field is undefine .. */
                vuint8_t PROT2 : 1;      /* Protection: buffer. The reset value of this field is undefin .. */
                vuint8_t PROT1 : 1;      /* Protection: mode. The reset value of this field is undefined .. */
                vuint8_t PROT0 : 1;      /* Protection: type. The reset value of this field is undefined .. */
            } B;
        } FEAT;      /* Flash ECC Attributes Register */

        int8_t Reserved171[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t FED : 32;      /* Flash ECC Data Register. Contains the data associated with t .. */
            } B;
        } FEDR;      /* Flash ECC Data Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t REAR : 32;      /* RAM ECC address. Contains the faulting access address of the .. */
            } B;
        } REAR;      /*  RAM ECC address register */

        int8_t Reserved172[1];

        union {
            vuint8_t R;
            struct {
                vuint8_t RESR : 8;      /* RAM ECC Syndrome Register. This 8-bit syndrome field include .. */
            } B;
        } RESR;      /* RAM ECC Syndrome Register  */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t REMR : 4;      /* RAM ECC address. Contains the faulting access address of the .. */
            } B;
        } REMR;      /* RAM ECC Master Number Register */

        union {
            vuint8_t R;
            struct {
                vuint8_t WRITE : 1;      /* Write. The reset value of this field is undefined. */
                vuint8_t SIZE : 3;      /* Size. The reset value of this field is undefined. */
                vuint8_t PROT3 : 1;      /* Protection: cache. The reset value of this field is undefine .. */
                vuint8_t PROT2 : 1;      /* Protection: buffer. The reset value of this field is undefin .. */
                vuint8_t PROT1 : 1;      /* Protection: mode. The reset value of this field is undefined .. */
                vuint8_t PROT0 : 1;      /* Protection: type. The reset value of this field is undefined .. */
            } B;
        } REAT;      /* RAM ECC Attributes Register */

        int8_t Reserved173[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t REDR : 32;      /* RAM ECC data. Contains the data associated with the faulting .. */
            } B;
        } REDR;      /* RAM ECC Data Register */
    };                                             /* End of ECSM_tag */ 
#define ECSM  (*(volatile struct ECSM_tag *)         0xFFF40000UL)

/*---------------------------------------------------------------------------*/
/* Enhanced Direct Memory Access                                             */
/*---------------------------------------------------------------------------*/
    struct EDMA_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 14;
                vuint32_t CX : 1;      /* Cancel Transfer */
                vuint32_t ECX : 1;      /* Error Cancel Transfer */
                vuint32_t GRP3PRI : 2;      /* Channel group 3 priority. Group 3 priority level when fixed  .. */
                vuint32_t GRP2PRI : 2;      /* Channel group 2 priority. Group 2 priority level when fixed  .. */
                vuint32_t GRP1PRI : 2;      /* Channel group 1 priority. Group 1 priority level when fixed  .. */
                vuint32_t GRP0PRI : 2;      /* Channel group 0 priority. Group 0 priority level when fixed  .. */
                vuint32_t EMLM : 1;      /* Enable Minor Loop Mapping. */
                vuint32_t CLM : 1;      /* Continuous Link Mode */
                vuint32_t HALT : 1;      /* Halt DMA Operations */
                vuint32_t HOE : 1;      /* Halt On Error */
                vuint32_t ERGA : 1;      /* Enable round robin group arbitration. */
                vuint32_t ERCA : 1;      /* Enable round robin channel arbitration. */
                vuint32_t EDBG : 1;      /* Enable debug. */
                vuint32_t EBW : 1;      /* Enable Buffered Writes */
            } B;
        } CR;      /* eDMA control register */

        union {
            vuint32_t R;
            struct {
                vuint32_t VLD : 1;      /* Logical OR of all EDMA_ERH and EDMA_ERL status bits. */
                vuint32_t : 14;
                vuint32_t ECX : 1;      /* Transfer cancelled */
                vuint32_t GPE : 1;      /* Group priority error. */
                vuint32_t CPE : 1;      /* Channel priority error. */
                vuint32_t ERRCHN : 6;      /* Error channel number This is the channel number of the last  .. */
                vuint32_t SAE : 1;      /* Source address error. */
                vuint32_t SOE : 1;      /* Source offset error. */
                vuint32_t DAE : 1;      /* Destination address error. */
                vuint32_t DOE : 1;      /* Destination offset error. */
                vuint32_t NCE : 1;      /* NBYTES/CITER configuration error. */
                vuint32_t SGE : 1;      /* Scatter/gather configuration error. */
                vuint32_t SBE : 1;      /* Source bus error. */
                vuint32_t DBE : 1;      /* Destination bus error. */
            } B;
        } ESR;      /*  eDMA error status register */

        union {
            vuint32_t R;
            struct {
                vuint32_t ERQ63 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ62 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ61 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ60 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ59 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ58 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ57 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ56 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ55 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ54 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ53 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ52 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ51 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ50 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ49 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ48 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ47 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ46 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ45 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ44 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ43 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ42 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ41 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ40 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ39 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ38 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ37 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ36 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ35 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ34 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ33 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ32 : 1;      /* Enable DMA hardware service request n  */
            } B;
        } ERQRH;      /*  eDMA enable request high register (MPC5554 only) */

        union {
            vuint32_t R;
            struct {
                vuint32_t ERQ31 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ30 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ29 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ28 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ27 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ26 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ25 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ24 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ23 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ22 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ21 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ20 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ19 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ18 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ17 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ16 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ15 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ14 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ13 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ12 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ11 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ10 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ9 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ8 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ7 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ6 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ5 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ4 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ3 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ2 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ1 : 1;      /* Enable DMA hardware service request n  */
                vuint32_t ERQ0 : 1;      /* Enable DMA hardware service request n  */
            } B;
        } ERQRL;      /*  eDMA enable request low register */

        union {
            vuint32_t R;
            struct {
                vuint32_t EEI63 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI62 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI61 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI60 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI59 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI58 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI57 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI56 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI55 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI54 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI53 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI52 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI51 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI50 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI49 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI48 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI47 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI46 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI45 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI44 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI43 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI42 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI41 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI40 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI39 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI38 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI37 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI36 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI35 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI34 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI33 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI32 : 1;      /* Enable error interrupt n. */
            } B;
        } EEIRH;      /*  eDMA enable error interrupt high register (MPC5554 only) */

        union {
            vuint32_t R;
            struct {
                vuint32_t EEI31 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI30 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI29 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI28 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI27 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI26 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI25 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI24 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI23 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI22 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI21 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI20 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI19 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI18 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI17 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI16 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI15 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI14 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI13 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI12 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI11 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI10 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI9 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI8 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI7 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI6 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI5 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI4 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI3 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI2 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI1 : 1;      /* Enable error interrupt n. */
                vuint32_t EEI0 : 1;      /* Enable error interrupt n. */
            } B;
        } EEIRL;      /*  eDMA enable error interrupt low register */

        union {
            vuint8_t R;
            struct {
                vuint8_t NOP : 1;      /* No Operation */
                vuint8_t SERQ : 7;      /* Set enable request. 0 63 Set the corresponding bit in EDMA_E .. */
            } B;
        } SERQR;      /*  eDMA set enable request register */

        union {
            vuint8_t R;
            struct {
                vuint8_t NOP : 1;      /* No Operation */
                vuint8_t CERQ : 7;      /* Clear enable request. 0 63 Clear corresponding bit in EDMA_E .. */
            } B;
        } CERQR;      /*  eDMA clear enable request register */

        union {
            vuint8_t R;
            struct {
                vuint8_t NOP : 1;      /* No Operation */
                vuint8_t SEEI : 7;      /* Set enable error interrupt. 0 63 Set the corresponding bit i .. */
            } B;
        } SEEIR;      /*  eDMA set enable error interrupt register */

        union {
            vuint8_t R;
            struct {
                vuint8_t NOP : 1;      /* No Operation */
                vuint8_t CEEI : 7;      /* Clear enable error interrupt 0 63 Clear corresponding bit in .. */
            } B;
        } CEEIR;      /*  eDMA clear enable error interrupt register */

        union {
            vuint8_t R;
            struct {
                vuint8_t NOP : 1;      /* No Operation */
                vuint8_t CINT : 7;      /* Clear interrupt request. 0 63 Clear the corresponding bit in .. */
            } B;
        } CIRQR;      /*  eDMA clear interrupt request register */

        union {
            vuint8_t R;
            struct {
                vuint8_t NOP : 1;      /* No Operation */
                vuint8_t CERR : 7;      /* Clear error indicator. 0 63 Clear corresponding bit in EDMA_ .. */
            } B;
        } CER;      /*  eDMA clear error register */

        union {
            vuint8_t R;
            struct {
                vuint8_t NOP : 1;      /* No Operation */
                vuint8_t SSB : 7;      /* Set START bit (channel service request). 0-63 Set the corres .. */
            } B;
        } SSBR;      /*  eDMA set start bit register */

        union {
            vuint8_t R;
            struct {
                vuint8_t NOP : 1;      /* No Operation */
                vuint8_t CDSB : 7;      /* Clear DONE status bit. 0-63 Clear the corresponding channel' .. */
            } B;
        } CDSBR;      /*  eDMA clear done status bit register */

        union {
            vuint32_t R;
            struct {
                vuint32_t INT63 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT62 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT61 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT60 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT59 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT58 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT57 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT56 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT55 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT54 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT53 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT52 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT51 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT50 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT49 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT48 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT47 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT46 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT45 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT44 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT43 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT42 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT41 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT40 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT39 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT38 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT37 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT36 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT35 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT34 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT33 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT32 : 1;      /* eDMA interrupt request n. */
            } B;
        } IRQRH;      /*  eDMA interrupt request high register (MPC5554 only) */

        union {
            vuint32_t R;
            struct {
                vuint32_t INT31 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT30 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT29 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT28 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT27 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT26 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT25 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT24 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT23 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT22 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT21 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT20 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT19 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT18 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT17 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT16 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT15 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT14 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT13 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT12 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT11 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT10 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT9 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT8 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT7 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT6 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT5 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT4 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT3 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT2 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT1 : 1;      /* eDMA interrupt request n. */
                vuint32_t INT0 : 1;      /* eDMA interrupt request n. */
            } B;
        } IRQRL;      /*  eDMA interrupt request low register */

        union {
            vuint32_t R;
            struct {
                vuint32_t ERR63 : 1;      /* eDMA Error n. */
                vuint32_t ERR62 : 1;      /* eDMA Error n. */
                vuint32_t ERR61 : 1;      /* eDMA Error n. */
                vuint32_t ERR60 : 1;      /* eDMA Error n. */
                vuint32_t ERR59 : 1;      /* eDMA Error n. */
                vuint32_t ERR58 : 1;      /* eDMA Error n. */
                vuint32_t ERR57 : 1;      /* eDMA Error n. */
                vuint32_t ERR56 : 1;      /* eDMA Error n. */
                vuint32_t ERR55 : 1;      /* eDMA Error n. */
                vuint32_t ERR54 : 1;      /* eDMA Error n. */
                vuint32_t ERR53 : 1;      /* eDMA Error n. */
                vuint32_t ERR52 : 1;      /* eDMA Error n. */
                vuint32_t ERR51 : 1;      /* eDMA Error n. */
                vuint32_t ERR50 : 1;      /* eDMA Error n. */
                vuint32_t ERR49 : 1;      /* eDMA Error n. */
                vuint32_t ERR48 : 1;      /* eDMA Error n. */
                vuint32_t ERR47 : 1;      /* eDMA Error n. */
                vuint32_t ERR46 : 1;      /* eDMA Error n. */
                vuint32_t ERR45 : 1;      /* eDMA Error n. */
                vuint32_t ERR44 : 1;      /* eDMA Error n. */
                vuint32_t ERR43 : 1;      /* eDMA Error n. */
                vuint32_t ERR42 : 1;      /* eDMA Error n. */
                vuint32_t ERR41 : 1;      /* eDMA Error n. */
                vuint32_t ERR40 : 1;      /* eDMA Error n. */
                vuint32_t ERR39 : 1;      /* eDMA Error n. */
                vuint32_t ERR38 : 1;      /* eDMA Error n. */
                vuint32_t ERR37 : 1;      /* eDMA Error n. */
                vuint32_t ERR36 : 1;      /* eDMA Error n. */
                vuint32_t ERR35 : 1;      /* eDMA Error n. */
                vuint32_t ERR34 : 1;      /* eDMA Error n. */
                vuint32_t ERR33 : 1;      /* eDMA Error n. */
                vuint32_t ERR32 : 1;      /* eDMA Error n. */
            } B;
        } ERH;      /*  eDMA error high register      (MPC5554 only) */

        union {
            vuint32_t R;
            struct {
                vuint32_t ERR31 : 1;      /* eDMA Error n. */
                vuint32_t ERR30 : 1;      /* eDMA Error n. */
                vuint32_t ERR29 : 1;      /* eDMA Error n. */
                vuint32_t ERR28 : 1;      /* eDMA Error n. */
                vuint32_t ERR27 : 1;      /* eDMA Error n. */
                vuint32_t ERR26 : 1;      /* eDMA Error n. */
                vuint32_t ERR25 : 1;      /* eDMA Error n. */
                vuint32_t ERR24 : 1;      /* eDMA Error n. */
                vuint32_t ERR23 : 1;      /* eDMA Error n. */
                vuint32_t ERR22 : 1;      /* eDMA Error n. */
                vuint32_t ERR21 : 1;      /* eDMA Error n. */
                vuint32_t ERR20 : 1;      /* eDMA Error n. */
                vuint32_t ERR19 : 1;      /* eDMA Error n. */
                vuint32_t ERR18 : 1;      /* eDMA Error n. */
                vuint32_t ERR17 : 1;      /* eDMA Error n. */
                vuint32_t ERR16 : 1;      /* eDMA Error n. */
                vuint32_t ERR15 : 1;      /* eDMA Error n. */
                vuint32_t ERR14 : 1;      /* eDMA Error n. */
                vuint32_t ERR13 : 1;      /* eDMA Error n. */
                vuint32_t ERR12 : 1;      /* eDMA Error n. */
                vuint32_t ERR11 : 1;      /* eDMA Error n. */
                vuint32_t ERR10 : 1;      /* eDMA Error n. */
                vuint32_t ERR9 : 1;      /* eDMA Error n. */
                vuint32_t ERR8 : 1;      /* eDMA Error n. */
                vuint32_t ERR7 : 1;      /* eDMA Error n. */
                vuint32_t ERR6 : 1;      /* eDMA Error n. */
                vuint32_t ERR5 : 1;      /* eDMA Error n. */
                vuint32_t ERR4 : 1;      /* eDMA Error n. */
                vuint32_t ERR3 : 1;      /* eDMA Error n. */
                vuint32_t ERR2 : 1;      /* eDMA Error n. */
                vuint32_t ERR1 : 1;      /* eDMA Error n. */
                vuint32_t ERR0 : 1;      /* eDMA Error n. */
            } B;
        } ERL;      /* eDMA error low register */

        union {
            vuint32_t R;
            struct {
                vuint32_t HRS63 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS62 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS61 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS60 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS59 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS58 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS57 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS56 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS55 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS54 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS53 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS52 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS51 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS50 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS49 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS48 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS47 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS46 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS45 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS44 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS43 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS42 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS41 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS40 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS39 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS38 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS37 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS36 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS35 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS34 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS33 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS32 : 1;      /* eDMA hardware request n. */
            } B;
        } HRSH;      /* eDMA hardware request status high register */

        union {
            vuint32_t R;
            struct {
                vuint32_t HRS31 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS30 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS29 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS28 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS27 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS26 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS25 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS24 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS23 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS22 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS21 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS20 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS19 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS18 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS17 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS16 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS15 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS14 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS13 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS12 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS11 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS10 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS9 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS8 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS7 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS6 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS5 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS4 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS3 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS2 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS1 : 1;      /* eDMA hardware request n. */
                vuint32_t HRS0 : 1;      /* eDMA hardware request n. */
            } B;
        } HRSL;      /* eDMA hardware request status low register */

        union {
            vuint32_t R;
            struct {
                vuint32_t GPOR : 32;      /* DMA General Purpose Output Register. The contents of this re .. */
            } B;
        } GPOR;      /* eDMA general purpose output register */

        int8_t Reserved174[196];

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR0;      /* eDMA channel 0 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR1;      /* eDMA channel 1 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR2;      /* eDMA channel 2 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR3;      /* eDMA channel 3 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR4;      /* eDMA channel 4 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR5;      /* eDMA channel 5 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR6;      /* eDMA channel 6 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR7;      /* eDMA channel 7 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR8;      /* eDMA channel 8 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR9;      /* eDMA channel 9 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR10;      /* eDMA channel 10 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR11;      /* eDMA channel 11 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR12;      /* eDMA channel 12 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR13;      /* eDMA channel 13 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR14;      /* eDMA channel 14 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR15;      /* eDMA channel 15 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR16;      /* eDMA channel 16 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR17;      /* eDMA channel 17 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR18;      /* eDMA channel 18 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR19;      /* eDMA channel 19 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR20;      /* eDMA channel 20 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR21;      /* eDMA channel 21 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR22;      /* eDMA channel 22 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR23;      /* eDMA channel 23 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR24;      /* eDMA channel 24 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR25;      /* eDMA channel 25 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR26;      /* eDMA channel 26 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR27;      /* eDMA channel 27 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR28;      /* eDMA channel 28 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR29;      /* eDMA channel 29 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR30;      /* eDMA channel 30 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR31;      /* eDMA channel 31 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR32;      /* eDMA channel 32 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR33;      /* eDMA channel 33 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR34;      /* eDMA channel 34 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR35;      /* eDMA channel 35 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR36;      /* eDMA channel 36 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR37;      /* eDMA channel 37 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR38;      /* eDMA channel 38 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR39;      /* eDMA channel 39 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR40;      /* eDMA channel 40 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR41;      /* eDMA channel 41 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR42;      /* eDMA channel 42 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR43;      /* eDMA channel 43 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR44;      /* eDMA channel 44 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR45;      /* eDMA channel 45 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR46;      /* eDMA channel 46 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR47;      /* eDMA channel 47 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR48;      /* eDMA channel 48 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR49;      /* eDMA channel 49 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR50;      /* eDMA channel 50 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR51;      /* eDMA channel 51 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR52;      /* eDMA channel 52 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR53;      /* eDMA channel 53 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR54;      /* eDMA channel 54 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR55;      /* eDMA channel 55 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR56;      /* eDMA channel 56 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR57;      /* eDMA channel 57 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR58;      /* eDMA channel 58 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR59;      /* eDMA channel 59 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR60;      /* eDMA channel 60 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR61;      /* eDMA channel 61 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR62;      /* eDMA channel 62 priority register */

        union {
            vuint8_t R;
            struct {
                vuint8_t ECP : 1;      /* Enable channel preemption. */
                vuint8_t DPA : 1;      /* Disable Preempt Ability. */
                vuint8_t GRPPRI : 2;      /* Channel n current group priority. Group priority assigned to .. */
                vuint8_t CHPRI : 4;      /* Channel n arbitration priority. Channel priority when fixed- .. */
            } B;
        } CPR63;      /* eDMA channel 63 priority register */

        int8_t Reserved175[3776];

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD00_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD00_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD00_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD00_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD00_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD00_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD00_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD00_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD01_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD01_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD01_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD01_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD01_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD01_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD01_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD01_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD02_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD02_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD02_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD02_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD02_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD02_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD02_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD02_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD03_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD03_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD03_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD03_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD03_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD03_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD03_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD03_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD04_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD04_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD04_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD04_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD04_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD04_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD04_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD04_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD05_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD05_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD05_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD05_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD05_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD05_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD05_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD05_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD06_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD06_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD06_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD06_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD06_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD06_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD06_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD06_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD07_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD07_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD07_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD07_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD07_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD07_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD07_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD07_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD08_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD08_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD08_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD08_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD08_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD08_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD08_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD08_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD09_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD09_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD09_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD09_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD09_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD09_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD09_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD09_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD10_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD10_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD10_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD10_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD10_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD10_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD10_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD10_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD11_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD11_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD11_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD11_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD11_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD11_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD11_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD11_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD12_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD12_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD12_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD12_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD12_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD12_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD12_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD12_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD13_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD13_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD13_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD13_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD13_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD13_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD13_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD13_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD14_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD14_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD14_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD14_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD14_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD14_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD14_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD14_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD15_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD15_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD15_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD15_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD15_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD15_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD15_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD15_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD16_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD16_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD16_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD16_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD16_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD16_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD16_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD16_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD17_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD17_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD17_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD17_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD17_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD17_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD17_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD17_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD18_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD18_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD18_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD18_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD18_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD18_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD18_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD18_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD19_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD19_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD19_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD19_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD19_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD19_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD19_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD19_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD20_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD20_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD20_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD20_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD20_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD20_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD20_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD20_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD21_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD21_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD21_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD21_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD21_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD21_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD21_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD21_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD22_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD22_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD22_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD22_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD22_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD22_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD22_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD22_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD23_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD23_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD23_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD23_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD23_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD23_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD23_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD23_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD24_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD24_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD24_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD24_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD24_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD24_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD24_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD24_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD25_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD25_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD25_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD25_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD25_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD25_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD25_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD25_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD26_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD26_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD26_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD26_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD26_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD26_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD26_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD26_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD27_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD27_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD27_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD27_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD27_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD27_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD27_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD27_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD28_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD28_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD28_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD28_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD28_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD28_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD28_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD28_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD29_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD29_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD29_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD29_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD29_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD29_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD29_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD29_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD30_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD30_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD30_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD30_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD30_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD30_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD30_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD30_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD31_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD31_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD31_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD31_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD31_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD31_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD31_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD31_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD32_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD32_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD32_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD32_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD32_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD32_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD32_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD32_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD33_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD33_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD33_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD33_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD33_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD33_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD33_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD33_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD34_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD34_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD34_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD34_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD34_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD34_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD34_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD34_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD35_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD35_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD35_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD35_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD35_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD35_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD35_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD35_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD36_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD36_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD36_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD36_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD36_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD36_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD36_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD36_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD37_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD37_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD37_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD37_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD37_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD37_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD37_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD37_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD38_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD38_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD38_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD38_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD38_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD38_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD38_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD38_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD39_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD39_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD39_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD39_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD39_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD39_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD39_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD39_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD40_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD40_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD40_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD40_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD40_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD40_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD40_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD40_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD41_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD41_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD41_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD41_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD41_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD41_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD41_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD41_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD42_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD42_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD42_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD42_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD42_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD42_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD42_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD42_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD43_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD43_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD43_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD43_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD43_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD43_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD43_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD43_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD44_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD44_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD44_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD44_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD44_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD44_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD44_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD44_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD45_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD45_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD45_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD45_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD45_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD45_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD45_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD45_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD46_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD46_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD46_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD46_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD46_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD46_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD46_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD46_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD47_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD47_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD47_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD47_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD47_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD47_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD47_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD47_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD48_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD48_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD48_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD48_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD48_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD48_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD48_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD48_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD49_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD49_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD49_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD49_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD49_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD49_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD49_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD49_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD50_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD50_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD50_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD50_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD50_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD50_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD50_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD50_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD51_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD51_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD51_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD51_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD51_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD51_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD51_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD51_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD52_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD52_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD52_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD52_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD52_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD52_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD52_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD52_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD53_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD53_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD53_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD53_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD53_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD53_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD53_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD53_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD54_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD54_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD54_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD54_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD54_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD54_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD54_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD54_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD55_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD55_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD55_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD55_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD55_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD55_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD55_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD55_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD56_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD56_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD56_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD56_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD56_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD56_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD56_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD56_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD57_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD57_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD57_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD57_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD57_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD57_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD57_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD57_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD58_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD58_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD58_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD58_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD58_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD58_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD58_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD58_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD59_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD59_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD59_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD59_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD59_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD59_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD59_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD59_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD60_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD60_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD60_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD60_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD60_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD60_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD60_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD60_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD61_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD61_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD61_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD61_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD61_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD61_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD61_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD61_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD62_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD62_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD62_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD62_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD62_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD62_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD62_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD62_M3;      /* eDMA transfer control descriptor misc3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t SADDR : 32;      /* Source address. Memory address pointing to the source data.  .. */
            } B;
        } TCD63_SADDR;      /* eDMA transfer control descriptor source address */

        union {
            vuint32_t R;
            struct {
                vuint32_t SMOD : 5;      /* Source address modulo. 0 Source address modulo feature is di .. */
                vuint32_t SSIZE : 3;      /* Source data transfer size. */
                vuint32_t DMOD : 5;      /* Destination address modulo. See the SMOD[0:5] definition. */
                vuint32_t DSIZE : 3;      /* Destination data transfer size. See the SSIZE[0:2] definitio .. */
                vuint32_t SOFF : 16;      /* Source address signed offset. Sign-Extended offset applied t .. */
            } B;
        } TCD63_M1;      /* eDMA transfer control descriptor misc1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t NBYTES : 32;      /* Inner minor byte transfer count. Number of bytes to be trans .. */
            } B;
        } TCD63_NBYTES;      /* eDMA transfer control descriptor Number of BYTES */

        union {
            vuint32_t R;
            struct {
                vuint32_t SLAST : 32;      /* Last source address adjustment. Adjustment value added to th .. */
            } B;
        } TCD63_SLAST;      /* eDMA transfer control descriptor Last Source Address Offset */

        union {
            vuint32_t R;
            struct {
                vuint32_t DADDR : 32;      /* Destination address. Memory address pointing to the destinat .. */
            } B;
        } TCD63_DADDR;      /* eDMA transfer control descriptor Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t CITER_E_LINK : 1;      /* Enable channel-to-channel linking on minor loop completion.  .. */
                vuint32_t CITER_LINKCH : 6;      /* Current major iteration count or link channel number. */
                vuint32_t CITER : 9;      /* Current major iteration count. */
                vuint32_t DOFF : 16;      /* Destination address signed offset. Sign-Extended offset appl .. */
            } B;
        } TCD63_M2;      /* eDMA transfer control descriptor misc2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DLAST_SGA : 32;      /* Last destination address adjustment or the memory address fo .. */
            } B;
        } TCD63_DLAST_SGA;      /* eDMA transfer control descriptor Last Destination Address */

        union {
            vuint32_t R;
            struct {
                vuint32_t BITER_E_LINK : 1;      /* Enables channel-to-channel linking on minor loop complete. A .. */
                vuint32_t BITER_LINKCH : 6;      /* Starting major iteration count or link channel number. */
                vuint32_t BITER : 9;      /* Starting major iteration count. As the transfer control desc .. */
                vuint32_t BWC : 2;      /* Bandwidth control. This two-bit field provides a mechanism t .. */
                vuint32_t MAJOR_LINKCH : 6;      /* Link channel number. */
                vuint32_t DONE : 1;      /* Channel done. */
                vuint32_t ACTIVE : 1;      /* Channel active. */
                vuint32_t MAJOR_E_LINK : 1;      /* Enable channel-to-channel linking on major loop completion. */
                vuint32_t E_SG : 1;      /* Enable scatter/gather processing. */
                vuint32_t D_REG : 1;      /* Disable hardware request. If this flag is set, the eDMA hard .. */
                vuint32_t INT_HALF : 1;      /* Enable an interrupt when major counter is half complete. If  .. */
                vuint32_t INT_MAJ : 1;      /* Enable an interrupt when major iteration count completes. If .. */
                vuint32_t START : 1;      /* Channel start. If this flag is set, the channel is requestin .. */
            } B;
        } TCD63_M3;      /* eDMA transfer control descriptor misc3 */
    };                                             /* End of EDMA_tag */ 
#define EDMA  (*(volatile struct EDMA_tag *)         0xFFF44000UL)

/*---------------------------------------------------------------------------*/
/* Interrupt Controller                                                      */
/*---------------------------------------------------------------------------*/
    struct INTC_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t : 26;
                vuint32_t VTES_PRC0 : 1;      /* Vector table entry size. Controls the number of 0s to the ri .. */
                vuint32_t : 4;
                vuint32_t HVEN_PRC0 : 1;      /* Hardware vector enable. Controls whether the INTC is in hard .. */
            } B;
        } BCR;      /* INTC Block Configuration Register */

        int8_t Reserved176[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 28;
                vuint32_t PRI : 4;      /* Priority. PRI is the priority of the currently executing ISR .. */
            } B;
        } CPR_PRC0;      /* INTC current priority register for processor 0 */

        int8_t Reserved177[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t VTBA_PRC0 : 21;      /* Vector table base address. can be the base address of a vect .. */
                vuint32_t INTVEC_PRC0 : 9;      /* Interrupt vector. vector of the peripheral or software setab .. */
            } B;
        } IACKR_PRC0;      /* INTC Interrupt Acknowledge Register for Processor 0 */

        int8_t Reserved178[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t INTC_EOIR : 32;      /* Writing to the INTC_EOIR_PCR0 signals the end of the servici .. */
            } B;
        } EOIR_PRC0;      /* INTC End-Of-Interrupt Register for processor 0 */

        int8_t Reserved179[4];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 6;
                vuint8_t SET0 : 1;      /* Set flag bits. Writing a 1 will set the corresponding CLR0 b .. */
                vuint8_t CLR0 : 1;      /* Clear flag bits. CLR0 is the flag bit. Writing a 1 to CLR0 w .. */
            } B;
        } SSCIR0;      /* INTC software set/clear interrupt register 0 */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 6;
                vuint8_t SET1 : 1;      /* Set flag bits. Writing a 1 will set the corresponding CLR1 b .. */
                vuint8_t CLR1 : 1;      /* Clear flag bits. CLR1 is the flag bit. Writing a 1 to CLR1 w .. */
            } B;
        } SSCIR1;      /* INTC software set/clear interrupt register 1 */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 6;
                vuint8_t SET2 : 1;      /* Set flag bits. Writing a 1 will set the corresponding CLR2 b .. */
                vuint8_t CLR2 : 1;      /* Clear flag bits. CLR2 is the flag bit. Writing a 1 to CLR2 w .. */
            } B;
        } SSCIR2;      /* INTC software set/clear interrupt register 2 */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 6;
                vuint8_t SET3 : 1;      /* Set flag bits. Writing a 1 will set the corresponding CLR3 b .. */
                vuint8_t CLR3 : 1;      /* Clear flag bits. CLR3 is the flag bit. Writing a 1 to CLR3 w .. */
            } B;
        } SSCIR3;      /* INTC software set/clear interrupt register 3 */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 6;
                vuint8_t SET4 : 1;      /* Set flag bits. Writing a 1 will set the corresponding CLR4 b .. */
                vuint8_t CLR4 : 1;      /* Clear flag bits. CLR4 is the flag bit. Writing a 1 to CLR4 w .. */
            } B;
        } SSCIR4;      /* INTC software set/clear interrupt register 4 */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 6;
                vuint8_t SET5 : 1;      /* Set flag bits. Writing a 1 will set the corresponding CLR5 b .. */
                vuint8_t CLR5 : 1;      /* Clear flag bits. CLR5 is the flag bit. Writing a 1 to CLR5 w .. */
            } B;
        } SSCIR5;      /* INTC software set/clear interrupt register 5 */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 6;
                vuint8_t SET6 : 1;      /* Set flag bits. Writing a 1 will set the corresponding CLR6 b .. */
                vuint8_t CLR6 : 1;      /* Clear flag bits. CLR6 is the flag bit. Writing a 1 to CLR6 w .. */
            } B;
        } SSCIR6;      /* INTC software set/clear interrupt register 6 */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 6;
                vuint8_t SET7 : 1;      /* Set flag bits. Writing a 1 will set the corresponding CLR7 b .. */
                vuint8_t CLR7 : 1;      /* Clear flag bits. CLR7 is the flag bit. Writing a 1 to CLR7 w .. */
            } B;
        } SSCIR7;      /* INTC software set/clear interrupt register 7 */

        int8_t Reserved180[24];

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI0 : 4;      /* Priority Select. PRI0 selects the priority for interrupt req .. */
            } B;
        } PSR0;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI1 : 4;      /* Priority Select. PRI1 selects the priority for interrupt req .. */
            } B;
        } PSR1;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI2 : 4;      /* Priority Select. PRI2 selects the priority for interrupt req .. */
            } B;
        } PSR2;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI3 : 4;      /* Priority Select. PRI3 selects the priority for interrupt req .. */
            } B;
        } PSR3;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI4 : 4;      /* Priority Select. PRI4 selects the priority for interrupt req .. */
            } B;
        } PSR4;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI5 : 4;      /* Priority Select. PRI5 selects the priority for interrupt req .. */
            } B;
        } PSR5;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI6 : 4;      /* Priority Select. PRI6 selects the priority for interrupt req .. */
            } B;
        } PSR6;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI7 : 4;      /* Priority Select. PRI7 selects the priority for interrupt req .. */
            } B;
        } PSR7;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI8 : 4;      /* Priority Select. PRI8 selects the priority for interrupt req .. */
            } B;
        } PSR8;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI9 : 4;      /* Priority Select. PRI9 selects the priority for interrupt req .. */
            } B;
        } PSR9;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI10 : 4;      /* Priority Select. PRI10 selects the priority for interrupt re .. */
            } B;
        } PSR10;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI11 : 4;      /* Priority Select. PRI11 selects the priority for interrupt re .. */
            } B;
        } PSR11;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI12 : 4;      /* Priority Select. PRI12 selects the priority for interrupt re .. */
            } B;
        } PSR12;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI13 : 4;      /* Priority Select. PRI13 selects the priority for interrupt re .. */
            } B;
        } PSR13;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI14 : 4;      /* Priority Select. PRI14 selects the priority for interrupt re .. */
            } B;
        } PSR14;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI15 : 4;      /* Priority Select. PRI15 selects the priority for interrupt re .. */
            } B;
        } PSR15;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI16 : 4;      /* Priority Select. PRI16 selects the priority for interrupt re .. */
            } B;
        } PSR16;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI17 : 4;      /* Priority Select. PRI17 selects the priority for interrupt re .. */
            } B;
        } PSR17;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI18 : 4;      /* Priority Select. PRI18 selects the priority for interrupt re .. */
            } B;
        } PSR18;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI19 : 4;      /* Priority Select. PRI19 selects the priority for interrupt re .. */
            } B;
        } PSR19;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI20 : 4;      /* Priority Select. PRI20 selects the priority for interrupt re .. */
            } B;
        } PSR20;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI21 : 4;      /* Priority Select. PRI21 selects the priority for interrupt re .. */
            } B;
        } PSR21;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI22 : 4;      /* Priority Select. PRI22 selects the priority for interrupt re .. */
            } B;
        } PSR22;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI23 : 4;      /* Priority Select. PRI23 selects the priority for interrupt re .. */
            } B;
        } PSR23;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI24 : 4;      /* Priority Select. PRI24 selects the priority for interrupt re .. */
            } B;
        } PSR24;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI25 : 4;      /* Priority Select. PRI25 selects the priority for interrupt re .. */
            } B;
        } PSR25;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI26 : 4;      /* Priority Select. PRI26 selects the priority for interrupt re .. */
            } B;
        } PSR26;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI27 : 4;      /* Priority Select. PRI27 selects the priority for interrupt re .. */
            } B;
        } PSR27;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI28 : 4;      /* Priority Select. PRI28 selects the priority for interrupt re .. */
            } B;
        } PSR28;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI29 : 4;      /* Priority Select. PRI29 selects the priority for interrupt re .. */
            } B;
        } PSR29;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI30 : 4;      /* Priority Select. PRI30 selects the priority for interrupt re .. */
            } B;
        } PSR30;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI31 : 4;      /* Priority Select. PRI31 selects the priority for interrupt re .. */
            } B;
        } PSR31;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI32 : 4;      /* Priority Select. PRI32 selects the priority for interrupt re .. */
            } B;
        } PSR32;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI33 : 4;      /* Priority Select. PRI33 selects the priority for interrupt re .. */
            } B;
        } PSR33;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI34 : 4;      /* Priority Select. PRI34 selects the priority for interrupt re .. */
            } B;
        } PSR34;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI35 : 4;      /* Priority Select. PRI35 selects the priority for interrupt re .. */
            } B;
        } PSR35;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI36 : 4;      /* Priority Select. PRI36 selects the priority for interrupt re .. */
            } B;
        } PSR36;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI37 : 4;      /* Priority Select. PRI37 selects the priority for interrupt re .. */
            } B;
        } PSR37;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI38 : 4;      /* Priority Select. PRI38 selects the priority for interrupt re .. */
            } B;
        } PSR38;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI39 : 4;      /* Priority Select. PRI39 selects the priority for interrupt re .. */
            } B;
        } PSR39;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI40 : 4;      /* Priority Select. PRI40 selects the priority for interrupt re .. */
            } B;
        } PSR40;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI41 : 4;      /* Priority Select. PRI41 selects the priority for interrupt re .. */
            } B;
        } PSR41;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI42 : 4;      /* Priority Select. PRI42 selects the priority for interrupt re .. */
            } B;
        } PSR42;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI43 : 4;      /* Priority Select. PRI43 selects the priority for interrupt re .. */
            } B;
        } PSR43;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI44 : 4;      /* Priority Select. PRI44 selects the priority for interrupt re .. */
            } B;
        } PSR44;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI45 : 4;      /* Priority Select. PRI45 selects the priority for interrupt re .. */
            } B;
        } PSR45;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI46 : 4;      /* Priority Select. PRI46 selects the priority for interrupt re .. */
            } B;
        } PSR46;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI47 : 4;      /* Priority Select. PRI47 selects the priority for interrupt re .. */
            } B;
        } PSR47;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI48 : 4;      /* Priority Select. PRI48 selects the priority for interrupt re .. */
            } B;
        } PSR48;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI49 : 4;      /* Priority Select. PRI49 selects the priority for interrupt re .. */
            } B;
        } PSR49;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI50 : 4;      /* Priority Select. PRI50 selects the priority for interrupt re .. */
            } B;
        } PSR50;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI51 : 4;      /* Priority Select. PRI51 selects the priority for interrupt re .. */
            } B;
        } PSR51;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI52 : 4;      /* Priority Select. PRI52 selects the priority for interrupt re .. */
            } B;
        } PSR52;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI53 : 4;      /* Priority Select. PRI53 selects the priority for interrupt re .. */
            } B;
        } PSR53;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI54 : 4;      /* Priority Select. PRI54 selects the priority for interrupt re .. */
            } B;
        } PSR54;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI55 : 4;      /* Priority Select. PRI55 selects the priority for interrupt re .. */
            } B;
        } PSR55;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI56 : 4;      /* Priority Select. PRI56 selects the priority for interrupt re .. */
            } B;
        } PSR56;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI57 : 4;      /* Priority Select. PRI57 selects the priority for interrupt re .. */
            } B;
        } PSR57;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI58 : 4;      /* Priority Select. PRI58 selects the priority for interrupt re .. */
            } B;
        } PSR58;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI59 : 4;      /* Priority Select. PRI59 selects the priority for interrupt re .. */
            } B;
        } PSR59;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI60 : 4;      /* Priority Select. PRI60 selects the priority for interrupt re .. */
            } B;
        } PSR60;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI61 : 4;      /* Priority Select. PRI61 selects the priority for interrupt re .. */
            } B;
        } PSR61;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI62 : 4;      /* Priority Select. PRI62 selects the priority for interrupt re .. */
            } B;
        } PSR62;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI63 : 4;      /* Priority Select. PRI63 selects the priority for interrupt re .. */
            } B;
        } PSR63;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI64 : 4;      /* Priority Select. PRI64 selects the priority for interrupt re .. */
            } B;
        } PSR64;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI65 : 4;      /* Priority Select. PRI65 selects the priority for interrupt re .. */
            } B;
        } PSR65;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI66 : 4;      /* Priority Select. PRI66 selects the priority for interrupt re .. */
            } B;
        } PSR66;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI67 : 4;      /* Priority Select. PRI67 selects the priority for interrupt re .. */
            } B;
        } PSR67;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI68 : 4;      /* Priority Select. PRI68 selects the priority for interrupt re .. */
            } B;
        } PSR68;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI69 : 4;      /* Priority Select. PRI69 selects the priority for interrupt re .. */
            } B;
        } PSR69;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI70 : 4;      /* Priority Select. PRI70 selects the priority for interrupt re .. */
            } B;
        } PSR70;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI71 : 4;      /* Priority Select. PRI71 selects the priority for interrupt re .. */
            } B;
        } PSR71;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI72 : 4;      /* Priority Select. PRI72 selects the priority for interrupt re .. */
            } B;
        } PSR72;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI73 : 4;      /* Priority Select. PRI73 selects the priority for interrupt re .. */
            } B;
        } PSR73;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI74 : 4;      /* Priority Select. PRI74 selects the priority for interrupt re .. */
            } B;
        } PSR74;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI75 : 4;      /* Priority Select. PRI75 selects the priority for interrupt re .. */
            } B;
        } PSR75;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI76 : 4;      /* Priority Select. PRI76 selects the priority for interrupt re .. */
            } B;
        } PSR76;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI77 : 4;      /* Priority Select. PRI77 selects the priority for interrupt re .. */
            } B;
        } PSR77;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI78 : 4;      /* Priority Select. PRI78 selects the priority for interrupt re .. */
            } B;
        } PSR78;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI79 : 4;      /* Priority Select. PRI79 selects the priority for interrupt re .. */
            } B;
        } PSR79;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI80 : 4;      /* Priority Select. PRI80 selects the priority for interrupt re .. */
            } B;
        } PSR80;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI81 : 4;      /* Priority Select. PRI81 selects the priority for interrupt re .. */
            } B;
        } PSR81;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI82 : 4;      /* Priority Select. PRI82 selects the priority for interrupt re .. */
            } B;
        } PSR82;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI83 : 4;      /* Priority Select. PRI83 selects the priority for interrupt re .. */
            } B;
        } PSR83;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI84 : 4;      /* Priority Select. PRI84 selects the priority for interrupt re .. */
            } B;
        } PSR84;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI85 : 4;      /* Priority Select. PRI85 selects the priority for interrupt re .. */
            } B;
        } PSR85;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI86 : 4;      /* Priority Select. PRI86 selects the priority for interrupt re .. */
            } B;
        } PSR86;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI87 : 4;      /* Priority Select. PRI87 selects the priority for interrupt re .. */
            } B;
        } PSR87;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI88 : 4;      /* Priority Select. PRI88 selects the priority for interrupt re .. */
            } B;
        } PSR88;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI89 : 4;      /* Priority Select. PRI89 selects the priority for interrupt re .. */
            } B;
        } PSR89;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI90 : 4;      /* Priority Select. PRI90 selects the priority for interrupt re .. */
            } B;
        } PSR90;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI91 : 4;      /* Priority Select. PRI91 selects the priority for interrupt re .. */
            } B;
        } PSR91;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI92 : 4;      /* Priority Select. PRI92 selects the priority for interrupt re .. */
            } B;
        } PSR92;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI93 : 4;      /* Priority Select. PRI93 selects the priority for interrupt re .. */
            } B;
        } PSR93;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI94 : 4;      /* Priority Select. PRI94 selects the priority for interrupt re .. */
            } B;
        } PSR94;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI95 : 4;      /* Priority Select. PRI95 selects the priority for interrupt re .. */
            } B;
        } PSR95;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI96 : 4;      /* Priority Select. PRI96 selects the priority for interrupt re .. */
            } B;
        } PSR96;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI97 : 4;      /* Priority Select. PRI97 selects the priority for interrupt re .. */
            } B;
        } PSR97;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI98 : 4;      /* Priority Select. PRI98 selects the priority for interrupt re .. */
            } B;
        } PSR98;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI99 : 4;      /* Priority Select. PRI99 selects the priority for interrupt re .. */
            } B;
        } PSR99;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI100 : 4;      /* Priority Select. PRI100 selects the priority for interrupt r .. */
            } B;
        } PSR100;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI101 : 4;      /* Priority Select. PRI101 selects the priority for interrupt r .. */
            } B;
        } PSR101;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI102 : 4;      /* Priority Select. PRI102 selects the priority for interrupt r .. */
            } B;
        } PSR102;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI103 : 4;      /* Priority Select. PRI103 selects the priority for interrupt r .. */
            } B;
        } PSR103;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI104 : 4;      /* Priority Select. PRI104 selects the priority for interrupt r .. */
            } B;
        } PSR104;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI105 : 4;      /* Priority Select. PRI105 selects the priority for interrupt r .. */
            } B;
        } PSR105;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI106 : 4;      /* Priority Select. PRI106 selects the priority for interrupt r .. */
            } B;
        } PSR106;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI107 : 4;      /* Priority Select. PRI107 selects the priority for interrupt r .. */
            } B;
        } PSR107;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI108 : 4;      /* Priority Select. PRI108 selects the priority for interrupt r .. */
            } B;
        } PSR108;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI109 : 4;      /* Priority Select. PRI109 selects the priority for interrupt r .. */
            } B;
        } PSR109;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI110 : 4;      /* Priority Select. PRI110 selects the priority for interrupt r .. */
            } B;
        } PSR110;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI111 : 4;      /* Priority Select. PRI111 selects the priority for interrupt r .. */
            } B;
        } PSR111;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI112 : 4;      /* Priority Select. PRI112 selects the priority for interrupt r .. */
            } B;
        } PSR112;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI113 : 4;      /* Priority Select. PRI113 selects the priority for interrupt r .. */
            } B;
        } PSR113;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI114 : 4;      /* Priority Select. PRI114 selects the priority for interrupt r .. */
            } B;
        } PSR114;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI115 : 4;      /* Priority Select. PRI115 selects the priority for interrupt r .. */
            } B;
        } PSR115;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI116 : 4;      /* Priority Select. PRI116 selects the priority for interrupt r .. */
            } B;
        } PSR116;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI117 : 4;      /* Priority Select. PRI117 selects the priority for interrupt r .. */
            } B;
        } PSR117;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI118 : 4;      /* Priority Select. PRI118 selects the priority for interrupt r .. */
            } B;
        } PSR118;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI119 : 4;      /* Priority Select. PRI119 selects the priority for interrupt r .. */
            } B;
        } PSR119;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI120 : 4;      /* Priority Select. PRI120 selects the priority for interrupt r .. */
            } B;
        } PSR120;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI121 : 4;      /* Priority Select. PRI121 selects the priority for interrupt r .. */
            } B;
        } PSR121;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI122 : 4;      /* Priority Select. PRI122 selects the priority for interrupt r .. */
            } B;
        } PSR122;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI123 : 4;      /* Priority Select. PRI123 selects the priority for interrupt r .. */
            } B;
        } PSR123;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI124 : 4;      /* Priority Select. PRI124 selects the priority for interrupt r .. */
            } B;
        } PSR124;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI125 : 4;      /* Priority Select. PRI125 selects the priority for interrupt r .. */
            } B;
        } PSR125;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI126 : 4;      /* Priority Select. PRI126 selects the priority for interrupt r .. */
            } B;
        } PSR126;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI127 : 4;      /* Priority Select. PRI127 selects the priority for interrupt r .. */
            } B;
        } PSR127;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI128 : 4;      /* Priority Select. PRI128 selects the priority for interrupt r .. */
            } B;
        } PSR128;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI129 : 4;      /* Priority Select. PRI129 selects the priority for interrupt r .. */
            } B;
        } PSR129;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI130 : 4;      /* Priority Select. PRI130 selects the priority for interrupt r .. */
            } B;
        } PSR130;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI131 : 4;      /* Priority Select. PRI131 selects the priority for interrupt r .. */
            } B;
        } PSR131;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI132 : 4;      /* Priority Select. PRI132 selects the priority for interrupt r .. */
            } B;
        } PSR132;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI133 : 4;      /* Priority Select. PRI133 selects the priority for interrupt r .. */
            } B;
        } PSR133;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI134 : 4;      /* Priority Select. PRI134 selects the priority for interrupt r .. */
            } B;
        } PSR134;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI135 : 4;      /* Priority Select. PRI135 selects the priority for interrupt r .. */
            } B;
        } PSR135;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI136 : 4;      /* Priority Select. PRI136 selects the priority for interrupt r .. */
            } B;
        } PSR136;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI137 : 4;      /* Priority Select. PRI137 selects the priority for interrupt r .. */
            } B;
        } PSR137;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI138 : 4;      /* Priority Select. PRI138 selects the priority for interrupt r .. */
            } B;
        } PSR138;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI139 : 4;      /* Priority Select. PRI139 selects the priority for interrupt r .. */
            } B;
        } PSR139;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI140 : 4;      /* Priority Select. PRI140 selects the priority for interrupt r .. */
            } B;
        } PSR140;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI141 : 4;      /* Priority Select. PRI141 selects the priority for interrupt r .. */
            } B;
        } PSR141;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI142 : 4;      /* Priority Select. PRI142 selects the priority for interrupt r .. */
            } B;
        } PSR142;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI143 : 4;      /* Priority Select. PRI143 selects the priority for interrupt r .. */
            } B;
        } PSR143;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI144 : 4;      /* Priority Select. PRI144 selects the priority for interrupt r .. */
            } B;
        } PSR144;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI145 : 4;      /* Priority Select. PRI145 selects the priority for interrupt r .. */
            } B;
        } PSR145;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI146 : 4;      /* Priority Select. PRI146 selects the priority for interrupt r .. */
            } B;
        } PSR146;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI147 : 4;      /* Priority Select. PRI147 selects the priority for interrupt r .. */
            } B;
        } PSR147;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI148 : 4;      /* Priority Select. PRI148 selects the priority for interrupt r .. */
            } B;
        } PSR148;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI149 : 4;      /* Priority Select. PRI149 selects the priority for interrupt r .. */
            } B;
        } PSR149;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI150 : 4;      /* Priority Select. PRI150 selects the priority for interrupt r .. */
            } B;
        } PSR150;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI151 : 4;      /* Priority Select. PRI151 selects the priority for interrupt r .. */
            } B;
        } PSR151;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI152 : 4;      /* Priority Select. PRI152 selects the priority for interrupt r .. */
            } B;
        } PSR152;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI153 : 4;      /* Priority Select. PRI153 selects the priority for interrupt r .. */
            } B;
        } PSR153;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI154 : 4;      /* Priority Select. PRI154 selects the priority for interrupt r .. */
            } B;
        } PSR154;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI155 : 4;      /* Priority Select. PRI155 selects the priority for interrupt r .. */
            } B;
        } PSR155;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI156 : 4;      /* Priority Select. PRI156 selects the priority for interrupt r .. */
            } B;
        } PSR156;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI157 : 4;      /* Priority Select. PRI157 selects the priority for interrupt r .. */
            } B;
        } PSR157;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI158 : 4;      /* Priority Select. PRI158 selects the priority for interrupt r .. */
            } B;
        } PSR158;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI159 : 4;      /* Priority Select. PRI159 selects the priority for interrupt r .. */
            } B;
        } PSR159;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI160 : 4;      /* Priority Select. PRI160 selects the priority for interrupt r .. */
            } B;
        } PSR160;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI161 : 4;      /* Priority Select. PRI161 selects the priority for interrupt r .. */
            } B;
        } PSR161;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI162 : 4;      /* Priority Select. PRI162 selects the priority for interrupt r .. */
            } B;
        } PSR162;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI163 : 4;      /* Priority Select. PRI163 selects the priority for interrupt r .. */
            } B;
        } PSR163;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI164 : 4;      /* Priority Select. PRI164 selects the priority for interrupt r .. */
            } B;
        } PSR164;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI165 : 4;      /* Priority Select. PRI165 selects the priority for interrupt r .. */
            } B;
        } PSR165;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI166 : 4;      /* Priority Select. PRI166 selects the priority for interrupt r .. */
            } B;
        } PSR166;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI167 : 4;      /* Priority Select. PRI167 selects the priority for interrupt r .. */
            } B;
        } PSR167;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI168 : 4;      /* Priority Select. PRI168 selects the priority for interrupt r .. */
            } B;
        } PSR168;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI169 : 4;      /* Priority Select. PRI169 selects the priority for interrupt r .. */
            } B;
        } PSR169;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI170 : 4;      /* Priority Select. PRI170 selects the priority for interrupt r .. */
            } B;
        } PSR170;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI171 : 4;      /* Priority Select. PRI171 selects the priority for interrupt r .. */
            } B;
        } PSR171;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI172 : 4;      /* Priority Select. PRI172 selects the priority for interrupt r .. */
            } B;
        } PSR172;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI173 : 4;      /* Priority Select. PRI173 selects the priority for interrupt r .. */
            } B;
        } PSR173;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI174 : 4;      /* Priority Select. PRI174 selects the priority for interrupt r .. */
            } B;
        } PSR174;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI175 : 4;      /* Priority Select. PRI175 selects the priority for interrupt r .. */
            } B;
        } PSR175;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI176 : 4;      /* Priority Select. PRI176 selects the priority for interrupt r .. */
            } B;
        } PSR176;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI177 : 4;      /* Priority Select. PRI177 selects the priority for interrupt r .. */
            } B;
        } PSR177;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI178 : 4;      /* Priority Select. PRI178 selects the priority for interrupt r .. */
            } B;
        } PSR178;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI179 : 4;      /* Priority Select. PRI179 selects the priority for interrupt r .. */
            } B;
        } PSR179;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI180 : 4;      /* Priority Select. PRI180 selects the priority for interrupt r .. */
            } B;
        } PSR180;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI181 : 4;      /* Priority Select. PRI181 selects the priority for interrupt r .. */
            } B;
        } PSR181;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI182 : 4;      /* Priority Select. PRI182 selects the priority for interrupt r .. */
            } B;
        } PSR182;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI183 : 4;      /* Priority Select. PRI183 selects the priority for interrupt r .. */
            } B;
        } PSR183;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI184 : 4;      /* Priority Select. PRI184 selects the priority for interrupt r .. */
            } B;
        } PSR184;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI185 : 4;      /* Priority Select. PRI185 selects the priority for interrupt r .. */
            } B;
        } PSR185;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI186 : 4;      /* Priority Select. PRI186 selects the priority for interrupt r .. */
            } B;
        } PSR186;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI187 : 4;      /* Priority Select. PRI187 selects the priority for interrupt r .. */
            } B;
        } PSR187;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI188 : 4;      /* Priority Select. PRI188 selects the priority for interrupt r .. */
            } B;
        } PSR188;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI189 : 4;      /* Priority Select. PRI189 selects the priority for interrupt r .. */
            } B;
        } PSR189;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI190 : 4;      /* Priority Select. PRI190 selects the priority for interrupt r .. */
            } B;
        } PSR190;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI191 : 4;      /* Priority Select. PRI191 selects the priority for interrupt r .. */
            } B;
        } PSR191;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI192 : 4;      /* Priority Select. PRI192 selects the priority for interrupt r .. */
            } B;
        } PSR192;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI193 : 4;      /* Priority Select. PRI193 selects the priority for interrupt r .. */
            } B;
        } PSR193;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI194 : 4;      /* Priority Select. PRI194 selects the priority for interrupt r .. */
            } B;
        } PSR194;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI195 : 4;      /* Priority Select. PRI195 selects the priority for interrupt r .. */
            } B;
        } PSR195;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI196 : 4;      /* Priority Select. PRI196 selects the priority for interrupt r .. */
            } B;
        } PSR196;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI197 : 4;      /* Priority Select. PRI197 selects the priority for interrupt r .. */
            } B;
        } PSR197;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI198 : 4;      /* Priority Select. PRI198 selects the priority for interrupt r .. */
            } B;
        } PSR198;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI199 : 4;      /* Priority Select. PRI199 selects the priority for interrupt r .. */
            } B;
        } PSR199;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI200 : 4;      /* Priority Select. PRI200 selects the priority for interrupt r .. */
            } B;
        } PSR200;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI201 : 4;      /* Priority Select. PRI201 selects the priority for interrupt r .. */
            } B;
        } PSR201;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI202 : 4;      /* Priority Select. PRI202 selects the priority for interrupt r .. */
            } B;
        } PSR202;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI203 : 4;      /* Priority Select. PRI203 selects the priority for interrupt r .. */
            } B;
        } PSR203;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI204 : 4;      /* Priority Select. PRI204 selects the priority for interrupt r .. */
            } B;
        } PSR204;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI205 : 4;      /* Priority Select. PRI205 selects the priority for interrupt r .. */
            } B;
        } PSR205;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI206 : 4;      /* Priority Select. PRI206 selects the priority for interrupt r .. */
            } B;
        } PSR206;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI207 : 4;      /* Priority Select. PRI207 selects the priority for interrupt r .. */
            } B;
        } PSR207;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI208 : 4;      /* Priority Select. PRI208 selects the priority for interrupt r .. */
            } B;
        } PSR208;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI209 : 4;      /* Priority Select. PRI209 selects the priority for interrupt r .. */
            } B;
        } PSR209;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI210 : 4;      /* Priority Select. PRI210 selects the priority for interrupt r .. */
            } B;
        } PSR210;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI211 : 4;      /* Priority Select. PRI211 selects the priority for interrupt r .. */
            } B;
        } PSR211;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI212 : 4;      /* Priority Select. PRI212 selects the priority for interrupt r .. */
            } B;
        } PSR212;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI213 : 4;      /* Priority Select. PRI213 selects the priority for interrupt r .. */
            } B;
        } PSR213;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI214 : 4;      /* Priority Select. PRI214 selects the priority for interrupt r .. */
            } B;
        } PSR214;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI215 : 4;      /* Priority Select. PRI215 selects the priority for interrupt r .. */
            } B;
        } PSR215;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI216 : 4;      /* Priority Select. PRI216 selects the priority for interrupt r .. */
            } B;
        } PSR216;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI217 : 4;      /* Priority Select. PRI217 selects the priority for interrupt r .. */
            } B;
        } PSR217;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI218 : 4;      /* Priority Select. PRI218 selects the priority for interrupt r .. */
            } B;
        } PSR218;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI219 : 4;      /* Priority Select. PRI219 selects the priority for interrupt r .. */
            } B;
        } PSR219;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI220 : 4;      /* Priority Select. PRI220 selects the priority for interrupt r .. */
            } B;
        } PSR220;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI221 : 4;      /* Priority Select. PRI221 selects the priority for interrupt r .. */
            } B;
        } PSR221;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI222 : 4;      /* Priority Select. PRI222 selects the priority for interrupt r .. */
            } B;
        } PSR222;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI223 : 4;      /* Priority Select. PRI223 selects the priority for interrupt r .. */
            } B;
        } PSR223;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI224 : 4;      /* Priority Select. PRI224 selects the priority for interrupt r .. */
            } B;
        } PSR224;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI225 : 4;      /* Priority Select. PRI225 selects the priority for interrupt r .. */
            } B;
        } PSR225;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI226 : 4;      /* Priority Select. PRI226 selects the priority for interrupt r .. */
            } B;
        } PSR226;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI227 : 4;      /* Priority Select. PRI227 selects the priority for interrupt r .. */
            } B;
        } PSR227;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI228 : 4;      /* Priority Select. PRI228 selects the priority for interrupt r .. */
            } B;
        } PSR228;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI229 : 4;      /* Priority Select. PRI229 selects the priority for interrupt r .. */
            } B;
        } PSR229;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI230 : 4;      /* Priority Select. PRI230 selects the priority for interrupt r .. */
            } B;
        } PSR230;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI231 : 4;      /* Priority Select. PRI231 selects the priority for interrupt r .. */
            } B;
        } PSR231;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI232 : 4;      /* Priority Select. PRI232 selects the priority for interrupt r .. */
            } B;
        } PSR232;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI233 : 4;      /* Priority Select. PRI233 selects the priority for interrupt r .. */
            } B;
        } PSR233;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI234 : 4;      /* Priority Select. PRI234 selects the priority for interrupt r .. */
            } B;
        } PSR234;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI235 : 4;      /* Priority Select. PRI235 selects the priority for interrupt r .. */
            } B;
        } PSR235;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI236 : 4;      /* Priority Select. PRI236 selects the priority for interrupt r .. */
            } B;
        } PSR236;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI237 : 4;      /* Priority Select. PRI237 selects the priority for interrupt r .. */
            } B;
        } PSR237;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI238 : 4;      /* Priority Select. PRI238 selects the priority for interrupt r .. */
            } B;
        } PSR238;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI239 : 4;      /* Priority Select. PRI239 selects the priority for interrupt r .. */
            } B;
        } PSR239;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI240 : 4;      /* Priority Select. PRI240 selects the priority for interrupt r .. */
            } B;
        } PSR240;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI241 : 4;      /* Priority Select. PRI241 selects the priority for interrupt r .. */
            } B;
        } PSR241;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI242 : 4;      /* Priority Select. PRI242 selects the priority for interrupt r .. */
            } B;
        } PSR242;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI243 : 4;      /* Priority Select. PRI243 selects the priority for interrupt r .. */
            } B;
        } PSR243;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI244 : 4;      /* Priority Select. PRI244 selects the priority for interrupt r .. */
            } B;
        } PSR244;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI245 : 4;      /* Priority Select. PRI245 selects the priority for interrupt r .. */
            } B;
        } PSR245;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI246 : 4;      /* Priority Select. PRI246 selects the priority for interrupt r .. */
            } B;
        } PSR246;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI247 : 4;      /* Priority Select. PRI247 selects the priority for interrupt r .. */
            } B;
        } PSR247;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI248 : 4;      /* Priority Select. PRI248 selects the priority for interrupt r .. */
            } B;
        } PSR248;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI249 : 4;      /* Priority Select. PRI249 selects the priority for interrupt r .. */
            } B;
        } PSR249;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI250 : 4;      /* Priority Select. PRI250 selects the priority for interrupt r .. */
            } B;
        } PSR250;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI251 : 4;      /* Priority Select. PRI251 selects the priority for interrupt r .. */
            } B;
        } PSR251;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI252 : 4;      /* Priority Select. PRI252 selects the priority for interrupt r .. */
            } B;
        } PSR252;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI253 : 4;      /* Priority Select. PRI253 selects the priority for interrupt r .. */
            } B;
        } PSR253;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI254 : 4;      /* Priority Select. PRI254 selects the priority for interrupt r .. */
            } B;
        } PSR254;      /* INTC Priority Select Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t : 4;
                vuint8_t PRI255 : 4;      /* Priority Select. PRI255 selects the priority for interrupt r .. */
            } B;
        } PSR255;      /* INTC Priority Select Registers */
    };                                             /* End of INTC_tag */ 
#define INTC  (*(volatile struct INTC_tag *)         0xFFF48000UL)
#define INTC_1  (*(volatile struct INTC_tag *)         0x8FF48000UL)
/*---------------------------------------------------------------------------*/
/* Deserial/Serial Peripheral Interface 0                                    */
/*---------------------------------------------------------------------------*/
    struct DSPI_0_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t MSTR : 1;      /* Master/slave mode select. Configures the DSPI for either mas .. */
                vuint32_t CONT_SCKE : 1;      /* Continuous SCK enable. Enables the serial communication cloc .. */
                vuint32_t DONF : 2;      /* DSPI configuration. */
                vuint32_t FRZ : 1;      /* Freeze. Enables the DSPI transfers to be stopped on the next .. */
                vuint32_t MTFE : 1;      /* Modified timing format enable. Enables a modified transfer f .. */
                vuint32_t PCSSE : 1;      /* Peripheral chip select strobe enable. Enables the PCS5/PCSS  .. */
                vuint32_t ROOE : 1;      /* Receive FIFO overflow overwrite enable. Enables an Rx FIFO o .. */
                vuint32_t PCSIS7 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS6 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS5 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS4 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS3 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS2 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS1 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS0 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t DOZE : 1;      /* Doze Enable. The DOZE bit provides support for externally co .. */
                vuint32_t MDIS : 1;      /* Module disable. Allows the clock to be stopped to the non-me .. */
                vuint32_t DIS_TXF : 1;      /* Disable Transmit FIFO. When DIS_TXF is set, the TX FIFO acts .. */
                vuint32_t DIS_RXF : 1;      /* Disable Receive FIFO. When DIS_RXF is set, the RX FIFO acts  .. */
                vuint32_t CLR_TXF : 1;      /* Clear TX FIFO. Flushes the TX FIFO. Writing a 1 to CLR_TXF c .. */
                vuint32_t CLR_RXF : 1;      /* Clear Rx FIFO. Flushes the Rx FIFO. Writing a 1 to CLR_RXF c .. */
                vuint32_t SMPL_PT : 2;      /* Sample point. Allows the host software to select when the DS .. */
                vuint32_t : 6;
                vuint32_t PES : 1;      /* Parity Error Stop. PES bit controls SPI operation when a par .. */
                vuint32_t HALT : 1;      /* Halt. Provides a mechanism for software to start and stop DS .. */
            } B;
        } MCR;      /* DSPI module configuration register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PISR : 1;      /* PISR0-3 and parallel inputs frame positions selection logic  .. */
                vuint32_t : 3;
                vuint32_t CTAR : 3;      /* Maximum implemented DSPI_CTAR register number. */
                vuint32_t TXFR : 4;      /* Maximum implemented DSPI_TXFR register number. */
                vuint32_t RXFR : 4;      /* Maximum implemented DSPI_RXFR register number. */
            } B;
        } HCR;      /* DSPI Hardware Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t SPI_TCNT : 16;      /* SPI transfer counter. Counts the number of SPI transfers the .. */
            } B;
        } TCR;      /* DSPI transfer count register */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* Frame Size. Selects the number of bits transferred per frame .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR0;      /* DSPI clock and transfer attributes register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* FMSZ. Selects the number of bits transferred per frame. The  .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR1;      /* DSPI clock and transfer attributes register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* FMSZ. Selects the number of bits transferred per frame. The  .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR2;      /* DSPI clock and transfer attributes register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* FMSZ. Selects the number of bits transferred per frame. The  .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR3;      /* DSPI clock and transfer attributes register 3 */

        int8_t Reserved181[16];

        union {
            vuint32_t R;
            struct {
                vuint32_t TCF : 1;      /* Transfer Complete Flag. A value of TCF=1 indicates that at l .. */
                vuint32_t TXRXS : 1;      /* TX and RX status.   TXRXS is cleared by writing 1 to it. */
                vuint32_t : 1;
                vuint32_t EOQF : 1;      /* End of queue flag. Indicates that transmission in progress i .. */
                vuint32_t TFUF : 1;      /* Transmit FIFO underflow flag. Indicates that an underflow co .. */
                vuint32_t : 1;
                vuint32_t TFFF : 1;      /* Transmit FIFO fill flag: indicates that the TX FIFO can be f .. */
                vuint32_t : 3;
                vuint32_t SPEF : 1;      /* SPI Parity Error Flag. The SPEF flag indicates that a SPI fr .. */
                vuint32_t : 1;
                vuint32_t RFOF : 1;      /* Receive FIFO overflow flag. Indicates that an overflow condi .. */
                vuint32_t : 1;
                vuint32_t RFDF : 1;      /* Receive FIFO drain flag: indicates that the Rx FIFO can be d .. */
                vuint32_t : 1;
                vuint32_t TXCTR : 4;      /* TX FIFO counter. Indicates the number of valid entries in th .. */
                vuint32_t TXNXTPTR : 4;      /* Transmit next pointer. Indicates which TX FIFO Entry will be .. */
                vuint32_t RXCTR : 4;      /* Rx FIFO counter. Indicates the number of entries in the Rx F .. */
                vuint32_t POPNXTPTR : 4;      /* Pop next pointer. Contains a pointer to the Rx FIFO entry th .. */
            } B;
        } SR;      /* DSPI status register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TCF_RE : 1;      /* Transmission Complete Request Enable. The TCF_RE bit enables .. */
                vuint32_t : 2;
                vuint32_t EOQF_RE : 1;      /* DSPI Finished Request Enable. The EOQF_RE bit enables the EO .. */
                vuint32_t TFUF_RE : 1;      /* Transmit FIFO Underflow Request Enable. The TFUF_RE bit enab .. */
                vuint32_t : 1;
                vuint32_t TFFF_RE : 1;      /* Transmit FIFO Fill Request Enable. The TFFF_RE bit enables t .. */
                vuint32_t TFFF_DIRS : 1;      /* Transmit FIFO Fill DMA or Interrupt Request Select. The TFFF .. */
                vuint32_t : 2;
                vuint32_t SPEF_RE : 1;      /* SPI Parity Error Request Enable. The SPEF_RE bits enables SP .. */
                vuint32_t : 1;
                vuint32_t RFOF_RE : 1;      /* Receive FIFO Overflow Request Enable. The RFOF_RE bit enable .. */
                vuint32_t : 1;
                vuint32_t RFDF_RE : 1;      /* Receive FIFO Drain Request Enable. The RFDF_RE bit enables t .. */
                vuint32_t RFDF_DIRS : 1;      /* Receive FIFO Drain DMA or Interrupt Request Select. The RFDF .. */
            } B;
        } RSER;      /* DSPI DMA/interrupt request select and enable register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CONT : 1;      /* Continuous peripheral chip select enable.Selects a continuou .. */
                vuint32_t CTAS : 3;      /* Clock and transfer attributes select. Selects which of the D .. */
                vuint32_t EOQ : 1;      /* End of queue. Provides a means for host software to signal t .. */
                vuint32_t CTCNT : 1;      /* Clear SPI_TCNT. Provides a means for host software to clear  .. */
                vuint32_t PE : 1;      /* Parity Enable. PE bit enables parity bit transmission and pa .. */
                vuint32_t PP : 1;      /* Parity Polarity. PP bit controls polarity of the parity bit  .. */
                vuint32_t PCS7 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS6 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS5 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS4 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS3 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS2 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS1 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS0 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Holds SPI data to be transferred according to .. */
            } B;
        } PUSHR;      /* DSPI push TX FIFO register */

        union {
            vuint32_t R;
            struct {
                vuint32_t RXDATA : 32;      /* Received data. The RXDATA field contains the SPI data from t .. */
            } B;
        } POPR;      /* DSPI pop Rx FIFO register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR0;      /* DSPI transmit FIFO register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR1;      /* DSPI transmit FIFO register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR2;      /* DSPI transmit FIFO register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR3;      /* DSPI transmit FIFO register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR4;      /* DSPI transmit FIFO register 1 */

        int8_t Reserved182[44];

        union {
            vuint32_t R;
            struct {
                vuint32_t RXDATA : 32;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR0;      /*  DSPI receive FIFO register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR1;      /*  DSPI receive FIFO register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR2;      /*  DSPI receive FIFO register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR3;      /*  DSPI receive FIFO register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR4;      /*  DSPI receive FIFO register 0 */
    };                                             /* End of DSPI_0_tag */ 
#define DSPI_0  (*(volatile struct DSPI_0_tag *)       0xFFF90000UL)

/*---------------------------------------------------------------------------*/
/* Deserial/Serial Peripheral Interface 1                                    */
/*---------------------------------------------------------------------------*/
    struct DSPI_1_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t MSTR : 1;      /* Master/slave mode select. Configures the DSPI for either mas .. */
                vuint32_t CONT_SCKE : 1;      /* Continuous SCK enable. Enables the serial communication cloc .. */
                vuint32_t DONF : 2;      /* DSPI configuration. */
                vuint32_t FRZ : 1;      /* Freeze. Enables the DSPI transfers to be stopped on the next .. */
                vuint32_t MTFE : 1;      /* Modified timing format enable. Enables a modified transfer f .. */
                vuint32_t PCSSE : 1;      /* Peripheral chip select strobe enable. Enables the PCS5/PCSS  .. */
                vuint32_t ROOE : 1;      /* Receive FIFO overflow overwrite enable. Enables an Rx FIFO o .. */
                vuint32_t PCSIS7 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS6 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS5 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS4 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS3 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS2 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS1 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS0 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t DOZE : 1;      /* Doze Enable. The DOZE bit provides support for externally co .. */
                vuint32_t MDIS : 1;      /* Module disable. Allows the clock to be stopped to the non-me .. */
                vuint32_t DIS_TXF : 1;      /* Disable Transmit FIFO. When DIS_TXF is set, the TX FIFO acts .. */
                vuint32_t DIS_RXF : 1;      /* Disable Receive FIFO. When DIS_RXF is set, the RX FIFO acts  .. */
                vuint32_t CLR_TXF : 1;      /* Clear TX FIFO. Flushes the TX FIFO. Writing a 1 to CLR_TXF c .. */
                vuint32_t CLR_RXF : 1;      /* Clear Rx FIFO. Flushes the Rx FIFO. Writing a 1 to CLR_RXF c .. */
                vuint32_t SMPL_PT : 2;      /* Sample point. Allows the host software to select when the DS .. */
                vuint32_t : 6;
                vuint32_t PES : 1;      /* Parity Error Stop. PES bit controls SPI operation when a par .. */
                vuint32_t HALT : 1;      /* Halt. Provides a mechanism for software to start and stop DS .. */
            } B;
        } MCR;      /* DSPI module configuration register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PISR : 1;      /* PISR0-3 and parallel inputs frame positions selection logic  .. */
                vuint32_t : 3;
                vuint32_t CTAR : 3;      /* Maximum implemented DSPI_CTAR register number. */
                vuint32_t TXFR : 4;      /* Maximum implemented DSPI_TXFR register number. */
                vuint32_t RXFR : 4;      /* Maximum implemented DSPI_RXFR register number. */
            } B;
        } HCR;      /* DSPI Hardware Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t SPI_TCNT : 16;      /* SPI transfer counter. Counts the number of SPI transfers the .. */
            } B;
        } TCR;      /* DSPI transfer count register */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* Frame Size. Selects the number of bits transferred per frame .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR0;      /* DSPI clock and transfer attributes register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* FMSZ. Selects the number of bits transferred per frame. The  .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR1;      /* DSPI clock and transfer attributes register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* FMSZ. Selects the number of bits transferred per frame. The  .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR2;      /* DSPI clock and transfer attributes register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* FMSZ. Selects the number of bits transferred per frame. The  .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR3;      /* DSPI clock and transfer attributes register 3 */

        int8_t Reserved183[16];

        union {
            vuint32_t R;
            struct {
                vuint32_t TCF : 1;      /* Transfer Complete Flag. A value of TCF=1 indicates that at l .. */
                vuint32_t TXRXS : 1;      /* TX and RX status.   TXRXS is cleared by writing 1 to it. */
                vuint32_t : 1;
                vuint32_t EOQF : 1;      /* End of queue flag. Indicates that transmission in progress i .. */
                vuint32_t TFUF : 1;      /* Transmit FIFO underflow flag. Indicates that an underflow co .. */
                vuint32_t : 1;
                vuint32_t TFFF : 1;      /* Transmit FIFO fill flag: indicates that the TX FIFO can be f .. */
                vuint32_t : 3;
                vuint32_t SPEF : 1;      /* SPI Parity Error Flag. The SPEF flag indicates that a SPI fr .. */
                vuint32_t : 1;
                vuint32_t RFOF : 1;      /* Receive FIFO overflow flag. Indicates that an overflow condi .. */
                vuint32_t : 1;
                vuint32_t RFDF : 1;      /* Receive FIFO drain flag: indicates that the Rx FIFO can be d .. */
                vuint32_t : 1;
                vuint32_t TXCTR : 4;      /* TX FIFO counter. Indicates the number of valid entries in th .. */
                vuint32_t TXNXTPTR : 4;      /* Transmit next pointer. Indicates which TX FIFO Entry will be .. */
                vuint32_t RXCTR : 4;      /* Rx FIFO counter. Indicates the number of entries in the Rx F .. */
                vuint32_t POPNXTPTR : 4;      /* Pop next pointer. Contains a pointer to the Rx FIFO entry th .. */
            } B;
        } SR;      /* DSPI status register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TCF_RE : 1;      /* Transmission Complete Request Enable. The TCF_RE bit enables .. */
                vuint32_t : 2;
                vuint32_t EOQF_RE : 1;      /* DSPI Finished Request Enable. The EOQF_RE bit enables the EO .. */
                vuint32_t TFUF_RE : 1;      /* Transmit FIFO Underflow Request Enable. The TFUF_RE bit enab .. */
                vuint32_t : 1;
                vuint32_t TFFF_RE : 1;      /* Transmit FIFO Fill Request Enable. The TFFF_RE bit enables t .. */
                vuint32_t TFFF_DIRS : 1;      /* Transmit FIFO Fill DMA or Interrupt Request Select. The TFFF .. */
                vuint32_t : 2;
                vuint32_t SPEF_RE : 1;      /* SPI Parity Error Request Enable. The SPEF_RE bits enables SP .. */
                vuint32_t : 1;
                vuint32_t RFOF_RE : 1;      /* Receive FIFO Overflow Request Enable. The RFOF_RE bit enable .. */
                vuint32_t : 1;
                vuint32_t RFDF_RE : 1;      /* Receive FIFO Drain Request Enable. The RFDF_RE bit enables t .. */
                vuint32_t RFDF_DIRS : 1;      /* Receive FIFO Drain DMA or Interrupt Request Select. The RFDF .. */
            } B;
        } RSER;      /* DSPI DMA/interrupt request select and enable register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CONT : 1;      /* Continuous peripheral chip select enable.Selects a continuou .. */
                vuint32_t CTAS : 3;      /* Clock and transfer attributes select. Selects which of the D .. */
                vuint32_t EOQ : 1;      /* End of queue. Provides a means for host software to signal t .. */
                vuint32_t CTCNT : 1;      /* Clear SPI_TCNT. Provides a means for host software to clear  .. */
                vuint32_t PE : 1;      /* Parity Enable. PE bit enables parity bit transmission and pa .. */
                vuint32_t PP : 1;      /* Parity Polarity. PP bit controls polarity of the parity bit  .. */
                vuint32_t PCS7 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS6 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS5 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS4 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS3 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS2 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS1 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS0 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Holds SPI data to be transferred according to .. */
            } B;
        } PUSHR;      /* DSPI push TX FIFO register */

        union {
            vuint32_t R;
            struct {
                vuint32_t RXDATA : 32;      /* Received data. The RXDATA field contains the SPI data from t .. */
            } B;
        } POPR;      /* DSPI pop Rx FIFO register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR0;      /* DSPI transmit FIFO register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR1;      /* DSPI transmit FIFO register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR2;      /* DSPI transmit FIFO register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR3;      /* DSPI transmit FIFO register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR4;      /* DSPI transmit FIFO register 1 */

        int8_t Reserved184[44];

        union {
            vuint32_t R;
            struct {
                vuint32_t RXDATA : 32;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR0;      /*  DSPI receive FIFO register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR1;      /*  DSPI receive FIFO register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR2;      /*  DSPI receive FIFO register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR3;      /*  DSPI receive FIFO register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR4;      /*  DSPI receive FIFO register 0 */
    };                                             /* End of DSPI_1_tag */ 
#define DSPI_1  (*(volatile struct DSPI_1_tag *)       0xFFF94000UL)

/*---------------------------------------------------------------------------*/
/* Deserial/Serial Peripheral Interface 2                                    */
/*---------------------------------------------------------------------------*/
    struct DSPI_2_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t MSTR : 1;      /* Master/slave mode select. Configures the DSPI for either mas .. */
                vuint32_t CONT_SCKE : 1;      /* Continuous SCK enable. Enables the serial communication cloc .. */
                vuint32_t DONF : 2;      /* DSPI configuration. */
                vuint32_t FRZ : 1;      /* Freeze. Enables the DSPI transfers to be stopped on the next .. */
                vuint32_t MTFE : 1;      /* Modified timing format enable. Enables a modified transfer f .. */
                vuint32_t PCSSE : 1;      /* Peripheral chip select strobe enable. Enables the PCS5/PCSS  .. */
                vuint32_t ROOE : 1;      /* Receive FIFO overflow overwrite enable. Enables an Rx FIFO o .. */
                vuint32_t PCSIS7 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS6 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS5 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS4 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS3 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS2 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS1 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t PCSIS0 : 1;      /* Peripheral chip select inactive state. Determines the inacti .. */
                vuint32_t DOZE : 1;      /* Doze Enable. The DOZE bit provides support for externally co .. */
                vuint32_t MDIS : 1;      /* Module disable. Allows the clock to be stopped to the non-me .. */
                vuint32_t DIS_TXF : 1;      /* Disable Transmit FIFO. When DIS_TXF is set, the TX FIFO acts .. */
                vuint32_t DIS_RXF : 1;      /* Disable Receive FIFO. When DIS_RXF is set, the RX FIFO acts  .. */
                vuint32_t CLR_TXF : 1;      /* Clear TX FIFO. Flushes the TX FIFO. Writing a 1 to CLR_TXF c .. */
                vuint32_t CLR_RXF : 1;      /* Clear Rx FIFO. Flushes the Rx FIFO. Writing a 1 to CLR_RXF c .. */
                vuint32_t SMPL_PT : 2;      /* Sample point. Allows the host software to select when the DS .. */
                vuint32_t : 6;
                vuint32_t PES : 1;      /* Parity Error Stop. PES bit controls SPI operation when a par .. */
                vuint32_t HALT : 1;      /* Halt. Provides a mechanism for software to start and stop DS .. */
            } B;
        } MCR;      /* DSPI module configuration register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 1;
                vuint32_t PISR : 1;      /* PISR0-3 and parallel inputs frame positions selection logic  .. */
                vuint32_t : 3;
                vuint32_t CTAR : 3;      /* Maximum implemented DSPI_CTAR register number. */
                vuint32_t TXFR : 4;      /* Maximum implemented DSPI_TXFR register number. */
                vuint32_t RXFR : 4;      /* Maximum implemented DSPI_RXFR register number. */
            } B;
        } HCR;      /* DSPI Hardware Configuration Register */

        union {
            vuint32_t R;
            struct {
                vuint32_t SPI_TCNT : 16;      /* SPI transfer counter. Counts the number of SPI transfers the .. */
            } B;
        } TCR;      /* DSPI transfer count register */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* Frame Size. Selects the number of bits transferred per frame .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR0;      /* DSPI clock and transfer attributes register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* FMSZ. Selects the number of bits transferred per frame. The  .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR1;      /* DSPI clock and transfer attributes register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* FMSZ. Selects the number of bits transferred per frame. The  .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR2;      /* DSPI clock and transfer attributes register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DBR : 1;      /* Double baud rate. The DBR bit doubles the effective baud rat .. */
                vuint32_t FMSZ : 4;      /* FMSZ. Selects the number of bits transferred per frame. The  .. */
                vuint32_t CPOL : 1;      /* Clock polarity. Selects the inactive state of the serial com .. */
                vuint32_t CPHA : 1;      /* Clock phase. Selects which edge of SCK causes data to change .. */
                vuint32_t LSBFE : 1;      /* LSB first enable. Selects if the LSB or MSB of the frame is  .. */
                vuint32_t PCSSCK : 2;      /* PCS to SCK delay prescaler. Selects the prescaler value for  .. */
                vuint32_t PASC : 2;      /* After SCK delay prescaler. Selects the prescaler value for t .. */
                vuint32_t PDT : 2;      /* Delay after transfer prescaler. The PDT field selects the pr .. */
                vuint32_t PBR : 2;      /* Baud rate prescaler. Selects the prescaler value for the bau .. */
                vuint32_t CSSCK : 4;      /* PCS to SCK delay scaler. */
                vuint32_t ASC : 4;      /* After SCK delay scaler. Selects the scaler value for the Aft .. */
                vuint32_t DT : 4;      /* Delay after transfer scaler. The DT field selects the delay  .. */
                vuint32_t BR : 4;      /* Baud rate scaler. Selects the scaler value for the baud rate .. */
            } B;
        } CTAR3;      /* DSPI clock and transfer attributes register 3 */

        int8_t Reserved185[16];

        union {
            vuint32_t R;
            struct {
                vuint32_t TCF : 1;      /* Transfer Complete Flag. A value of TCF=1 indicates that at l .. */
                vuint32_t TXRXS : 1;      /* TX and RX status.   TXRXS is cleared by writing 1 to it. */
                vuint32_t : 1;
                vuint32_t EOQF : 1;      /* End of queue flag. Indicates that transmission in progress i .. */
                vuint32_t TFUF : 1;      /* Transmit FIFO underflow flag. Indicates that an underflow co .. */
                vuint32_t : 1;
                vuint32_t TFFF : 1;      /* Transmit FIFO fill flag: indicates that the TX FIFO can be f .. */
                vuint32_t : 3;
                vuint32_t SPEF : 1;      /* SPI Parity Error Flag. The SPEF flag indicates that a SPI fr .. */
                vuint32_t : 1;
                vuint32_t RFOF : 1;      /* Receive FIFO overflow flag. Indicates that an overflow condi .. */
                vuint32_t : 1;
                vuint32_t RFDF : 1;      /* Receive FIFO drain flag: indicates that the Rx FIFO can be d .. */
                vuint32_t : 1;
                vuint32_t TXCTR : 4;      /* TX FIFO counter. Indicates the number of valid entries in th .. */
                vuint32_t TXNXTPTR : 4;      /* Transmit next pointer. Indicates which TX FIFO Entry will be .. */
                vuint32_t RXCTR : 4;      /* Rx FIFO counter. Indicates the number of entries in the Rx F .. */
                vuint32_t POPNXTPTR : 4;      /* Pop next pointer. Contains a pointer to the Rx FIFO entry th .. */
            } B;
        } SR;      /* DSPI status register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TCF_RE : 1;      /* Transmission Complete Request Enable. The TCF_RE bit enables .. */
                vuint32_t : 2;
                vuint32_t EOQF_RE : 1;      /* DSPI Finished Request Enable. The EOQF_RE bit enables the EO .. */
                vuint32_t TFUF_RE : 1;      /* Transmit FIFO Underflow Request Enable. The TFUF_RE bit enab .. */
                vuint32_t : 1;
                vuint32_t TFFF_RE : 1;      /* Transmit FIFO Fill Request Enable. The TFFF_RE bit enables t .. */
                vuint32_t TFFF_DIRS : 1;      /* Transmit FIFO Fill DMA or Interrupt Request Select. The TFFF .. */
                vuint32_t : 2;
                vuint32_t SPEF_RE : 1;      /* SPI Parity Error Request Enable. The SPEF_RE bits enables SP .. */
                vuint32_t : 1;
                vuint32_t RFOF_RE : 1;      /* Receive FIFO Overflow Request Enable. The RFOF_RE bit enable .. */
                vuint32_t : 1;
                vuint32_t RFDF_RE : 1;      /* Receive FIFO Drain Request Enable. The RFDF_RE bit enables t .. */
                vuint32_t RFDF_DIRS : 1;      /* Receive FIFO Drain DMA or Interrupt Request Select. The RFDF .. */
            } B;
        } RSER;      /* DSPI DMA/interrupt request select and enable register */

        union {
            vuint32_t R;
            struct {
                vuint32_t CONT : 1;      /* Continuous peripheral chip select enable.Selects a continuou .. */
                vuint32_t CTAS : 3;      /* Clock and transfer attributes select. Selects which of the D .. */
                vuint32_t EOQ : 1;      /* End of queue. Provides a means for host software to signal t .. */
                vuint32_t CTCNT : 1;      /* Clear SPI_TCNT. Provides a means for host software to clear  .. */
                vuint32_t PE : 1;      /* Parity Enable. PE bit enables parity bit transmission and pa .. */
                vuint32_t PP : 1;      /* Parity Polarity. PP bit controls polarity of the parity bit  .. */
                vuint32_t PCS7 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS6 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS5 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS4 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS3 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS2 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS1 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t PCS0 : 1;      /* Peripheral chip select n. Selects which PCS signals will be  .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Holds SPI data to be transferred according to .. */
            } B;
        } PUSHR;      /* DSPI push TX FIFO register */

        union {
            vuint32_t R;
            struct {
                vuint32_t RXDATA : 32;      /* Received data. The RXDATA field contains the SPI data from t .. */
            } B;
        } POPR;      /* DSPI pop Rx FIFO register */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR0;      /* DSPI transmit FIFO register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR1;      /* DSPI transmit FIFO register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR2;      /* DSPI transmit FIFO register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR3;      /* DSPI transmit FIFO register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t TXCMD : 16;      /* Transmit command. Contains the command that sets the transfe .. */
                vuint32_t TXDATA : 16;      /* Transmit data. Contains the SPI data to be shifted out. */
            } B;
        } TXFR4;      /* DSPI transmit FIFO register 1 */

        int8_t Reserved186[44];

        union {
            vuint32_t R;
            struct {
                vuint32_t RXDATA : 32;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR0;      /*  DSPI receive FIFO register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR1;      /*  DSPI receive FIFO register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR2;      /*  DSPI receive FIFO register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR3;      /*  DSPI receive FIFO register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RXDATA : 16;      /* Receive data. Contains the received SPI data. */
            } B;
        } RXFR4;      /*  DSPI receive FIFO register 0 */
    };                                             /* End of DSPI_2_tag */ 
#define DSPI_2  (*(volatile struct DSPI_2_tag *)       0xFFF98000UL)

/*---------------------------------------------------------------------------*/
/* FlexCAN 0 register                                                        */
/*---------------------------------------------------------------------------*/
    struct FLEXCAN_0_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t MDIS : 1;      /* Module disable. Controls whether FlexCAN2 is enabled or not. .. */
                vuint32_t FRZ : 1;      /* Freeze enable. Specifies the FlexCAN2 behavior when the HALT .. */
                vuint32_t FEN : 1;      /* FIFO Enable. controls whether the FIFO feature is enabled or .. */
                vuint32_t HALT : 1;      /* Halt FlexCAN. Assertion of this bit puts the FlexCAN2 module .. */
                vuint32_t NOTRDY : 1;      /* FlexCAN2 not ready. Indicates that FlexCAN2 is either disabl .. */
                vuint32_t WAK_MSK : 1;      /* Wake Up Interrupt Mask. enables the Wake Up Interrupt genera .. */
                vuint32_t SOFTRST : 1;      /* Soft reset. When asserted, FlexCAN2 resets its internal stat .. */
                vuint32_t FRZACK : 1;      /* Freeze mode acknowledge. Indicates that FlexCAN2 is in freez .. */
                vuint32_t SUPV : 1;      /* Supervisor Modeconfigures some of the FlexCAN registers to b .. */
                vuint32_t SLF_WAK : 1;      /* Self Wake Up. enables the Self Wake Up feature when FlexCAN  .. */
                vuint32_t WRN_EN : 1;      /* Warning Interrupt Enable. Enables the generation of the TWRN .. */
                vuint32_t LPM_ACK : 1;      /*  Low power mode acknowledge. Indicates whether FlexCAN2 is d .. */
                vuint32_t WAK_SRC : 1;      /* Wake Up Source. defines whether the integrated low-pass filt .. */
                vuint32_t DOZE : 1;      /* Doze Mode Enable. defines whether FlexCAN is allowed to ente .. */
                vuint32_t SRX_DIS : 1;      /* Self Reception Disable. defines whether FlexCAN is allowed t .. */
                vuint32_t BCC : 1;      /* Backwards Compatibility Configuration. This bit is provided  .. */
                vuint32_t : 2;
                vuint32_t LPRIO_EN : 1;      /* Local Priority Enable. This bit is provided for backwards co .. */
                vuint32_t AEN : 1;      /* Abort Enable. Is supplied for backwards compatibility reason .. */
                vuint32_t : 2;
                vuint32_t IDAM : 1;      /* ID Acceptance Mode. Identifies the format of the elements of .. */
                vuint32_t : 3;
                vuint32_t MAXMB : 6;      /*  Maximum number of message buffers. This 6-bit field defines .. */
            } B;
        } MCR;      /* Module configuration register */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRESDIV : 8;      /* Prescaler division factor. Defines the ratio between the CPI .. */
                vuint32_t RJW : 2;      /* Resync jump width. Defines the maximum number of time quanta .. */
                vuint32_t PSEG1 : 3;      /* Phase segment 1. Defines the length of phase buffer segment  .. */
                vuint32_t PSEG2 : 3;      /* Phase segment 2. Defines the length of phase buffer segment  .. */
                vuint32_t BOFFMSK : 1;      /* Bus off mask. Provides a mask for the bus off interrupt. 0 B .. */
                vuint32_t ERRMSK : 1;      /* Error mask. Provides a mask for the error interrupt. 0 Error .. */
                vuint32_t CLK_SRC : 1;      /*  CAN engine clock source. Selects the clock source to the CA .. */
                vuint32_t LPB : 1;      /*  Loop back. Configures FlexCAN2 to operate in loop-back mode .. */
                vuint32_t TWRN_MSK : 1;      /* TX Warning Interrupt Mask. This bit provides a mask for the  .. */
                vuint32_t RWRN_MSK : 1;      /* RX Warning Interrupt Mask. This bit provides a mask for the  .. */
                vuint32_t : 2;
                vuint32_t SMP : 1;      /*  Sampling mode. Defines the sampling mode of each bit in the .. */
                vuint32_t BOFFREC : 1;      /*  Bus off recovery mode. Defines how FlexCAN2 recovers from b .. */
                vuint32_t TSYN : 1;      /*  Timer sync mode. Enables a mechanism that resets the free-r .. */
                vuint32_t LBUF : 1;      /*  Lowest buffer transmitted first. This bit defines the order .. */
                vuint32_t LOM : 1;      /*  Listen-only mode. Configures FlexCAN2 to operate in listen- .. */
                vuint32_t PROPSEG : 3;      /*  Propagation segment. Defines the length of the propagation  .. */
            } B;
        } CTRL;      /* Control register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t TIMER : 16;      /* TIMER represents a 16-bit free running counter that can be r .. */
            } B;
        } TIMER;      /* Free running timer */

        int8_t Reserved187[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXGMASK;      /* RX global mask */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RX14MASK;      /* RX buffer 14 mask */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RX15MASK;      /* RX buffer 15 mask */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RX_ERR_COUNTER : 8;      /* receive error counter */
                vuint32_t TX_ERR_COUNTER : 8;      /* the transmit error counter */
            } B;
        } ECR;      /* Error counter register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 14;
                vuint32_t TWRN_INT : 1;      /* TX Warning Interrupt Flag. If the WRN_EN bit in MCR is asser .. */
                vuint32_t RWRN_INT : 1;      /* RX Warning Interrupt Flag. If the WRN_EN bit in MCR is asser .. */
                vuint32_t BIT1_ERR : 1;      /*  Bit 1 error. Indicates when an inconsistency occurs between .. */
                vuint32_t BIT0_ERR : 1;      /*  Bit 0 error. Indicates when an inconsistency occurs between .. */
                vuint32_t ACK_ERR : 1;      /*  Acknowledge error. Indicates that an acknowledge error has  .. */
                vuint32_t CRC_ERR : 1;      /*  Cyclic redundancy code error. Indicates that a CRC error ha .. */
                vuint32_t FRM_ERR : 1;      /*  Form error. Indicates that a form error has been detected b .. */
                vuint32_t STF_ERR : 1;      /*  Stuffing error. Indicates that a stuffing error has been de .. */
                vuint32_t TX_WRN : 1;      /*  TX error counter. This status bit indicates that repetitive .. */
                vuint32_t RX_WRN : 1;      /*  RX error counter. This status bit indicates when repetitive .. */
                vuint32_t IDLE : 1;      /*  CAN bus IDLE state. This status bit indicates when CAN bus  .. */
                vuint32_t TXRX : 1;      /*  Current FlexCAN2 status (transmitting/receiving). This stat .. */
                vuint32_t FLT_CONF : 2;      /*  Fault confinement state. This status bit indicates the conf .. */
                vuint32_t : 1;
                vuint32_t BOFF_INT : 1;      /* Bus off interrupt. This status bit is set when FlexCAN2 is i .. */
                vuint32_t ERR_INT : 1;      /*  Error interrupt. This status bit indicates that at least on .. */
                vuint32_t WAK_INT : 1;      /* Wake-Up Interrupt. When FlexCAN is in Doze Mode or Stop Mode .. */
            } B;
        } ESR;      /* Error and status register */

        union {
            vuint32_t R;
            struct {
                vuint32_t BUF63M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF62M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF61M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF60M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF59M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF58M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF57M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF56M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF55M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF54M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF53M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF52M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF51M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF50M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF49M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF48M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF47M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF46M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF45M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF44M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF43M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF42M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF41M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF40M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF39M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF38M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF37M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF36M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF35M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF34M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF33M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF32M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
            } B;
        } IMASK2;      /* Interrupt masks 2 register */

        union {
            vuint32_t R;
            struct {
                vuint32_t BUF31M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF30M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF29M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF28M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF27M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF26M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF25M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF24M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF23M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF22M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF21M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF20M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF19M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF18M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF17M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF16M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF15M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF14M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF13M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF12M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF11M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF10M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF09M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF08M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF07M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF06M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF05M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF04M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF03M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF02M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF01M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF00M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
            } B;
        } IMASK1;      /* Interrupt masks 1 register */

        union {
            vuint32_t R;
            struct {
                vuint32_t BUF63I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF62I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF61I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF60I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF59I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF58I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF57I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF56I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF55I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF54I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF53I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF52I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF51I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF50I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF49I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF48I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF47I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF46I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF45I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF44I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF43I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF42I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF41I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF40I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF39I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF38I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF37I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF36I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF35I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF34I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF33I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF32I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
            } B;
        } IFLAG2;      /* Interrupt flags 2 register */

        union {
            vuint32_t R;
            struct {
                vuint32_t BUF31I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF30I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF29I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF28I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF27I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF26I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF25I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF24I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF23I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF22I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF21I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF20I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF19I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF18I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF17I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF16I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF15I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF14I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF13I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF12I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF11I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF10I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF09I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF08I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF07I : 1;      /* Buffer MB7 Interrupt or FIFO Overflow. If the FIFO is not en .. */
                vuint32_t BUF06I : 1;      /* Buffer MB6 Interrupt or FIFO Warning. If the FIFO is not ena .. */
                vuint32_t BUF05I : 1;      /* Buffer MB5 Interrupt or Frames available in FIFO.If the FIFO .. */
                vuint32_t BUF04I : 1;      /* Message buffer n interrupt or reserved. If the FIFO is not e .. */
                vuint32_t BUF03I : 1;      /* Message buffer n interrupt or reserved. If the FIFO is not e .. */
                vuint32_t BUF02I : 1;      /* Message buffer n interrupt or reserved. If the FIFO is not e .. */
                vuint32_t BUF01I : 1;      /* Message buffer n interrupt or reserved. If the FIFO is not e .. */
                vuint32_t BUF00I : 1;      /* Message buffer n interrupt or reserved. If the FIFO is not e .. */
            } B;
        } IFLAG1;      /* Interrupt flags 1 register */

        int8_t Reserved188[76];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB0_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB0_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD0_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD0_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB1_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB1_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD1_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD1_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB2_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB2_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD2_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD2_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB3_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB3_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD3_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD3_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB4_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB4_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD4_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD4_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB5_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB5_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD5_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD5_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB6_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB6_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD6_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD6_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB7_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB7_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD7_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD7_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB8_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB8_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD8_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD8_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB9_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB9_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD9_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD9_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB10_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB10_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD10_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD10_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB11_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB11_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD11_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD11_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB12_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB12_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD12_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD12_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB13_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB13_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD13_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD13_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB14_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB14_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD14_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD14_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB15_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB15_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD15_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD15_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB16_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB16_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD16_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD16_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB17_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB17_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD17_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD17_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB18_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB18_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD18_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD18_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB19_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB19_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD19_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD19_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB20_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB20_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD20_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD20_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB21_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB21_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD21_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD21_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB22_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB22_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD22_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD22_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB23_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB23_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD23_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD23_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB24_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB24_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD24_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD24_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB25_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB25_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD25_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD25_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB26_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB26_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD26_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD26_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB27_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB27_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD27_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD27_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB28_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB28_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD28_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD28_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB29_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB29_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD29_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD29_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB30_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB30_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD30_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD30_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB31_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB31_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD31_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD31_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB32_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB32_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD32_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD32_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB33_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB33_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD33_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD33_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB34_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB34_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD34_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD34_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB35_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB35_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD35_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD35_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB36_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB36_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD36_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD36_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB37_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB37_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD37_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD37_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB38_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB38_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD38_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD38_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB39_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB39_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD39_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD39_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB40_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB40_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD40_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
            } B;
        } MD40_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB41_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB41_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD41_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD41_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB42_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB42_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD42_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD42_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB43_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB43_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD43_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD43_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB44_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB44_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD44_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD44_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB45_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB45_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD45_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD45_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB46_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB46_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD46_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD46_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB47_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB47_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD47_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD47_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB48_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB48_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD48_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD48_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB49_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB49_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD49_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD49_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB50_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB50_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD50_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD50_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB51_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB51_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD51_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD51_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB52_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB52_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD52_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD52_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB53_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB53_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD53_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD53_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB54_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB54_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD54_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD54_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB55_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB55_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD55_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD55_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB56_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB56_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD56_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD56_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB57_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB57_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD57_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD57_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB58_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB58_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD58_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD58_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB59_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB59_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD59_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
            } B;
        } MD59_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB60_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB60_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD60_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD60_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB61_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB61_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD61_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD61_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB62_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB62_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD62_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD62_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB63_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB63_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD63_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD63_DF47;      /* Data fields 4-7 */

        int8_t Reserved189[1024];

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR0;      /* RX Individual Mask Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR1;      /* RX Individual Mask Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR2;      /* RX Individual Mask Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR3;      /* RX Individual Mask Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR4;      /* RX Individual Mask Register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR5;      /* RX Individual Mask Register 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR6;      /* RX Individual Mask Register 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR7;      /* RX Individual Mask Register 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR8;      /* RX Individual Mask Register 8 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR9;      /* RX Individual Mask Register 9 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR10;      /* RX Individual Mask Register 10 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR11;      /* RX Individual Mask Register 11 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR12;      /* RX Individual Mask Register 12 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR13;      /* RX Individual Mask Register 13 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR14;      /* RX Individual Mask Register 14 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR15;      /* RX Individual Mask Register 15 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR16;      /* RX Individual Mask Register 16 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR17;      /* RX Individual Mask Register 17 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR18;      /* RX Individual Mask Register 18 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR19;      /* RX Individual Mask Register 19 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR20;      /* RX Individual Mask Register 20 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR21;      /* RX Individual Mask Register 21 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR22;      /* RX Individual Mask Register 22 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR23;      /* RX Individual Mask Register 23 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR24;      /* RX Individual Mask Register 24 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR25;      /* RX Individual Mask Register 25 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR26;      /* RX Individual Mask Register 26 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR27;      /* RX Individual Mask Register 27 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR28;      /* RX Individual Mask Register 28 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR29;      /* RX Individual Mask Register 29 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR30;      /* RX Individual Mask Register 30 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR31;      /* RX Individual Mask Register 31 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR32;      /* RX Individual Mask Register 32 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR33;      /* RX Individual Mask Register 33 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR34;      /* RX Individual Mask Register 34 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR35;      /* RX Individual Mask Register 35 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR36;      /* RX Individual Mask Register 36 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR37;      /* RX Individual Mask Register 37 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR38;      /* RX Individual Mask Register 38 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR39;      /* RX Individual Mask Register 39 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR40;      /* RX Individual Mask Register 40 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR41;      /* RX Individual Mask Register 41 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR42;      /* RX Individual Mask Register 42 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR43;      /* RX Individual Mask Register 43 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR44;      /* RX Individual Mask Register 44 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR45;      /* RX Individual Mask Register 45 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR46;      /* RX Individual Mask Register 46 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR47;      /* RX Individual Mask Register 47 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR48;      /* RX Individual Mask Register 48 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR49;      /* RX Individual Mask Register 49 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR50;      /* RX Individual Mask Register 50 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR51;      /* RX Individual Mask Register 51 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR52;      /* RX Individual Mask Register 52 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR53;      /* RX Individual Mask Register 53 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR54;      /* RX Individual Mask Register 54 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR55;      /* RX Individual Mask Register 55 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR56;      /* RX Individual Mask Register 56 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR57;      /* RX Individual Mask Register 57 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR58;      /* RX Individual Mask Register 58 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR59;      /* RX Individual Mask Register 59 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR60;      /* RX Individual Mask Register 60 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR61;      /* RX Individual Mask Register 61 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR62;      /* RX Individual Mask Register 62 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR63;      /* RX Individual Mask Register 63 */
    };                                             /* End of FLEXCAN_0_tag */ 
#define FLEXCAN_0  (*(volatile struct FLEXCAN_0_tag *)    0xFFFC0000UL)

/*---------------------------------------------------------------------------*/
/* FlexCAN 1 register                                                        */
/*---------------------------------------------------------------------------*/
    struct FLEXCAN_1_tag {

        union {
            vuint32_t R;
            struct {
                vuint32_t MDIS : 1;      /* Module disable. Controls whether FlexCAN2 is enabled or not. .. */
                vuint32_t FRZ : 1;      /* Freeze enable. Specifies the FlexCAN2 behavior when the HALT .. */
                vuint32_t FEN : 1;      /* FIFO Enable. controls whether the FIFO feature is enabled or .. */
                vuint32_t HALT : 1;      /* Halt FlexCAN. Assertion of this bit puts the FlexCAN2 module .. */
                vuint32_t NOTRDY : 1;      /* FlexCAN2 not ready. Indicates that FlexCAN2 is either disabl .. */
                vuint32_t WAK_MSK : 1;      /* Wake Up Interrupt Mask. enables the Wake Up Interrupt genera .. */
                vuint32_t SOFTRST : 1;      /* Soft reset. When asserted, FlexCAN2 resets its internal stat .. */
                vuint32_t FRZACK : 1;      /* Freeze mode acknowledge. Indicates that FlexCAN2 is in freez .. */
                vuint32_t SUPV : 1;      /* Supervisor Modeconfigures some of the FlexCAN registers to b .. */
                vuint32_t SLF_WAK : 1;      /* Self Wake Up. enables the Self Wake Up feature when FlexCAN  .. */
                vuint32_t WRN_EN : 1;      /* Warning Interrupt Enable. Enables the generation of the TWRN .. */
                vuint32_t LPM_ACK : 1;      /*  Low power mode acknowledge. Indicates whether FlexCAN2 is d .. */
                vuint32_t WAK_SRC : 1;      /* Wake Up Source. defines whether the integrated low-pass filt .. */
                vuint32_t DOZE : 1;      /* Doze Mode Enable. defines whether FlexCAN is allowed to ente .. */
                vuint32_t SRX_DIS : 1;      /* Self Reception Disable. defines whether FlexCAN is allowed t .. */
                vuint32_t BCC : 1;      /* Backwards Compatibility Configuration. This bit is provided  .. */
                vuint32_t : 2;
                vuint32_t LPRIO_EN : 1;      /* Local Priority Enable. This bit is provided for backwards co .. */
                vuint32_t AEN : 1;      /* Abort Enable. Is supplied for backwards compatibility reason .. */
                vuint32_t : 2;
                vuint32_t IDAM : 1;      /* ID Acceptance Mode. Identifies the format of the elements of .. */
                vuint32_t : 3;
                vuint32_t MAXMB : 6;      /*  Maximum number of message buffers. This 6-bit field defines .. */
            } B;
        } MCR;      /* Module configuration register */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRESDIV : 8;      /* Prescaler division factor. Defines the ratio between the CPI .. */
                vuint32_t RJW : 2;      /* Resync jump width. Defines the maximum number of time quanta .. */
                vuint32_t PSEG1 : 3;      /* Phase segment 1. Defines the length of phase buffer segment  .. */
                vuint32_t PSEG2 : 3;      /* Phase segment 2. Defines the length of phase buffer segment  .. */
                vuint32_t BOFFMSK : 1;      /* Bus off mask. Provides a mask for the bus off interrupt. 0 B .. */
                vuint32_t ERRMSK : 1;      /* Error mask. Provides a mask for the error interrupt. 0 Error .. */
                vuint32_t CLK_SRC : 1;      /*  CAN engine clock source. Selects the clock source to the CA .. */
                vuint32_t LPB : 1;      /*  Loop back. Configures FlexCAN2 to operate in loop-back mode .. */
                vuint32_t TWRN_MSK : 1;      /* TX Warning Interrupt Mask. This bit provides a mask for the  .. */
                vuint32_t RWRN_MSK : 1;      /* RX Warning Interrupt Mask. This bit provides a mask for the  .. */
                vuint32_t : 2;
                vuint32_t SMP : 1;      /*  Sampling mode. Defines the sampling mode of each bit in the .. */
                vuint32_t BOFFREC : 1;      /*  Bus off recovery mode. Defines how FlexCAN2 recovers from b .. */
                vuint32_t TSYN : 1;      /*  Timer sync mode. Enables a mechanism that resets the free-r .. */
                vuint32_t LBUF : 1;      /*  Lowest buffer transmitted first. This bit defines the order .. */
                vuint32_t LOM : 1;      /*  Listen-only mode. Configures FlexCAN2 to operate in listen- .. */
                vuint32_t PROPSEG : 3;      /*  Propagation segment. Defines the length of the propagation  .. */
            } B;
        } CTRL;      /* Control register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t TIMER : 16;      /* TIMER represents a 16-bit free running counter that can be r .. */
            } B;
        } TIMER;      /* Free running timer */

        int8_t Reserved190[4];

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXGMASK;      /* RX global mask */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RX14MASK;      /* RX buffer 14 mask */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RX15MASK;      /* RX buffer 15 mask */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 16;
                vuint32_t RX_ERR_COUNTER : 8;      /* receive error counter */
                vuint32_t TX_ERR_COUNTER : 8;      /* the transmit error counter */
            } B;
        } ECR;      /* Error counter register */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 14;
                vuint32_t TWRN_INT : 1;      /* TX Warning Interrupt Flag. If the WRN_EN bit in MCR is asser .. */
                vuint32_t RWRN_INT : 1;      /* RX Warning Interrupt Flag. If the WRN_EN bit in MCR is asser .. */
                vuint32_t BIT1_ERR : 1;      /*  Bit 1 error. Indicates when an inconsistency occurs between .. */
                vuint32_t BIT0_ERR : 1;      /*  Bit 0 error. Indicates when an inconsistency occurs between .. */
                vuint32_t ACK_ERR : 1;      /*  Acknowledge error. Indicates that an acknowledge error has  .. */
                vuint32_t CRC_ERR : 1;      /*  Cyclic redundancy code error. Indicates that a CRC error ha .. */
                vuint32_t FRM_ERR : 1;      /*  Form error. Indicates that a form error has been detected b .. */
                vuint32_t STF_ERR : 1;      /*  Stuffing error. Indicates that a stuffing error has been de .. */
                vuint32_t TX_WRN : 1;      /*  TX error counter. This status bit indicates that repetitive .. */
                vuint32_t RX_WRN : 1;      /*  RX error counter. This status bit indicates when repetitive .. */
                vuint32_t IDLE : 1;      /*  CAN bus IDLE state. This status bit indicates when CAN bus  .. */
                vuint32_t TXRX : 1;      /*  Current FlexCAN2 status (transmitting/receiving). This stat .. */
                vuint32_t FLT_CONF : 2;      /*  Fault confinement state. This status bit indicates the conf .. */
                vuint32_t : 1;
                vuint32_t BOFF_INT : 1;      /* Bus off interrupt. This status bit is set when FlexCAN2 is i .. */
                vuint32_t ERR_INT : 1;      /*  Error interrupt. This status bit indicates that at least on .. */
                vuint32_t WAK_INT : 1;      /* Wake-Up Interrupt. When FlexCAN is in Doze Mode or Stop Mode .. */
            } B;
        } ESR;      /* Error and status register */

        union {
            vuint32_t R;
            struct {
                vuint32_t BUF63M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF62M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF61M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF60M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF59M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF58M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF57M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF56M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF55M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF54M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF53M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF52M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF51M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF50M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF49M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF48M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF47M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF46M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF45M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF44M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF43M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF42M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF41M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF40M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF39M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF38M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF37M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF36M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF35M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF34M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF33M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF32M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
            } B;
        } IMASK2;      /* Interrupt masks 2 register */

        union {
            vuint32_t R;
            struct {
                vuint32_t BUF31M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF30M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF29M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF28M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF27M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF26M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF25M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF24M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF23M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF22M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF21M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF20M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF19M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF18M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF17M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF16M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF15M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF14M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF13M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF12M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF11M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF10M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF09M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF08M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF07M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF06M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF05M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF04M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF03M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF02M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF01M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
                vuint32_t BUF00M : 1;      /* Message buffer n mask. Enables or disables the respective Fl .. */
            } B;
        } IMASK1;      /* Interrupt masks 1 register */

        union {
            vuint32_t R;
            struct {
                vuint32_t BUF63I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF62I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF61I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF60I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF59I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF58I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF57I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF56I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF55I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF54I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF53I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF52I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF51I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF50I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF49I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF48I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF47I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF46I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF45I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF44I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF43I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF42I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF41I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF40I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF39I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF38I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF37I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF36I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF35I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF34I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF33I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF32I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
            } B;
        } IFLAG2;      /* Interrupt flags 2 register */

        union {
            vuint32_t R;
            struct {
                vuint32_t BUF31I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF30I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF29I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF28I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF27I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF26I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF25I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF24I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF23I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF22I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF21I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF20I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF19I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF18I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF17I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF16I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF15I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF14I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF13I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF12I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF11I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF10I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF09I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF08I : 1;      /* Message buffer n interrupt. Each bit represents the respecti .. */
                vuint32_t BUF07I : 1;      /* Buffer MB7 Interrupt or FIFO Overflow. If the FIFO is not en .. */
                vuint32_t BUF06I : 1;      /* Buffer MB6 Interrupt or FIFO Warning. If the FIFO is not ena .. */
                vuint32_t BUF05I : 1;      /* Buffer MB5 Interrupt or Frames available in FIFO.If the FIFO .. */
                vuint32_t BUF04I : 1;      /* Message buffer n interrupt or reserved. If the FIFO is not e .. */
                vuint32_t BUF03I : 1;      /* Message buffer n interrupt or reserved. If the FIFO is not e .. */
                vuint32_t BUF02I : 1;      /* Message buffer n interrupt or reserved. If the FIFO is not e .. */
                vuint32_t BUF01I : 1;      /* Message buffer n interrupt or reserved. If the FIFO is not e .. */
                vuint32_t BUF00I : 1;      /* Message buffer n interrupt or reserved. If the FIFO is not e .. */
            } B;
        } IFLAG1;      /* Interrupt flags 1 register */

        int8_t Reserved191[76];

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB0_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB0_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD0_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD0_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB1_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB1_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD1_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD1_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB2_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB2_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD2_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD2_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB3_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB3_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD3_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD3_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB4_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB4_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD4_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD4_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB5_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB5_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD5_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD5_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB6_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB6_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD6_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD6_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB7_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB7_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD7_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD7_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB8_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB8_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD8_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD8_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB9_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB9_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD9_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD9_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB10_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB10_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD10_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD10_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB11_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB11_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD11_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD11_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB12_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB12_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD12_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD12_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB13_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB13_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD13_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD13_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB14_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB14_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD14_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD14_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB15_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB15_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD15_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD15_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB16_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB16_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD16_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD16_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB17_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB17_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD17_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD17_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB18_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB18_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD18_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD18_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB19_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB19_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD19_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD19_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB20_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB20_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD20_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD20_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB21_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB21_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD21_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD21_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB22_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB22_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD22_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD22_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB23_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB23_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD23_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD23_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB24_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB24_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD24_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD24_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB25_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB25_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD25_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD25_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB26_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB26_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD26_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD26_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB27_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB27_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD27_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD27_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB28_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB28_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD28_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD28_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB29_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB29_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD29_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD29_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB30_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB30_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD30_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD30_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB31_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB31_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD31_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD31_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB32_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB32_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD32_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD32_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB33_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB33_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD33_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD33_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB34_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB34_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD34_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD34_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB35_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB35_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD35_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD35_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB36_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB36_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD36_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD36_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB37_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB37_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD37_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD37_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB38_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB38_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD38_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD38_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB39_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB39_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD39_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD39_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB40_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB40_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD40_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
            } B;
        } MD40_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB41_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB41_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD41_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD41_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB42_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB42_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD42_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD42_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB43_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB43_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD43_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD43_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB44_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB44_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD44_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD44_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB45_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB45_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD45_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD45_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB46_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB46_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD46_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD46_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB47_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB47_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD47_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD47_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB48_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB48_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD48_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD48_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB49_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB49_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD49_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD49_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB50_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB50_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD50_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD50_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB51_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB51_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD51_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD51_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB52_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB52_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD52_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD52_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB53_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB53_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD53_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD53_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB54_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB54_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD54_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD54_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB55_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB55_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD55_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD55_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB56_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB56_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD56_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD56_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB57_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB57_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD57_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD57_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB58_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB58_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD58_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD58_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB59_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB59_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD59_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
            } B;
        } MD59_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB60_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB60_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD60_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD60_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB61_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB61_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD61_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD61_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB62_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB62_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD62_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD62_DF47;      /* Data fields 4-7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t : 4;
                vuint32_t CODE : 4;      /* Message buffer code. This 4-bit field can be accessed (read  .. */
                vuint32_t : 1;
                vuint32_t SRR : 1;      /* Substitute remote request. Fixed recessive bit, used only in .. */
                vuint32_t IDE : 1;      /* ID Extended bit. This bit identifies whether the frame forma .. */
                vuint32_t RTR : 1;      /* Remote transmission request. This bit is used for requesting .. */
                vuint32_t LENGTH : 4;      /* Length of data in bytes. This 4-bit field is the length (in  .. */
                vuint32_t TIMESTAMP : 16;      /* Free-running counter time stamp. This 16-bit field is a copy .. */
            } B;
        } MB63_CS;      /* Control and Status (C/S) */

        union {
            vuint32_t R;
            struct {
                vuint32_t PRIO : 3;      /* Local priority. is only used when LPRIO_EN bit is set in MCR .. */
                vuint32_t ID_EXTENDED_STANDARD : 11;      /* Frame identifier. In standard frame format, only the 11 most .. */
                vuint32_t ID_EXTENDED : 18;      /* Frame identifier. In standard frame format, only the 11 most .. */
            } B;
        } MB63_IF;      /* Identifier Field */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE0 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE1 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE2 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE3 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD63_DF03;      /* Data fields 0-3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t DATABYTE4 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE5 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE6 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
                vuint32_t DATABYTE7 : 8;      /* Data field. Up to eight bytes can be used for a data frame.  .. */
            } B;
        } MD63_DF47;      /* Data fields 4-7 */

        int8_t Reserved192[1024];

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR0;      /* RX Individual Mask Register 0 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR1;      /* RX Individual Mask Register 1 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR2;      /* RX Individual Mask Register 2 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR3;      /* RX Individual Mask Register 3 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR4;      /* RX Individual Mask Register 4 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR5;      /* RX Individual Mask Register 5 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR6;      /* RX Individual Mask Register 6 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR7;      /* RX Individual Mask Register 7 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR8;      /* RX Individual Mask Register 8 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR9;      /* RX Individual Mask Register 9 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR10;      /* RX Individual Mask Register 10 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR11;      /* RX Individual Mask Register 11 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR12;      /* RX Individual Mask Register 12 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR13;      /* RX Individual Mask Register 13 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR14;      /* RX Individual Mask Register 14 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR15;      /* RX Individual Mask Register 15 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR16;      /* RX Individual Mask Register 16 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR17;      /* RX Individual Mask Register 17 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR18;      /* RX Individual Mask Register 18 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR19;      /* RX Individual Mask Register 19 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR20;      /* RX Individual Mask Register 20 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR21;      /* RX Individual Mask Register 21 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR22;      /* RX Individual Mask Register 22 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR23;      /* RX Individual Mask Register 23 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR24;      /* RX Individual Mask Register 24 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR25;      /* RX Individual Mask Register 25 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR26;      /* RX Individual Mask Register 26 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR27;      /* RX Individual Mask Register 27 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR28;      /* RX Individual Mask Register 28 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR29;      /* RX Individual Mask Register 29 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR30;      /* RX Individual Mask Register 30 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR31;      /* RX Individual Mask Register 31 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR32;      /* RX Individual Mask Register 32 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR33;      /* RX Individual Mask Register 33 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR34;      /* RX Individual Mask Register 34 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR35;      /* RX Individual Mask Register 35 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR36;      /* RX Individual Mask Register 36 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR37;      /* RX Individual Mask Register 37 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR38;      /* RX Individual Mask Register 38 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR39;      /* RX Individual Mask Register 39 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR40;      /* RX Individual Mask Register 40 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR41;      /* RX Individual Mask Register 41 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR42;      /* RX Individual Mask Register 42 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR43;      /* RX Individual Mask Register 43 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR44;      /* RX Individual Mask Register 44 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR45;      /* RX Individual Mask Register 45 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR46;      /* RX Individual Mask Register 46 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR47;      /* RX Individual Mask Register 47 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR48;      /* RX Individual Mask Register 48 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR49;      /* RX Individual Mask Register 49 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR50;      /* RX Individual Mask Register 50 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR51;      /* RX Individual Mask Register 51 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR52;      /* RX Individual Mask Register 52 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR53;      /* RX Individual Mask Register 53 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR54;      /* RX Individual Mask Register 54 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR55;      /* RX Individual Mask Register 55 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR56;      /* RX Individual Mask Register 56 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR57;      /* RX Individual Mask Register 57 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR58;      /* RX Individual Mask Register 58 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR59;      /* RX Individual Mask Register 59 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR60;      /* RX Individual Mask Register 60 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR61;      /* RX Individual Mask Register 61 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR62;      /* RX Individual Mask Register 62 */

        union {
            vuint32_t R;
            struct {
                vuint32_t MI31 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI30 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI29 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI28 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI27 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI26 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI25 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI24 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI23 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI22 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI21 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI20 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI19 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI18 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI17 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI16 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI15 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI14 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI13 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI12 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI11 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI10 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI9 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI8 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI7 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI6 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI5 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI4 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI3 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI2 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI1 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
                vuint32_t MI0 : 1;      /* Mask bits. For normal Rx MBs, the mask bits affect the ID fi .. */
            } B;
        } RXIMR63;      /* RX Individual Mask Register 63 */
    };                                             /* End of FLEXCAN_1_tag */ 
#define FLEXCAN_1  (*(volatile struct FLEXCAN_1_tag *)    0xFFFC4000UL)

/*---------------------------------------------------------------------------*/
/* DMA Channel Mux                                                           */
/*---------------------------------------------------------------------------*/
    struct DMA_MUX_tag {

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. Specifies which DMA source, if any, is r .. */
            } B;
        } CHCONFIG0;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG1;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG2;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG3;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG4;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG5;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG6;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG7;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG8;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG9;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG10;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG11;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG12;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG13;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG14;      /* Channel Configuration Registers */

        union {
            vuint8_t R;
            struct {
                vuint8_t ENBL : 1;      /* DMA Channel Enable. ENBL enables the DMA channel. */
                vuint8_t TRIG : 1;      /* DMA Channel Trigger Enable (channels 0-7 only). TRIG enables .. */
                vuint8_t SOURCE : 6;      /* DMA Channel Source. */
            } B;
        } CHCONFIG15;      /* Channel Configuration Registers */
    };                                             /* End of DMA_MUX_tag */ 
#define DMA_MUX  (*(volatile struct DMA_MUX_tag *)      0xFFFDC000UL)

/*---------------------------------------------------------------------------*/
/* FlexRay Communication Controller                                          */
/*---------------------------------------------------------------------------*/
    struct FLEXRAY_tag {

        union {
            vuint16_t R;
            struct {
                vuint16_t CHIVER : 8;      /* CHI Version Number.This field provides the version number of .. */
                vuint16_t PEVER : 8;      /* PE Version Number. This field provides the version number of .. */
            } B;
        } MVR;      /* Module Version Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MEN : 1;      /* Module Enable.This bit indicates whether or not the FlexRay  .. */
                vuint16_t SBFF : 1;      /* System Bus Failure Freeze - This bit controls the behavior o .. */
                vuint16_t SCM : 1;      /* Single Channel Device Mode. This control bit defines the cha .. */
                vuint16_t CHB : 1;      /* Channel Enable. protocol related parameter */
                vuint16_t CHA : 1;      /* Channel Enable. protocol related parameter */
                vuint16_t SFFE : 1;      /* Synchronization Frame Filter Enable. This bit controls the f .. */
                vuint16_t : 2;
                vuint16_t FUM : 1;      /* FIFO Update Mode - This bit controls the FIFO update behavio .. */
                vuint16_t FAM : 1;      /* FIFO Address Mode - This bit controls the location of the sy .. */
                vuint16_t : 1;
                vuint16_t CLKSEL : 1;      /* Protocol Engine Clock Source Select . This bit is used to se .. */
                vuint16_t BITRATE : 3;      /* FlexRay Bus Bit Rate. This bit field defines the bit rate of .. */
            } B;
        } MCR;      /* Module Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t SMBA : 16;      /* This is the value of the system memory base address for the  .. */
            } B;
        } SYMBADHR;      /* System Memory Base Address High Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t SMBA : 12;      /* This is the value of the system memory base address for the  .. */
            } B;
        } SYMBADLR;      /* System Memory Base Address Low Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t WMD : 1;      /* Write Mode. This control bit defines the write mode of this  .. */
                vuint16_t SEL : 7;      /* Strobe Signal Select. */
                vuint16_t : 3;
                vuint16_t ENB : 1;      /* Strobe Signal Enable. The control bit is used to enable and  .. */
                vuint16_t : 2;
                vuint16_t STBPSEL : 3;      /* Strobe Port Select. This field selects the strobe port that  .. */
            } B;
        } STBSCR;      /* Strobe Signal Control Register */

        int8_t Reserved193[2];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t MBSEG2DS : 7;      /* Message Buffer Segment 2 Data Size - The field defines the s .. */
                vuint16_t : 1;
                vuint16_t MBSEG1DS : 7;      /* Message Buffer Segment 1 Data Size - The field defines the s .. */
            } B;
        } MBDSR;      /* Module Version Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t LAST_MB_SEG1 : 7;      /* Last Message Buffer In Segment 1 - This field defines the me .. */
                vuint16_t : 1;
                vuint16_t LAST_MB_UTIL : 7;      /* Last Message Buffer Utilized - This field defines the messag .. */
            } B;
        } MBSSUTR;      /* Module Version Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t INST : 4;      /* PE DRAM Access Instruction - This field defines the operatio .. */
                vuint16_t ADDR : 11;      /* PE DRAM Access Address - This field defines the address in t .. */
                vuint16_t DAD : 1;      /* PE DRAM Access Done - This status bit is cleared when the ap .. */
            } B;
        } PEDRAR;      /* PE DRAM Access Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DATA : 16;      /* This register provides the data to be written to or read fro .. */
            } B;
        } PEDRDR;      /* PE DRAM Data Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t WME : 1;      /* Write Mode External Correction. This bit controls the write  .. */
                vuint16_t : 3;
                vuint16_t EOC_AP : 2;      /* External Offset Correction Application. This field is used t .. */
                vuint16_t ERC_AP : 2;      /* External Rate Correction Application. This field is used to  .. */
                vuint16_t BSY : 1;      /* Protocol Control Command Write Busy. This status bit indicat .. */
                vuint16_t : 3;
                vuint16_t POCCMD : 4;      /* Protocol Control Command. The application writes to this fie .. */
            } B;
        } POCR;      /* Protocol Operation Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MIF : 1;      /* Module Interrupt Flag. This flag is set if at least one of t .. */
                vuint16_t PRIF : 1;      /* Protocol Interrupt Flag. This flag is set if at least one of .. */
                vuint16_t CHIF : 1;      /* CHI Interrupt Flag. This flag is set if at least one of the  .. */
                vuint16_t WUPIF : 1;      /* Wakeup Interrupt Flag. This flag is set when the FlexRay blo .. */
                vuint16_t FAFBIF : 1;      /* Receive FIFO channel B Almost Full Interrupt Flag. This flag .. */
                vuint16_t FAFAIF : 1;      /* Receive FIFO channel A Almost Full Interrupt Flag. This flag .. */
                vuint16_t RBIF : 1;      /* Receive Message Buffer Interrupt Flag. This flag is set if f .. */
                vuint16_t TBIF : 1;      /* Transmit Buffer Interrupt Flag. This flag is set if for at l .. */
                vuint16_t MIE : 1;      /* Module Interrupt Enable. This flag controls if the module in .. */
                vuint16_t PRIE : 1;      /* Protocol Interrupt Enable. This flag controls if the protoco .. */
                vuint16_t CHIE : 1;      /* CHI Interrupt Enable. This flag controls if the CHI interrup .. */
                vuint16_t WUPIE : 1;      /* Wakeup Interrupt Enable. This flag controls if the wakeup in .. */
                vuint16_t FAFBIE : 1;      /* Receive FIFO Channel B Almost Full Interrupt Enable. This fl .. */
                vuint16_t FAFAIE : 1;      /* Receive FIFO Channel A Almost Full Interrupt Enable. This fl .. */
                vuint16_t RBIE : 1;      /* Receive Buffer Interrupt Enable.This flag controls if the re .. */
                vuint16_t TBIE : 1;      /* Transmit Interrupt Enable. This flag controls if the transmi .. */
            } B;
        } GIFER;      /* Global Interrupt Flag and Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t FATL_IF : 1;      /* Fatal Protocol Error Interrupt Flag. This flag is set when t .. */
                vuint16_t INTL_IF : 1;      /* Internal Protocol Error Interrupt Flag. This flag is set whe .. */
                vuint16_t ILCF_IF : 1;      /* Illegal Protocol Configuration Interrupt Flag. This flag is  .. */
                vuint16_t CSA_IF : 1;      /* Cold Start Abort Interrupt Flag. This flag is set when the c .. */
                vuint16_t MRC_IF : 1;      /* Missing Rate Correction Interrupt Flag. This flag is set whe .. */
                vuint16_t MOC_IF : 1;      /* Missing Offset Correction Interrupt Flag. This flag is set w .. */
                vuint16_t CCL_IF : 1;      /* Clock Correction Limit Reached Interrupt Flag. This flag is  .. */
                vuint16_t MXS_IF : 1;      /* Max Sync Frames Detected Interrupt Flag. This flag is set wh .. */
                vuint16_t MTX_IF : 1;      /* Media Access Test Symbol Received Interrupt Flag. This flag  .. */
                vuint16_t LTXB_IF : 1;      /* pLatestTx Violation on Channel B Interrupt Flag. This flag i .. */
                vuint16_t LTXA_IF : 1;      /* pLatestTx Violation on Channel A Interrupt Flag. This flag i .. */
                vuint16_t TBVB_IF : 1;      /* Transmission Across Boundary on Channel B Interrupt Flag. Th .. */
                vuint16_t TBVA_IF : 1;      /* Transmission across boundary on channel A Interrupt Flag. Th .. */
                vuint16_t TI2_IF : 1;      /* Timer 2 Expired Interrupt Flag. This flag is set whenever ti .. */
                vuint16_t TI1_IF : 1;      /* Timer 1 Expired Interrupt Flag. This flag is set whenever ti .. */
                vuint16_t CYS_IF : 1;      /* Cycle Start Interrupt Flag. This flag is set when a communic .. */
            } B;
        } PIFR0;      /* Protocol Interrupt Flag Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t EMC_IF : 1;      /* Error Mode Changed Interrupt Flag. This flag is set when the .. */
                vuint16_t IPC_IF : 1;      /* Illegal Protocol Control Command Interrupt Flag. This flag i .. */
                vuint16_t PECF_IF : 1;      /* Protocol Engine Communication Failure Interrupt Flag. This f .. */
                vuint16_t PSC_IF : 1;      /* Protocol State Changed Interrupt Flag. This flag is set when .. */
                vuint16_t SSI3_IF : 1;      /* Slot Status Counter Incremented Interrupt Flag. Each of thes .. */
                vuint16_t SSI2_IF : 1;      /* Slot Status Counter Incremented Interrupt Flag. Each of thes .. */
                vuint16_t SSI1_IF : 1;      /* Slot Status Counter Incremented Interrupt Flag. Each of thes .. */
                vuint16_t SSI0_IF : 1;      /* Slot Status Counter Incremented Interrupt Flag. Each of thes .. */
                vuint16_t : 2;
                vuint16_t EVT_IF : 1;      /* Even Cycle Table Written Interrupt Flag. This flag is set if .. */
                vuint16_t ODT_IF : 1;      /* Odd Cycle Table Written Interrupt Flag. This flag is set if  .. */
            } B;
        } PIFR1;      /* Protocol Interrupt Flag Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t FATL_IE : 1;      /* Fatal Protocol Error Interrupt Enable. This bit controls FAT .. */
                vuint16_t INTL_IE : 1;      /* Internal Protocol Error Interrupt Enable. This bit controls  .. */
                vuint16_t ILCF_IE : 1;      /* Illegal Protocol Configuration Interrupt Enable. This bit co .. */
                vuint16_t CSA_IE : 1;      /* Cold Start Abort Interrupt Enable. This bit controls CSA_IF  .. */
                vuint16_t MRC_IE : 1;      /* Missing Rate Correction Interrupt Enable. This bit controls  .. */
                vuint16_t MOC_IE : 1;      /* Missing Offset Correction Interrupt Enable. This bit control .. */
                vuint16_t CCL_IE : 1;      /* Clock Correction Limit Reached Interrupt Enable. This bit co .. */
                vuint16_t MXS_IE : 1;      /* Max Sync Frames Detected Interrupt Enable. This bit controls .. */
                vuint16_t MTX_IE : 1;      /* Media Access Test Symbol Received Interrupt Enable. This bit .. */
                vuint16_t LTXB_IE : 1;      /* pLatestTx Violation on Channel B Interrupt Enable. This bit  .. */
                vuint16_t LTXA_IE : 1;      /* pLatestTx Violation on Channel A Interrupt Enable. This bit  .. */
                vuint16_t TBVB_IE : 1;      /* Transmission across boundary on channel B Interrupt Enable.  .. */
                vuint16_t TBVA_IE : 1;      /* Transmission across boundary on channel A Interrupt Enable.  .. */
                vuint16_t TI2_IE : 1;      /* Timer 2 Expired Interrupt Enable. This bit controls TI1_IF i .. */
                vuint16_t TI1_IE : 1;      /* Timer */
                vuint16_t CYS_IE : 1;      /* Cycle Start Interrupt Enable. This bit controls CYC_IF inter .. */
            } B;
        } PIER0;      /* Protocol Interrupt Enable Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t EMC_IE : 1;      /* Error Mode Changed Interrupt Enable. This bit controls EMC_I .. */
                vuint16_t IPC_IE : 1;      /* Illegal Protocol Control Command Interrupt Enable. This bit  .. */
                vuint16_t PECF_IE : 1;      /* Protocol Engine Communication Failure Interrupt Enable. This .. */
                vuint16_t PSC_IE : 1;      /* Protocol State Changed Interrupt Enable. This bit controls P .. */
                vuint16_t SSI3_IE : 1;      /* Slot Status Counter Incremented Interrupt Enable. This bit c .. */
                vuint16_t SSI2_IE : 1;      /* Slot Status Counter Incremented Interrupt Enable. This bit c .. */
                vuint16_t SSI1_IE : 1;      /* Slot Status Counter Incremented Interrupt Enable. This bit c .. */
                vuint16_t SSI0_IE : 1;      /* Slot Status Counter Incremented Interrupt Enable. This bit c .. */
                vuint16_t : 2;
                vuint16_t EVT_IE : 1;      /* Even Cycle Table Written Interrupt Enable. This bit controls .. */
                vuint16_t ODT_IE : 1;      /* Odd Cycle Table Written Interrupt Enable. This bit controls  .. */
            } B;
        } PIER1;      /* Protocol Interrupt Enable Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t FRLB_EF : 1;      /* Frame Lost Channel B Error Flag. This flag is set if a compl .. */
                vuint16_t FRLA_EF : 1;      /* Frame Lost Channel A Error Flag. This flag is set if a compl .. */
                vuint16_t PCMI_EF : 1;      /* Protocol Command Ignored Error Flag. This flag is set if the .. */
                vuint16_t FOVB_EF : 1;      /* Receive FIFO Overrun Channel B Error Flag. This flag is set  .. */
                vuint16_t FOVA_EF : 1;      /* Receive FIFO Overrun Channel A Error Flag. This flag is set  .. */
                vuint16_t MBS_EF : 1;      /* Message Buffer Search Error Flag. This flag is set if the me .. */
                vuint16_t MBU_EF : 1;      /* Message Buffer Utilization Error Flag. This flag is asserted .. */
                vuint16_t LCK_EF : 1;      /* Lock Error Flag. This flag is set if the application tries t .. */
                vuint16_t DBL_EF : 1;      /* Double Transmit Message Buffer Lock Error Flag. This flag is .. */
                vuint16_t SBCF_EF : 1;      /* System Bus Communication Failure Error Flag. This flag is se .. */
                vuint16_t FID_EF : 1;      /* Frame ID Error Flag. This flag is set if the frame ID stored .. */
                vuint16_t DPL_EF : 1;      /* Dynamic Payload Length Error Flag. This flag is set if the p .. */
                vuint16_t SPL_EF : 1;      /* Static Payload Length Error Flag. This flag is set if the pa .. */
                vuint16_t NML_EF : 1;      /* Network Management Length Error Flag. This flag is set if th .. */
                vuint16_t NMF_EF : 1;      /* Network Management Frame Error Flag. This flag is set if a r .. */
                vuint16_t ILSA_EF : 1;      /* Illegal System Memory Access Error Flag. This flag is set if .. */
            } B;
        } CHIERFR;      /* CHI Error Flag Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t TBIVEC : 7;      /* Transmit Buffer Interrupt Vector. This field provides the nu .. */
                vuint16_t : 1;
                vuint16_t RBIVEC : 7;      /* Receive Buffer Interrupt Vector. This field provides the mes .. */
            } B;
        } MBIVEC;      /* Message Buffer Interrupt Vector Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t STATUS_ERR_CNT : 16;      /* Channel Status Error Counter. This field provides the curren .. */
            } B;
        } CASERCR;      /* Channel A Status Error Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t STATUS_ERR_CNT : 16;      /* Channel Status Error Counter. This field provides the curren .. */
            } B;
        } CBSERCR;      /* Channel B Status Error Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ERRMODE : 2;      /* Error Mode. Protocol related variable: */
                vuint16_t SLOTMODE : 2;      /* Slot Mode. Protocol related variable: */
                vuint16_t : 1;
                vuint16_t PROTSTATE : 3;      /* Protocol State. Protocol related variable: */
                vuint16_t STARTUPSTATE : 4;      /* Startup State. Protocol related variable: */
                vuint16_t : 1;
                vuint16_t WAKEUPSTATUS : 3;      /* Wakeup Status. Protocol related variable: */
            } B;
        } PSR0;      /* Protocol Status Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t CSAA : 1;      /* Cold Start Attempt Aborted Flag. Protocol related event: */
                vuint16_t CSP : 1;      /* Leading Cold Start Path. This status bit is set when the Fle .. */
                vuint16_t : 2;
                vuint16_t REMCSAT : 4;      /* Remaining Cold Start Attempts. Protocol related variable: vR .. */
                vuint16_t CPN : 1;      /* Leading Cold Start Path Noise. Protocol related variable: */
                vuint16_t HHR : 1;      /* Host Halt Request Pending. Protocol related variable: */
                vuint16_t FRZ : 1;      /* Freeze Occurred. Protocol related variable: */
                vuint16_t APTAC : 5;      /* Allow Passive to Active Counter. Protocol related variable: */
            } B;
        } PSR1;      /* Protocol Status Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t NBVB : 1;      /* NIT Boundary Violation on Channel B - protocol related varia .. */
                vuint16_t NSEB : 1;      /* NIT Syntax Error on Channel B - protocol related variable: v .. */
                vuint16_t STCB : 1;      /* Symbol Window Transmit Conflict on Channel B - protocol rela .. */
                vuint16_t SBVB : 1;      /* Symbol Window Boundary Violation on Channel B - protocol rel .. */
                vuint16_t SSEB : 1;      /* Symbol Window Syntax Error on Channel B - protocol related v .. */
                vuint16_t MTB : 1;      /* Media Access Test Symbol MTS Received on Channel B - protoco .. */
                vuint16_t NBVA : 1;      /* NIT Boundary Violation on Channel A - protocol related varia .. */
                vuint16_t NSEA : 1;      /* NIT Syntax Error on Channel A - protocol related variable: v .. */
                vuint16_t STCA : 1;      /* Symbol Window Transmit Conflict on Channel A - protocol rela .. */
                vuint16_t SBVA : 1;      /* Symbol Window Boundary Violation on Channel A - protocol rel .. */
                vuint16_t SSEA : 1;      /* Symbol Window Syntax Error on Channel A - protocol related v .. */
                vuint16_t MTA : 1;      /* Media Access Test Symbol MTS Received on Channel A - protoco .. */
                vuint16_t CLKCORRFAILCNT : 4;      /* Clock Correction Failed Counter - protocol related variable: .. */
            } B;
        } PSR2;      /* Protocol Status Register 2 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t WUB : 1;      /* Wakeup Symbol Received on Channel B. This flag is set when a .. */
                vuint16_t ABVB : 1;      /* Aggregated Boundary Violation on Channel B. This flag is set .. */
                vuint16_t AACB : 1;      /* Aggregated Additional Communication on Channel B. This flag  .. */
                vuint16_t ACEB : 1;      /* Aggregated Content Error on Channel B. This flag is set when .. */
                vuint16_t ASEB : 1;      /* Aggregated Syntax Error on Channel B. This flag is set when  .. */
                vuint16_t AVFB : 1;      /* Aggregated Valid Frame on Channel B. This flag is set when a .. */
                vuint16_t : 2;
                vuint16_t WUA : 1;      /* Wakeup Symbol Received on Channel A. This flag is set when a .. */
                vuint16_t ABVA : 1;      /* Aggregated Boundary Violation on Channel A. This flag is set .. */
                vuint16_t AACA : 1;      /* Aggregated Additional Communication on Channel A. This flag  .. */
                vuint16_t ACEA : 1;      /* Aggregated Content Error on Channel A. This flag is set when .. */
                vuint16_t ASEA : 1;      /* Aggregated Syntax Error on Channel A. This flag is set when  .. */
                vuint16_t AVFA : 1;      /* Aggregated Valid Frame on Channel A. This flag is set when a .. */
            } B;
        } PSR3;      /* Protocol Status Register 3 */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t MTCT : 14;      /* Macrotick Counter. Protocol related variable: vMacrotick Thi .. */
            } B;
        } MTCTR;      /* Macrotick Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 10;
                vuint16_t CYCCNT : 6;      /* Cycle Counter. Protocol related variable: vCycleCounter This .. */
            } B;
        } CYCTR;      /* Cycle Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t SLOTCNTA : 11;      /* Slot Counter Value for Channel A. Protocol related variable: .. */
            } B;
        } SLTCTAR;      /* Slot Counter Channel A Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t SLOTCNTA : 11;      /* Slot Counter Value for Channel B. Protocol related variable: .. */
            } B;
        } SLTCTBR;      /* Slot Counter Channel B Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t RATECORR : 16;      /* Rate Correction Value - protocol related variable: vRateCorr .. */
            } B;
        } RTCORVR;      /* Rate Correction Value Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t OFFSETCORR : 16;      /* Offset Correction Value - protocol related variable: vOffset .. */
            } B;
        } OFCORVR;      /* Offset Correction Value Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 8;
                vuint16_t MIF : 1;      /* Module Interrupt Flag. This flag is set if there is at least .. */
                vuint16_t PRIF : 1;      /* Protocol Interrupt Flag. This flag is set if at least one of .. */
                vuint16_t CHIF : 1;      /* CHI Interrupt Flag. This flag is set if at least one of the  .. */
                vuint16_t WUPIF : 1;      /* Wakeup Interrupt Flag. Provides the same value as GIFER[WUPI .. */
                vuint16_t FAFBIF : 1;      /* Receive FIFO Channel B Almost Full Interrupt Flag. Provides  .. */
                vuint16_t FAFAIF : 1;      /* Receive FIFO Channel A Almost Full Interrupt Flag. Provides  .. */
                vuint16_t RBIF : 1;      /* Receive Message Buffer Interrupt Flag. This flag is set if f .. */
                vuint16_t TBIF : 1;      /* Transmit Message Buffer Interrupt Flag. This flag is set if  .. */
            } B;
        } CIFRR;      /* Combined Interrupt Flag Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 8;
                vuint16_t TIMEOUT : 8;      /* Time Out. This value defines the maximum number of wait stat .. */
            } B;
        } SYMATOR;      /* System Memory Access Time-Out Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t SFEVB : 4;      /* Sync Frames Channel B, Even Cycle. Protocol related variable .. */
                vuint16_t SFEVA : 4;      /* Sync Frames Channel A, Even Cycle. Protocol related variable .. */
                vuint16_t SFODB : 4;      /* Sync Frames Channel B, Odd Cycle. Protocol related variable: .. */
                vuint16_t SFODA : 4;      /* Sync Frames Channel A, Odd Cycle. Protocol related variable: .. */
            } B;
        } SFCNTR;      /* Sync Frame Counter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t SFTOR : 15;      /* Sync Frame Table Offset. The offset of the Sync Frame Tables .. */
            } B;
        } SFTOR;      /* Sync Frame Table Offset Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ELKT : 1;      /* Even Cycle Tables Lock/Unlock Trigger. This trigger bit is u .. */
                vuint16_t OLKT : 1;      /* Odd Cycle Tables Lock/Unlock Trigger. This trigger bit is us .. */
                vuint16_t CYCNUM : 6;      /* Cycle Number. This field provides the number of the cycle in .. */
                vuint16_t ELKS : 1;      /* Even Cycle Tables Lock Status. This status bit indicates whe .. */
                vuint16_t OLKS : 1;      /* Odd Cycle Tables Lock Status. This status bit indicates whet .. */
                vuint16_t EVAL : 1;      /* Even Cycle Tables Valid. This status bit indicates whether t .. */
                vuint16_t OVAL : 1;      /* Odd Cycle Tables Valid.This status bit indicates whether the .. */
                vuint16_t : 1;
                vuint16_t OPT : 1;      /* One Pair Trigger. This trigger bit controls whether the Flex .. */
                vuint16_t SDVEN : 1;      /* Sync Frame Deviation Table Enable. This bit controls the gen .. */
                vuint16_t SIDEN : 1;      /* Sync Frame ID Table Enable. This bit controls the generation .. */
            } B;
        } SFTCCSR;      /* Sync Frame Table Configuration, Control, Status Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t SYNFRID : 10;      /* Sync Frame Rejection ID. This field defines the frame ID of  .. */
            } B;
        } SFIDRFR;      /* Sync Frame ID Rejection Filter Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t FVAL : 10;      /* Filter Value. This field defines the value for the sync fram .. */
            } B;
        } SFIDAFVR;      /* Sync Frame ID Acceptance Filter Value Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t FMSK : 10;      /* Filter Mask. This field defines the mask for the sync frame  .. */
            } B;
        } SFIDAFMR;      /* Sync Frame ID Acceptance Filter Mask Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t NMVP_15_8 : 8;      /* Network Management Vector Part. */
                vuint16_t NMVP_7_0 : 8;      /* Network Management Vector Part. */
            } B;
        } NMVR0;      /* Network Management Vector Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t NMVP_15_8 : 8;      /* Network Management Vector Part. */
                vuint16_t NMVP_7_0 : 8;      /* Network Management Vector Part. */
            } B;
        } NMVR1;      /* Network Management Vector Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t NMVP_15_8 : 8;      /* Network Management Vector Part. */
                vuint16_t NMVP_7_0 : 8;      /* Network Management Vector Part. */
            } B;
        } NMVR2;      /* Network Management Vector Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t NMVP_15_8 : 8;      /* Network Management Vector Part. */
                vuint16_t NMVP_7_0 : 8;      /* Network Management Vector Part. */
            } B;
        } NMVR3;      /* Network Management Vector Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t NMVP_15_8 : 8;      /* Network Management Vector Part. */
                vuint16_t NMVP_7_0 : 8;      /* Network Management Vector Part. */
            } B;
        } NMVR4;      /* Network Management Vector Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t NMVP_15_8 : 8;      /* Network Management Vector Part. */
                vuint16_t NMVP_7_0 : 8;      /* Network Management Vector Part. */
            } B;
        } NMVR5;      /* Network Management Vector Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t NMVL : 4;      /* Network Management Vector Length. protocol related variable: .. */
            } B;
        } NMVLR;      /* Network Management Vector Length Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t T2_CFG : 1;      /* Timer T2 Configuration. This bit configures the timebase mod .. */
                vuint16_t T2_REP : 1;      /* Timer T2 Repetitive Mode. This bit configures the repetition .. */
                vuint16_t : 1;
                vuint16_t T2SP : 1;      /* Timer T2 Stop. This trigger bit is used to stop timer T2. */
                vuint16_t T2TR : 1;      /* Timer T2 Trigger. This trigger bit is used to start timer T2 .. */
                vuint16_t T2ST : 1;      /* Timer T2 State. This status bit provides the current state o .. */
                vuint16_t : 3;
                vuint16_t T1_REP : 1;      /* Timer T1 Repetitive Mode. This bit configures the repetition .. */
                vuint16_t : 1;
                vuint16_t T1SP : 1;      /* Timer T1 Stop. This trigger bit is used to stop timer T1. */
                vuint16_t T1TR : 1;      /* Timer T1 Trigger. This trigger bit is used to start timer T1 .. */
                vuint16_t T1ST : 1;      /* Timer T1 State. This status bit provides the current state o .. */
            } B;
        } TICCR;      /* Timer Configuration and Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t T1_CYC_VAL : 6;      /* Timer T1 Cycle Filter Value. This field defines the cycle fi .. */
                vuint16_t : 2;
                vuint16_t T1_CYC_MSK : 6;      /* Timer T1 Cycle Filter Mask. This field defines the cycle fil .. */
            } B;
        } TI1CYSR;      /* Timer 1 Cycle Set Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t T1_MTOFFSET : 14;      /* Timer 1 Macrotick Offset. This field defines the macrotick o .. */
            } B;
        } TI1MTOR;      /* Timer 1 Macrotick Offset Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t T2_MTCNT_31_16 : 16;      /* Timer T2 Macrotick High Word. This field defines the high wo .. */
            } B;
        } TI2CR0;      /* Timer 2 Configuration Register 0 */

        union {
            vuint16_t R;
            struct {
                vuint16_t T2_MTCNT_15_0 : 16;      /* Timer T2 Macrotick Low Word. This field defines the high wor .. */
            } B;
        } TI2CR1;      /* Timer 2 Configuration Register 1 */

        union {
            vuint16_t R;
            struct {
                vuint16_t WMD : 1;      /* Write Mode. This control bit defines the write mode of this  .. */
                vuint16_t : 1;
                vuint16_t SEL : 2;      /* Selector. This field selects one of the four internal slot s .. */
                vuint16_t : 1;
                vuint16_t SLOTNUMBER : 11;      /* Slot Number. This field specifies the number of the slot who .. */
            } B;
        } SSSR;      /* Slot Status Selection Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t WMD : 1;      /* Write Mode. This control bit defines the write mode of this  .. */
                vuint16_t : 1;
                vuint16_t SEL : 2;      /* Selector. This field selects one of the four internal slot c .. */
                vuint16_t : 1;
                vuint16_t CNTCFG : 2;      /* Counter Configuration. These bit field controls the channel  .. */
                vuint16_t MCY : 1;      /* Multi Cycle Selection. This bit defines whether the slot sta .. */
                vuint16_t VFR : 1;      /* Valid Frame Restriction. This bit is used to restrict the co .. */
                vuint16_t SYF : 1;      /* Sync Frame Restriction. This bit is used to restrict the cou .. */
                vuint16_t NUF : 1;      /* Null Frame Restriction. This bit is used to restrict the cou .. */
                vuint16_t SUF : 1;      /* Startup Frame Restriction. This bit is used to restrict the  .. */
                vuint16_t STATUSMASK3 : 1;      /* This bit enables the counting for slots with the syntax erro .. */
                vuint16_t STATUSMASK2 : 1;      /* This bit enables the counting for slots with the content err .. */
                vuint16_t STATUSMASK1 : 1;      /* This bit enables the counting for slots with the boundary vi .. */
                vuint16_t STATUSMASK0 : 1;      /* This bit enables the counting for slots with the transmissio .. */
            } B;
        } SSCCR;      /* Slot Status Counter Condition Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t VFB : 1;      /* Valid Frame on Channel B. Protocol related variable: */
                vuint16_t SYB : 1;      /* Sync Frame Indicator Channel B. Protocol related variable: */
                vuint16_t NFB : 1;      /* Null Frame Indicator Channel B. Protocol related variable: */
                vuint16_t SUB : 1;      /* Startup Frame Indicator Channel B. Protocol related variable .. */
                vuint16_t SEB : 1;      /* Syntax Error on Channel B. Protocol related variable: */
                vuint16_t CEB : 1;      /* Content Error on Channel B. Protocol related variable: */
                vuint16_t BVB : 1;      /* Boundary Violation on Channel B. Protocol related variable: */
                vuint16_t TCB : 1;      /* Transmission Conflict on Channel B. Protocol related variabl .. */
                vuint16_t VFA : 1;      /* Valid Frame on Channel A. Protocol related variable: */
                vuint16_t SYA : 1;      /* Sync Frame Indicator Channel A. Protocol related variable: */
                vuint16_t NFA : 1;      /* Null Frame Indicator Channel A. Protocol related variable: */
                vuint16_t SUA : 1;      /* Startup Frame Indicator Channel A. Protocol related variable .. */
                vuint16_t SEA : 1;      /* Syntax Error on Channel A. Protocol related variable: */
                vuint16_t CEA : 1;      /* Content Error on Channel A. Protocol related variable: */
                vuint16_t BVA : 1;      /* Boundary Violation on Channel A. Protocol related variable: */
                vuint16_t TCA : 1;      /* Transmission Conflict on Channel A. Protocol related variabl .. */
            } B;
        } SSR0;      /* Slot Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t VFB : 1;      /* Valid Frame on Channel B. Protocol related variable: */
                vuint16_t SYB : 1;      /* Sync Frame Indicator Channel B. Protocol related variable: */
                vuint16_t NFB : 1;      /* Null Frame Indicator Channel B. Protocol related variable: */
                vuint16_t SUB : 1;      /* Startup Frame Indicator Channel B. Protocol related variable .. */
                vuint16_t SEB : 1;      /* Syntax Error on Channel B. Protocol related variable: */
                vuint16_t CEB : 1;      /* Content Error on Channel B. Protocol related variable: */
                vuint16_t BVB : 1;      /* Boundary Violation on Channel B. Protocol related variable: */
                vuint16_t TCB : 1;      /* Transmission Conflict on Channel B. Protocol related variabl .. */
                vuint16_t VFA : 1;      /* Valid Frame on Channel A. Protocol related variable: */
                vuint16_t SYA : 1;      /* Sync Frame Indicator Channel A. Protocol related variable: */
                vuint16_t NFA : 1;      /* Null Frame Indicator Channel A. Protocol related variable: */
                vuint16_t SUA : 1;      /* Startup Frame Indicator Channel A. Protocol related variable .. */
                vuint16_t SEA : 1;      /* Syntax Error on Channel A. Protocol related variable: */
                vuint16_t CEA : 1;      /* Content Error on Channel A. Protocol related variable: */
                vuint16_t BVA : 1;      /* Boundary Violation on Channel A. Protocol related variable: */
                vuint16_t TCA : 1;      /* Transmission Conflict on Channel A. Protocol related variabl .. */
            } B;
        } SSR1;      /* Slot Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t VFB : 1;      /* Valid Frame on Channel B. Protocol related variable: */
                vuint16_t SYB : 1;      /* Sync Frame Indicator Channel B. Protocol related variable: */
                vuint16_t NFB : 1;      /* Null Frame Indicator Channel B. Protocol related variable: */
                vuint16_t SUB : 1;      /* Startup Frame Indicator Channel B. Protocol related variable .. */
                vuint16_t SEB : 1;      /* Syntax Error on Channel B. Protocol related variable: */
                vuint16_t CEB : 1;      /* Content Error on Channel B. Protocol related variable: */
                vuint16_t BVB : 1;      /* Boundary Violation on Channel B. Protocol related variable: */
                vuint16_t TCB : 1;      /* Transmission Conflict on Channel B. Protocol related variabl .. */
                vuint16_t VFA : 1;      /* Valid Frame on Channel A. Protocol related variable: */
                vuint16_t SYA : 1;      /* Sync Frame Indicator Channel A. Protocol related variable: */
                vuint16_t NFA : 1;      /* Null Frame Indicator Channel A. Protocol related variable: */
                vuint16_t SUA : 1;      /* Startup Frame Indicator Channel A. Protocol related variable .. */
                vuint16_t SEA : 1;      /* Syntax Error on Channel A. Protocol related variable: */
                vuint16_t CEA : 1;      /* Content Error on Channel A. Protocol related variable: */
                vuint16_t BVA : 1;      /* Boundary Violation on Channel A. Protocol related variable: */
                vuint16_t TCA : 1;      /* Transmission Conflict on Channel A. Protocol related variabl .. */
            } B;
        } SSR2;      /* Slot Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t VFB : 1;      /* Valid Frame on Channel B. Protocol related variable: */
                vuint16_t SYB : 1;      /* Sync Frame Indicator Channel B. Protocol related variable: */
                vuint16_t NFB : 1;      /* Null Frame Indicator Channel B. Protocol related variable: */
                vuint16_t SUB : 1;      /* Startup Frame Indicator Channel B. Protocol related variable .. */
                vuint16_t SEB : 1;      /* Syntax Error on Channel B. Protocol related variable: */
                vuint16_t CEB : 1;      /* Content Error on Channel B. Protocol related variable: */
                vuint16_t BVB : 1;      /* Boundary Violation on Channel B. Protocol related variable: */
                vuint16_t TCB : 1;      /* Transmission Conflict on Channel B. Protocol related variabl .. */
                vuint16_t VFA : 1;      /* Valid Frame on Channel A. Protocol related variable: */
                vuint16_t SYA : 1;      /* Sync Frame Indicator Channel A. Protocol related variable: */
                vuint16_t NFA : 1;      /* Null Frame Indicator Channel A. Protocol related variable: */
                vuint16_t SUA : 1;      /* Startup Frame Indicator Channel A. Protocol related variable .. */
                vuint16_t SEA : 1;      /* Syntax Error on Channel A. Protocol related variable: */
                vuint16_t CEA : 1;      /* Content Error on Channel A. Protocol related variable: */
                vuint16_t BVA : 1;      /* Boundary Violation on Channel A. Protocol related variable: */
                vuint16_t TCA : 1;      /* Transmission Conflict on Channel A. Protocol related variabl .. */
            } B;
        } SSR3;      /* Slot Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t VFB : 1;      /* Valid Frame on Channel B. Protocol related variable: */
                vuint16_t SYB : 1;      /* Sync Frame Indicator Channel B. Protocol related variable: */
                vuint16_t NFB : 1;      /* Null Frame Indicator Channel B. Protocol related variable: */
                vuint16_t SUB : 1;      /* Startup Frame Indicator Channel B. Protocol related variable .. */
                vuint16_t SEB : 1;      /* Syntax Error on Channel B. Protocol related variable: */
                vuint16_t CEB : 1;      /* Content Error on Channel B. Protocol related variable: */
                vuint16_t BVB : 1;      /* Boundary Violation on Channel B. Protocol related variable: */
                vuint16_t TCB : 1;      /* Transmission Conflict on Channel B. Protocol related variabl .. */
                vuint16_t VFA : 1;      /* Valid Frame on Channel A. Protocol related variable: */
                vuint16_t SYA : 1;      /* Sync Frame Indicator Channel A. Protocol related variable: */
                vuint16_t NFA : 1;      /* Null Frame Indicator Channel A. Protocol related variable: */
                vuint16_t SUA : 1;      /* Startup Frame Indicator Channel A. Protocol related variable .. */
                vuint16_t SEA : 1;      /* Syntax Error on Channel A. Protocol related variable: */
                vuint16_t CEA : 1;      /* Content Error on Channel A. Protocol related variable: */
                vuint16_t BVA : 1;      /* Boundary Violation on Channel A. Protocol related variable: */
                vuint16_t TCA : 1;      /* Transmission Conflict on Channel A. Protocol related variabl .. */
            } B;
        } SSR4;      /* Slot Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t VFB : 1;      /* Valid Frame on Channel B. Protocol related variable: */
                vuint16_t SYB : 1;      /* Sync Frame Indicator Channel B. Protocol related variable: */
                vuint16_t NFB : 1;      /* Null Frame Indicator Channel B. Protocol related variable: */
                vuint16_t SUB : 1;      /* Startup Frame Indicator Channel B. Protocol related variable .. */
                vuint16_t SEB : 1;      /* Syntax Error on Channel B. Protocol related variable: */
                vuint16_t CEB : 1;      /* Content Error on Channel B. Protocol related variable: */
                vuint16_t BVB : 1;      /* Boundary Violation on Channel B. Protocol related variable: */
                vuint16_t TCB : 1;      /* Transmission Conflict on Channel B. Protocol related variabl .. */
                vuint16_t VFA : 1;      /* Valid Frame on Channel A. Protocol related variable: */
                vuint16_t SYA : 1;      /* Sync Frame Indicator Channel A. Protocol related variable: */
                vuint16_t NFA : 1;      /* Null Frame Indicator Channel A. Protocol related variable: */
                vuint16_t SUA : 1;      /* Startup Frame Indicator Channel A. Protocol related variable .. */
                vuint16_t SEA : 1;      /* Syntax Error on Channel A. Protocol related variable: */
                vuint16_t CEA : 1;      /* Content Error on Channel A. Protocol related variable: */
                vuint16_t BVA : 1;      /* Boundary Violation on Channel A. Protocol related variable: */
                vuint16_t TCA : 1;      /* Transmission Conflict on Channel A. Protocol related variabl .. */
            } B;
        } SSR5;      /* Slot Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t VFB : 1;      /* Valid Frame on Channel B. Protocol related variable: */
                vuint16_t SYB : 1;      /* Sync Frame Indicator Channel B. Protocol related variable: */
                vuint16_t NFB : 1;      /* Null Frame Indicator Channel B. Protocol related variable: */
                vuint16_t SUB : 1;      /* Startup Frame Indicator Channel B. Protocol related variable .. */
                vuint16_t SEB : 1;      /* Syntax Error on Channel B. Protocol related variable: */
                vuint16_t CEB : 1;      /* Content Error on Channel B. Protocol related variable: */
                vuint16_t BVB : 1;      /* Boundary Violation on Channel B. Protocol related variable: */
                vuint16_t TCB : 1;      /* Transmission Conflict on Channel B. Protocol related variabl .. */
                vuint16_t VFA : 1;      /* Valid Frame on Channel A. Protocol related variable: */
                vuint16_t SYA : 1;      /* Sync Frame Indicator Channel A. Protocol related variable: */
                vuint16_t NFA : 1;      /* Null Frame Indicator Channel A. Protocol related variable: */
                vuint16_t SUA : 1;      /* Startup Frame Indicator Channel A. Protocol related variable .. */
                vuint16_t SEA : 1;      /* Syntax Error on Channel A. Protocol related variable: */
                vuint16_t CEA : 1;      /* Content Error on Channel A. Protocol related variable: */
                vuint16_t BVA : 1;      /* Boundary Violation on Channel A. Protocol related variable: */
                vuint16_t TCA : 1;      /* Transmission Conflict on Channel A. Protocol related variabl .. */
            } B;
        } SSR6;      /* Slot Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t VFB : 1;      /* Valid Frame on Channel B. Protocol related variable: */
                vuint16_t SYB : 1;      /* Sync Frame Indicator Channel B. Protocol related variable: */
                vuint16_t NFB : 1;      /* Null Frame Indicator Channel B. Protocol related variable: */
                vuint16_t SUB : 1;      /* Startup Frame Indicator Channel B. Protocol related variable .. */
                vuint16_t SEB : 1;      /* Syntax Error on Channel B. Protocol related variable: */
                vuint16_t CEB : 1;      /* Content Error on Channel B. Protocol related variable: */
                vuint16_t BVB : 1;      /* Boundary Violation on Channel B. Protocol related variable: */
                vuint16_t TCB : 1;      /* Transmission Conflict on Channel B. Protocol related variabl .. */
                vuint16_t VFA : 1;      /* Valid Frame on Channel A. Protocol related variable: */
                vuint16_t SYA : 1;      /* Sync Frame Indicator Channel A. Protocol related variable: */
                vuint16_t NFA : 1;      /* Null Frame Indicator Channel A. Protocol related variable: */
                vuint16_t SUA : 1;      /* Startup Frame Indicator Channel A. Protocol related variable .. */
                vuint16_t SEA : 1;      /* Syntax Error on Channel A. Protocol related variable: */
                vuint16_t CEA : 1;      /* Content Error on Channel A. Protocol related variable: */
                vuint16_t BVA : 1;      /* Boundary Violation on Channel A. Protocol related variable: */
                vuint16_t TCA : 1;      /* Transmission Conflict on Channel A. Protocol related variabl .. */
            } B;
        } SSR7;      /* Slot Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t SLOTSTATUSCNT : 16;      /* Slot Status Counter. This field provides the current value o .. */
            } B;
        } SSCR0;      /* Slot Status Counter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t SLOTSTATUSCNT : 16;      /* Slot Status Counter. This field provides the current value o .. */
            } B;
        } SSCR1;      /* Slot Status Counter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t SLOTSTATUSCNT : 16;      /* Slot Status Counter. This field provides the current value o .. */
            } B;
        } SSCR2;      /* Slot Status Counter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t SLOTSTATUSCNT : 16;      /* Slot Status Counter. This field provides the current value o .. */
            } B;
        } SSCR3;      /* Slot Status Counter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTE : 1;      /* Media Access Test Symbol Transmission Enable. This control b .. */
                vuint16_t : 1;
                vuint16_t CYCCNTMSK : 6;      /* Cycle Counter Mask. This field provides the filter mask for  .. */
                vuint16_t : 2;
                vuint16_t CYCCNTVAL : 6;      /* Cycle Counter Value. This field provides the filter value fo .. */
            } B;
        } MTSACFR;      /* MTS A Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTE : 1;      /* Media Access Test Symbol Transmission Enable. This control b .. */
                vuint16_t : 1;
                vuint16_t CYCCNTMSK : 6;      /* Cycle Counter Mask. This field provides the filter mask for  .. */
                vuint16_t : 2;
                vuint16_t CYCCNTVAL : 6;      /* Cycle Counter Value. This field provides the filter value fo .. */
            } B;
        } MTSBCFR;      /* MTS B Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t WMD : 1;      /* Write Mode. This bit controls the write mode for this regist .. */
                vuint16_t : 1;
                vuint16_t SEL : 2;      /* Selector. This field is used to select the internal receive  .. */
                vuint16_t : 4;
                vuint16_t RSBIDX : 8;      /* Receive Shadow Buffer Index. This field contains the current .. */
            } B;
        } RSBIR;      /* Receive Shadow Buffer Index Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t WMA_WMB : 8;      /* Watermark - This field defines the watermark value for the s .. */
                vuint16_t : 7;
                vuint16_t SEL : 1;      /* Select. This control bit selects the receiver FIFO for subse .. */
            } B;
        } RFWMSR;      /* Receive FIFO Watermark and Selection Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t SIDXA_SIDXB : 10;      /* Start Index - This field defines the number of the message b .. */
            } B;
        } RFSIR;      /* Receive FIFO Start Index Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t FIFO_DEPTHA_FIFO_DEPTHB : 8;      /* FIFO Depth - This field defines the depth of the selected FI .. */
                vuint16_t : 1;
                vuint16_t ENTRY_SIZEA_ENTRY_SIZEB : 7;      /* Entry Size - This field defines the size of the frame data s .. */
            } B;
        } RFDSR;      /* Receive FIFO Depth and Size Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t RDIDX : 10;      /* Read Index. This field provides the message buffer header in .. */
            } B;
        } RFARIR;      /* Receive FIFO A Read Index Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 6;
                vuint16_t RDIDX : 10;      /* Read Index. This field provides the message buffer header in .. */
            } B;
        } RFBRIR;      /* Receive FIFO B Read Index Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MIDAFVALA_MIDAFVALB : 16;      /* Message ID Acceptance Filter Value - Filter value for the me .. */
            } B;
        } RFMIDAFVR;      /* Receive FIFO Message ID Acceptance Filter Value Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MIDAFMSKA_MIDAFMSKB : 16;      /* Message ID Acceptance Filter Mask - Filter mask for the mess .. */
            } B;
        } RFMIAFMR;      /* Receive FIFO Message ID Acceptance Filter Mask Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FIDRFVALA_FIDRFVALB : 11;      /* Frame ID Rejection Filter Value. Filter value for the frame  .. */
            } B;
        } RFFIDRFVR;      /* Receive FIFO Frame ID Rejection Filter Value Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FIDRFMSKA_FIDRFMSKB : 11;      /* Frame ID Rejection Filter Mask. Filter mask for the frame ID .. */
            } B;
        } RFFIDRFMR;      /* Receive FIFO Frame ID Rejection Filter Mask Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t WMD : 1;      /* Write Mode. This control bit defines the write mode of this  .. */
                vuint16_t IBD : 1;      /* Interval Boundary. This control bit selects the interval bou .. */
                vuint16_t SEL : 2;      /* Filter Selector. This control field selects the frame ID ran .. */
                vuint16_t : 1;
                vuint16_t SIDA_SIDB : 11;      /* Slot ID. Defines the IBD-selected frame ID boundary value fo .. */
            } B;
        } RFRFCFR;      /* Receive FIFO Range Filter Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 4;
                vuint16_t F3MD : 1;      /* Range Filter 3 Mode. This control bit defines the filter mod .. */
                vuint16_t F2MD : 1;      /* Range Filter 2 Mode. This control bit defines the filter mod .. */
                vuint16_t F1MD : 1;      /* Range Filter 1 Mode. This control bit defines the filter mod .. */
                vuint16_t F0MD : 1;      /* Range Filter 0 Mode. This control bit defines the filter mod .. */
                vuint16_t : 4;
                vuint16_t F3EN : 1;      /* Range Filter 3 Enable. This control bit is used to enable an .. */
                vuint16_t F2EN : 1;      /* Range Filter 2 Enable. This control bit is used to enable an .. */
                vuint16_t F1EN : 1;      /* Range Filter 1 Enable. This control bit is used to enable an .. */
                vuint16_t F0EN : 1;      /* Range Filter 0 Enable. This control bit is used to enable an .. */
            } B;
        } RFRFCTR;      /* Receive FIFO Range Filter Control Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t LASTDYNTXSLOTA : 11;      /* Last Dynamic Transmission Slot Channel A. Protocol related v .. */
            } B;
        } LDTXSLAR;      /* Last Dynamic Transmit Slot Channel A Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t LASTDYNTXSLOTB : 11;      /* Last Dynamic Transmission Slot Channel B. Protocol related v .. */
            } B;
        } LDTXSLBR;      /* Last Dynamic Transmit Slot Channel B Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ACTION_POINT_OFFSET : 6;      /*  */
                vuint16_t STATIC_SLOT_LENGTH : 10;      /*  */
            } B;
        } PCR0;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t MACRO_AFTER_FIRST_STATIC_SLOT : 14;      /*  */
            } B;
        } PCR1;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MINISLOT_AFTER_ACTION_POINT : 6;      /*  */
                vuint16_t NUMBER_OF_STATIC_SLOTS : 10;      /*  */
            } B;
        } PCR2;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t WAKEUP_SYMBOL_RX_LOW : 6;      /*  */
                vuint16_t MINISLOT_ACTION_POINT_OFFSET_4_0 : 5;      /*  */
                vuint16_t COLDSTART_ATTEMPTS : 5;      /*  */
            } B;
        } PCR3;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CAS_RX_LOW_MAX : 7;      /*  */
                vuint16_t WAKEUP_SYMBOL_RX_WINDOW : 9;      /*  */
            } B;
        } PCR4;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t TSS_TRANSMITTER : 4;      /*  */
                vuint16_t WAKEUP_SYMBOL_TX_LOW : 6;      /*  */
                vuint16_t WAKEUP_SYMBOL_RX_IDLE : 6;      /*  */
            } B;
        } PCR5;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t SYMBOL_WINDOW_AFTER_ACTION_POINT : 8;      /*  */
                vuint16_t MACRO_INITIAL_OFFSET_A : 7;      /*  */
            } B;
        } PCR6;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DECODING_CORRECTION_B : 9;      /*  */
                vuint16_t MICRO_PER_MACRO_NOM_HALF : 7;      /*  */
            } B;
        } PCR7;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MAX_WITHOUT_CLOCK_CORRECTION_FATAL : 4;      /*  */
                vuint16_t MAX_WITHOUT_CLOCK_CORRECTION_PASSIVE : 4;      /*  */
                vuint16_t WAKEUP_SYMBOL_TX_IDLE : 8;      /*  */
            } B;
        } PCR8;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MINISLOT_EXISTS : 1;      /*  */
                vuint16_t SYMBOL_WINDOW_EXISTS : 1;      /*  */
                vuint16_t OFFSET_CORRECTION_OU : 14;      /*  */
            } B;
        } PCR9;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t SINGLE_SLOT_ENABLED : 1;      /*  */
                vuint16_t WAKEUP_CHANNEL : 1;      /*  */
                vuint16_t MACRO_PER_CYCLE : 14;      /*  */
            } B;
        } PCR10;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t KEY_SLOT_USED_FOR_STARTUP : 1;      /*  */
                vuint16_t KEY_SLOT_USED_FOR_SYNC : 1;      /*  */
                vuint16_t OFFSET_CORRECTION_START : 14;      /*  */
            } B;
        } PCR11;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ALLOW_PASSIVE_TO_ACTIVE : 5;      /*  */
                vuint16_t KEY_SLOT_HEADER_CRC : 11;      /*  */
            } B;
        } PCR12;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t FIRST_MINISLOT_ACTION_POINT_OFFSET : 6;      /*  */
                vuint16_t STATIC_SLOT_AFTER_ACTION_POINT : 10;      /*  */
            } B;
        } PCR13;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t RATE_CORRECTION_OUT : 11;      /*  */
                vuint16_t LISTEN_TIMEOUT_20_16 : 5;      /*  */
            } B;
        } PCR14;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t LISTEN_TIMEOUT_15_0 : 15;      /*  */
            } B;
        } PCR15;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MACRO_INITIAL_OFFSET_B : 7;      /*  */
                vuint16_t NOISE_LISTEN_TIMEOUT_24_16 : 9;      /*  */
            } B;
        } PCR16;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t NOISE_LISTEN_TIMEOUT_15_0 : 15;      /*  */
            } B;
        } PCR17;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t WAKEUP_PATTERN : 6;      /*  */
                vuint16_t KEY_SLOT_ID : 10;      /*  */
            } B;
        } PCR18;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DECODING_CORRECTION_A : 9;      /*  */
                vuint16_t PAYLOAD_LENGTH_STATIC : 7;      /*  */
            } B;
        } PCR19;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MICRO_INITIAL_OFFSET_B : 8;      /*  */
                vuint16_t MICRO_INITIAL_OFFSET_A : 8;      /*  */
            } B;
        } PCR20;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t EXTERN_RATE_CORRECTION : 3;      /*  */
                vuint16_t LATEST_TX : 13;      /*  */
            } B;
        } PCR21;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t COMP_ACCEPTED_STARTUP_RANGE_A : 11;      /*  */
                vuint16_t MICRO_PER_CYCLE_19_16 : 4;      /*  */
            } B;
        } PCR22;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MICRO_PER_CYCLE_15_0 : 15;      /*  */
            } B;
        } PCR23;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t CLUSTER_DRIFT_DAMPING : 5;      /*  */
                vuint16_t MAX_PAYLOAD_LENGTH_DYNAMIC : 7;      /*  */
                vuint16_t MICRO_PER_CYCLE_MINW : 4;      /* [19:16] ### */
            } B;
        } PCR24;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MICRO_PER_CYCLE_MIN_15_0 : 15;      /*  */
            } B;
        } PCR25;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t ALLOW_HALT_DUE_TO_CLOCK : 1;      /*  */
                vuint16_t COMP_ACCEPTED_STARTUP_RANGE_B : 11;      /*  */
                vuint16_t MICRO_PER_CYCLE_MAX_19_16 : 4;      /*  */
            } B;
        } PCR26;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MICRO_PER_CYCLE_MAX_15_0 : 15;      /*  */
            } B;
        } PCR27;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DYNAMIC_SLOT_IDLE_PHASE : 3;      /*  */
                vuint16_t MACRO_AFTER_OFFSET_CORRECTION : 14;      /*  */
            } B;
        } PCR28;      /* Protocol Configuration Register */

        int8_t Reserved194[2];

        union {
            vuint16_t R;
            struct {
                vuint16_t : 12;
                vuint16_t SYNC_NODE_MAX : 4;      /*  */
            } B;
        } PCR30;      /* Protocol Configuration Register */

        int8_t Reserved195[10];

        union {
            vuint16_t R;
            struct {
                vuint16_t SMBA : 16;      /* System Memory Base Address - This is the value of the system .. */
            } B;
        } RFSYMBADHR;      /* Receive FIFO System Memory Base Address High Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t SMBA : 12;      /* System Memory Base Address - This is the value of the system .. */
            } B;
        } RFSYMBADLR;      /* Receive FIFO System Memory Base Address Low Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 2;
                vuint16_t PTD : 14;      /* Periodic Timer Duration - This value defines the periodic ti .. */
            } B;
        } RFPTR;      /* Receive FIFO Periodic Timer Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t FLB_PCB : 8;      /* Fill Level FIFO B - This field provides the current number o .. */
                vuint16_t FLA_PCA : 8;      /* Fill Level FIFO A- This field provides the current number of .. */
            } B;
        } RFFLPCR;      /* Receive FIFO Fill Level and POP Count Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t LRNE_OF : 1;      /* LRAM Non-Corrected Error Overflow Flag - This flag is set to .. */
                vuint16_t LRCE_OF : 1;      /* LRAM Corrected Error Overflow Flag - This flag is set to 1 w .. */
                vuint16_t DRNE_OF : 1;      /* DRAM Non-Corrected Error Overflow Flag - This flag is set to .. */
                vuint16_t DRCE_OF : 1;      /* DRAM Corrected Error Overflow Flag - This flag is set to 1 w .. */
                vuint16_t LRNE_IF : 1;      /* LRAM Non-Corrected Error Interrupt Flag - This interrupt fla .. */
                vuint16_t LRCE_IF : 1;      /* LRAM Corrected Error Interrupt Flag - This interrupt flag is .. */
                vuint16_t DRNE_IF : 1;      /* DRAM Non-Corrected Error Interrupt Flag - This interrupt fla .. */
                vuint16_t DRCE_IF : 1;      /* DRAM Corrected Error Interrupt Flag - This interrupt flag is .. */
                vuint16_t : 4;
                vuint16_t LRNE_IE : 1;      /* LRAM Non-Corrected Error Interrupt Enable - This flag contro .. */
                vuint16_t LRCE_IE : 1;      /* LRAM Corrected Error Interrupt Enable - This flag controls i .. */
                vuint16_t DRNE_IE : 1;      /* DRAM Non-Corrected Error Interrupt Enable - This flag contro .. */
                vuint16_t DRCE_IE : 1;      /* DRAM Corrected Error Interrupt Enable - This flag controls i .. */
            } B;
        } EEIFER;      /* ECC Error Interrupt Flag and Enable Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t BSY : 1;      /* Register Update Busy - This field indicates the current stat .. */
                vuint16_t : 5;
                vuint16_t ERS : 2;      /* Error Report Select - This field selects the content of the  .. */
                vuint16_t : 3;
                vuint16_t ERM : 1;      /* Error Report Mode - This bit configures the type of data wri .. */
                vuint16_t : 2;
                vuint16_t EIM : 1;      /* Error Injection Mode - This bit configures the ECC error inj .. */
                vuint16_t EIE : 1;      /* Error Injection Enable - This bit configures the ECC error i .. */
            } B;
        } EERICR;      /* Protocol Configuration Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MID : 1;      /* Memory Identifier - This flag provides the memory instance f .. */
                vuint16_t BANK : 3;      /* Memory Bank - This field provides the BANK for which the mem .. */
                vuint16_t ADDR : 12;      /* Memory Address - This field provides the address of the fail .. */
            } B;
        } EERAR;      /* ECC Error Report Address Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DATA : 16;      /* Data - The content of this field depends on the report mode  .. */
            } B;
        } EERDR;      /* ECC Error Report Data Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t CODE : 5;      /* Code - The content of this field depends on the report mode  .. */
            } B;
        } EERCR;      /* ECC Error Report Code Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t MID : 1;      /* Memory Identifier - This flag provides the memory instance f .. */
                vuint16_t BANK : 3;      /* Memory Bank - This field provides the BANK for which the mem .. */
                vuint16_t ADDR : 12;      /* Memory Address - This field provides the address of the fail .. */
            } B;
        } EEIAR;      /* ECC Error Injection Address Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t DATA : 16;      /* Data - The content of this field depends on the error inject .. */
            } B;
        } EEIDR;      /* ECC Error Injection Data Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 11;
                vuint16_t CODE : 5;      /* Code - The content of this field depends on the error inject .. */
            } B;
        } EEICR;      /* ECC Error Injection Code Register */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR0;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR0;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR0;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR0;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR1;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR1;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR1;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR1;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR2;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR2;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR2;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR2;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR3;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR3;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR3;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR3;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR4;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR4;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR4;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR4;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR5;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR5;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR5;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR5;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR6;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR6;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR6;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR6;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR7;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR7;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR7;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR7;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR8;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR8;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR8;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR8;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR9;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR9;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR9;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR9;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR10;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR10;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR10;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR10;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR11;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR11;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR11;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR11;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR12;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR12;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR12;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR12;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR13;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR13;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR13;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR13;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR14;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR14;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR14;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR14;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR15;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR15;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR15;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR15;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR16;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR16;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR16;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR16;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR17;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR17;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR17;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR17;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR18;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR18;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR18;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR18;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR19;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR19;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR19;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR19;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR20;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR20;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR20;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR20;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR21;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR21;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR21;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR21;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR22;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR22;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR22;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR22;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR23;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR23;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR23;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR23;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR24;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR24;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR24;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR24;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR25;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR25;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR25;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR25;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR26;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR26;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR26;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR26;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR27;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR27;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR27;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR27;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR28;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR28;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR28;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR28;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR29;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR29;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR29;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR29;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR30;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR30;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR30;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR30;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR31;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR31;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR31;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR31;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR32;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR32;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR32;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR32;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR33;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR33;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR33;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR33;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR34;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR34;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR34;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR34;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR35;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR35;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR35;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR35;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR36;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR36;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR36;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR36;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR37;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR37;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR37;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR37;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR38;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR38;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR38;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR38;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR39;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR39;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR39;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR39;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR40;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR40;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR40;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR40;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR41;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR41;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR41;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR41;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR42;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR42;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR42;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR42;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR43;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR43;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR43;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR43;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR44;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR44;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR44;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR44;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR45;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR45;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR45;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR45;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR46;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR46;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR46;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR46;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR47;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR47;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR47;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR47;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR48;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR48;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR48;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR48;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR49;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR49;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR49;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR49;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR50;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR50;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR50;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR50;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR51;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR51;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR51;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR51;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR52;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR52;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR52;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR52;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR53;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR53;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR53;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR53;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR54;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR54;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR54;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR54;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR55;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR55;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR55;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR55;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR56;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR56;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR56;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR56;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR57;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR57;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR57;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR57;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR58;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR58;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR58;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR58;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR59;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR59;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR59;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR59;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR60;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR60;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR60;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR60;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR61;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR61;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR61;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR61;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR62;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR62;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR62;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR62;      /* Message Buffer Index Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 1;
                vuint16_t FLEX_MCM : 1;      /* Message Buffer Commit Mode. This bit applies only to double  .. */
                vuint16_t MBT : 1;      /* Message Buffer Type. This bit applies only to transmit messa .. */
                vuint16_t MTD : 1;      /* Message Buffer Transfer Direction. This bit defines the tran .. */
                vuint16_t CMT : 1;      /* Commit for Transmission. This bit applies only to transmit m .. */
                vuint16_t EDT : 1;      /* Enable/Disable Trigger. This trigger bit is used to enable a .. */
                vuint16_t LCKT : 1;      /* Lock/Unlock Trigger. This trigger bit is used to lock and un .. */
                vuint16_t MBIE : 1;      /* Message Buffer Interrupt Enable. This control bit defines wh .. */
                vuint16_t : 3;
                vuint16_t DUP : 1;      /* Data Updated. This status bit applies only to receive messag .. */
                vuint16_t DVAL : 1;      /* Data Valid. The semantic of this status bit depends on the m .. */
                vuint16_t EDS : 1;      /* Enable/Disable Status. This status bit indicates whether the .. */
                vuint16_t LCKS : 1;      /* Lock Status. This status bit indicates the current lock stat .. */
                vuint16_t MBIF : 1;      /* Message Buffer Interrupt Flag. The semantic of this flag dep .. */
            } B;
        } MBCCSR63;      /* Message Buffer Configuration, Control, Status Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t MTM : 1;      /* Message Buffer Transmission Mode. This control bit applies o .. */
                vuint16_t CHA : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CHB : 1;      /* Channel Assignment. These control bits define the channel as .. */
                vuint16_t CCFE : 1;      /* Cycle Counter Filtering Enable. This control bit is used to  .. */
                vuint16_t CCFMSK : 6;      /* Cycle Counter Filtering Mask. This field defines the filter  .. */
                vuint16_t CCFVAL : 6;      /* Cycle Counter Filtering Value. This field defines the filter .. */
            } B;
        } MBCCFR63;      /* Message Buffer Cycle Counter Filter Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 5;
                vuint16_t FID : 11;      /* Frame ID - The semantic of this field depends on the message .. */
            } B;
        } MBFIDR63;      /* Message Buffer Frame ID Registers */

        union {
            vuint16_t R;
            struct {
                vuint16_t : 9;
                vuint16_t MBIDX : 7;      /* Message Buffer Index. This field provides the index of the m .. */
            } B;
        } MBIDXR63;      /* Message Buffer Index Registers */
    };                                             /* End of FLEXRAY_tag */ 
#define FLEXRAY  (*(volatile struct FLEXRAY_tag *)      0xFFFE0000UL)

/*---------------------------------------------------------------------------*/
/* Nexus Port Controller                                                     */
/*---------------------------------------------------------------------------*/

#endif /* __MPC5643L_H__  */

