/*
 * DemoTrace.pts
 * Created on 04.11.2014 15:15:29
 */

include "pkg/Targets.pts";
include "pkg/Units.pts";
include "pkg/Common.pts";

test DemoTraceCPUStimCPU : Demonstrator_PPC default Core1
{
    Common.bootToMain();
	
	// This starts a background task
	// changing the rpm_tar_CAN variable
	// via ic5000 Debugger
	concurrent
	{
		rpm_tar_CAN = -3000;
		wait 1.5s;
		rpm_tar_CAN = 1500;
		wait 1.5s;
		rpm_tar_CAN = 3000;
	}
	
	// This configures and starts a trace session
	// Both cores should start execution at their
	// mainLoop. Both cores do not do any work here
	// as they are interrupt-driven.
	report info : "Starting trace...";
	realtime timeout 4s
	{
	    Core0.run_app();
        Core1.run_app();
	}

	// When the trace session is complete (timed out)
	// this analyze block is executed.
	// It calculates the time between two interrupts
	// for one of the hall sensors and the respective
	// execution time to handle the interrupt.
	analyze
	{
		double t0 = 0;
		while (!Runtime:EOT)
		{
			wait until Core0.etimer00ISR´called;
			capture double isrTimeBetween = Runtime:Timestamp - t0;
			t0 = Runtime:Timestamp;
			
			wait until Core0.etimer00ISR´returned;
			capture double isrExecTime = Runtime:Timestamp - t0;
		}
	}
	
	// This creates a plot showing the RPM value as
	// measured by the µController and the internal
	// target value
	plot RPM_Analysis range [0s, 5s]
	{
		Drehzahl_ist  : Core0.rpm      range [-3500, 3500] ;
		Drehzahl_soll : Core0.rpm_tar  range [-3500, 3500] hold;
	}
	
	// This creates a plot based on data calculated
	// in the previous analyze section which again is
	// based on data recorded in the trace session
	// (the ISR execution time and time between interrupts)
	plot Timing_Analysis range [0s, 5s]
	{
		Exec_Time               : isrExecTime     range [3us, 1us];
		Time_Between_Interrupts : isrTimeBetween  range [0ms, 10ms];
	}
	
	report info : "Test execution completed.";
}