/*
* generated by Xtext
*/
package fzi.mottem.ptspec.dsl.ui.labeling;

import org.eclipse.xtext.nodemodel.util.NodeModelUtils;

import com.google.inject.Inject;

import fzi.mottem.ptspec.dsl.common.PTSpecUtils;
import fzi.mottem.ptspec.dsl.pTSpec.PTSDeclarator;
import fzi.mottem.ptspec.dsl.pTSpec.PTSPackageDeclaration;
import fzi.mottem.ptspec.dsl.pTSpec.PTSPackageFuncParameter;
import fzi.mottem.ptspec.dsl.pTSpec.PTSPackageFuncParameterDeclaration;
import fzi.mottem.ptspec.dsl.pTSpec.PTSPackageFunction;
import fzi.mottem.ptspec.dsl.pTSpec.PTSPackageFunctionDeclaration;
import fzi.mottem.ptspec.dsl.pTSpec.PTSPackageVariable;
import fzi.mottem.ptspec.dsl.pTSpec.PTSPackageVariableDeclaration;
import fzi.mottem.ptspec.dsl.pTSpec.PTSTargetDeclaration;
import fzi.mottem.ptspec.dsl.pTSpec.PTSTestDeclaration;
import fzi.mottem.ptspec.dsl.pTSpec.PTSTestSuiteDeclaration;
import fzi.mottem.ptspec.dsl.pTSpec.PTSTestVariableDeclaration;
import fzi.util.ecore.EcoreUtils;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
public class PTSpecLabelProvider extends org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
{

	@Inject
	public PTSpecLabelProvider(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate)
	{
		super(delegate);
	}

	String image(PTSPackageDeclaration ele)
	{
		return PTSpecUtils.getImageName(ele.eClass());
	}
	
	String image(PTSTestVariableDeclaration ele)
	{
		return PTSpecUtils.getImageName(ele.eClass());
	}
	
	String image(PTSPackageVariableDeclaration ele)
	{
		return PTSpecUtils.getImageName(ele.eClass());
	}
	
	String image(PTSPackageFunctionDeclaration ele)
	{
		return PTSpecUtils.getImageName(ele.eClass());
	}
	
	String image(PTSPackageFuncParameterDeclaration ele)
	{
		return PTSpecUtils.getImageName(ele.eClass());
	}
	
	String image(PTSTargetDeclaration ele)
	{
		return PTSpecUtils.getImageName(ele.eClass());
	}
	
	String image(PTSTestDeclaration ele)
	{
		return PTSpecUtils.getImageName(ele.eClass());
	}
	
	String image(PTSTestSuiteDeclaration ele)
	{
		return PTSpecUtils.getImageName(ele.eClass());
	}
	
	String text(PTSTestVariableDeclaration ele)
	{
		PTSDeclarator declarator = EcoreUtils.getContainerInstanceOf(ele, PTSDeclarator.class);
		return PTSpecUtils.getDisplayName(declarator.getDataType()) + " " + ele.getName();
	}
	
	String text(PTSPackageFunctionDeclaration ele)
	{
		PTSPackageFunction pkgFunc = EcoreUtils.getContainerInstanceOf(ele, PTSPackageFunction.class);
		return PTSpecUtils.getDisplayName(pkgFunc.getReturnDataType()) + " " + ele.getName() + "(" + NodeModelUtils.findActualNodeFor(pkgFunc.getParameterList()).getText().trim() + ")";
	}
	
	String text(PTSPackageVariableDeclaration ele)
	{
		PTSPackageVariable pkgConst = EcoreUtils.getContainerInstanceOf(ele, PTSPackageVariable.class);
		return PTSpecUtils.getDisplayName(pkgConst.getDataType()) + " " + ele.getName();
	}
	
	String text(PTSPackageFuncParameterDeclaration ele)
	{
		PTSPackageFuncParameter param = EcoreUtils.getContainerInstanceOf(ele, PTSPackageFuncParameter.class);
		return PTSpecUtils.getDisplayName(param.getDataType()) + " " + ele.getName();
	}
}
