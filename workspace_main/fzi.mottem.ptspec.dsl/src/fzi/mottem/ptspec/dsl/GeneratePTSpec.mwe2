module fzi.mottem.ptspec.dsl.GeneratePTSpec

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/fzi/mottem/ptspec/dsl/PTSpec.xtext"
var fileExtensions = "ets"
var projectName = "fzi.mottem.ptspec.dsl"
var runtimeProject = "../${projectName}"

// if set to true, this will generate .xtend files als basis for own implementation, otherwise .java :)
var generateXtendStub = false

Workflow {
    bean = StandaloneSetup {
    	scanClassPath = true
    	platformUri = "${runtimeProject}/.."
    	
    	// ---------------------------------------------------------------------------------------------
    	// for GenModel
        uriMap = {
            from = "platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore"
            to = "platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.ecore"
        }
        uriMap = {
            from = "platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel"
            to = "platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel"
        }
    	registerGeneratedEPackage = "org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage"
    	registerGenModelFile = "platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel"
    	
    	// ---------------------------------------------------------------------------------------------
    	// for Ecore
        uriMap = {
            from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"
            to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
        }
        uriMap = {
            from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel"
            to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
        }
    	registerGeneratedEPackage = "org.eclipse.emf.ecore.EcorePackage"
    	registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
    	
    	// ---------------------------------------------------------------------------------------------
    	// for WrapperModel
        uriMap = {
            from = "platform:/plugin/fzi.mottem.model/model/WrapperModel.ecore"
            to = "platform:/resource/fzi.mottem.model/model/WrapperModel.ecore"
        }
        uriMap = {
            from = "platform:/plugin/fzi.mottem.model/model/WrapperModel.genmodel"
            to = "platform:/resource/fzi.mottem.model/model/WrapperModel.genmodel"
        }
    	registerGeneratedEPackage="fzi.mottem.model.baseelements.BaseelementsPackage"
    	registerGeneratedEPackage="fzi.mottem.model.codemodel.CodemodelPackage"
    	registerGeneratedEPackage="fzi.mottem.model.datastreammodel.DatastreammodelPackage"
    	registerGeneratedEPackage="fzi.mottem.model.environmentdatamodel.EnvironmentdatamodelPackage"
    	registerGeneratedEPackage="fzi.mottem.model.testrigmodel.TestrigmodelPackage"
    	
    	registerGenModelFile = "platform:/resource/fzi.mottem.model/model/WrapperModel.genmodel"
    	registerEcoreFile = "platform:/resource/fzi.mottem.model/model/WrapperModel.ecore"

        // ---------------------------------------------------------------------------------------------
        // for JavaVMTypes
    	registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}/src-gen"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}.ui/src-gen"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}.tests/src-gen"
    }
    
    component = Generator {
    	pathRtProject = runtimeProject
    	pathUiProject = "${runtimeProject}.ui"
    	pathTestProject = "${runtimeProject}.tests"
    	projectNameRt = projectName
    	projectNameUi = "${projectName}.ui"
    	language = auto-inject {
    		uri = grammarURI
    
    		// Java API to access grammar elements (required by several other fragments)
    		fragment = grammarAccess.GrammarAccessFragment auto-inject {}
    
    		// generates Java API for the generated EPackages
    		fragment = ecore.EcoreGeneratorFragment auto-inject {
    		// referencedGenModels = "
    		//  platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
    		//  platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
    		// "
    		}
    
    		// the old serialization component
    		// fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}    
    
    		// serializer 2.0
    		fragment = serializer.SerializerFragment auto-inject {
    			generateStub = false
    		}
    
    		// a custom ResourceFactory for use with EMF
    		fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
    
    		// The antlr parser generator fragment.
    		fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
    		//  options = {
    		//      backtrack = true
    		//  }
    		}
    
    		// Xtend-based API for validation
    		fragment = validation.ValidatorFragment auto-inject {
    			// this is a workaround because stub is generated as .xtend instead of .java
    			// even though generateXtendStub = false is set...
    			generateStub = false

    			// composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
    			// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
    		}
    
    		// old scoping and exporting API
    		//fragment = scoping.ImportURIScopingFragment auto-inject {}
    		//fragment = exporting.SimpleNamesFragment auto-inject {}
    
    		// scoping and exporting API
    		fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
    		fragment = exporting.QualifiedNamesFragment auto-inject {}
    		//fragment = builder.BuilderIntegrationFragment auto-inject {}
    
    		// generator API
    		fragment = generator.GeneratorFragment auto-inject {
    			// this is a workaround because stub is generated as .xtend instead of .java
    			// even though generateXtendStub = false is set...
    			generateStub = false
    		}
    
    		// formatter API
    		fragment = formatting.FormatterFragment auto-inject {}
    
    		// labeling API
    		fragment = labeling.LabelProviderFragment auto-inject {}
    
    		// outline API
    		fragment = outline.OutlineTreeProviderFragment auto-inject {}
    		fragment = outline.QuickOutlineFragment auto-inject {}
    
    		// quickfix API
    		fragment = quickfix.QuickfixProviderFragment auto-inject {}
    
    		// content assist API
    		fragment = contentAssist.ContentAssistFragment auto-inject {
    			// this is a workaround because stub is generated as .xtend instead of .java
    			// even though generateXtendStub = false is set...
    			generateStub = false
    		}
    
    		// generates a more lightweight Antlr parser and lexer tailored for content assist
    		fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
    
    		// generates junit test support classes into Generator#pathTestProject
    		fragment = junit.Junit4Fragment auto-inject {}
    
    		// project wizard
    		// commented out because generated code is replaced (see fzi.mottem.ptspec.dsl.ui.wizard)
    		//fragment = projectWizard.SimpleProjectWizardFragment auto-inject {
    		//      generatorProjectName = "${projectName}"
    		//      modelFileExtension = "${fileExtensions}"
    		//}
    
    		// rename refactoring
    		fragment = refactoring.RefactorElementNameFragment auto-inject {}
    
    		// provides the necessary bindings for java types integration
    		// CAUTION: this causes VERY strange behaviour if used together with importURI
    		//          and custom ResourceService providers to index custom ecore models...
    		fragment = types.TypesGeneratorFragment auto-inject {}
    
    		// generates the required bindings only if the grammar inherits from Xbase
    		fragment = xbase.XbaseGeneratorFragment auto-inject {}
    
    		// provides a preference page for template proposals
    		fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
    
    		// provides a compare view
    		fragment = compare.CompareFragment auto-inject {}
    	}
    }
}

