<%@jet class="JET_PackageDeclaration" package="fzi.mottem.ptspec.compiler.precompiled" skeleton="_template.skeleton" imports="fzi.mottem.jjet.interfaces.* org.eclipse.emf.common.util.URI org.eclipse.xtext.nodemodel.util.* fzi.util.eclipse.* fzi.util.ecore.* fzi.util.xtext.* fzi.mottem.ptspec.dsl.pTSpec.* fzi.mottem.ptspec.compiler.util.* fzi.mottem.ptspec.compiler.workers.*" %>
<%
	PTSWorker ptsWorker = new PTSWorker(context);
	PTSPackageDeclaration packageDeclaration = (PTSPackageDeclaration)context.getArgument();
	String className = PTS2JavaUtil.getJavaClassName(packageDeclaration);
	context.setOutputFile(IntegrationUtils.packageNameToPath(PTS2JavaUtil.getJavaPtsPackagePackageName()), className + ".java");
    context.setBuffer(stringBuffer);
%>
/*
 * Autogenerated class <%= className %>
 */

package <%= PTS2JavaUtil.getJavaPtsPackagePackageName() %>;

import java.util.*;

import <%= PTS2JavaUtil.getJavaPtsPackagePackageName() %>.*;

import fzi.mottem.runtime.interfaces.IRuntime;
import fzi.mottem.runtime.interfaces.ITest;
import fzi.mottem.runtime.interfaces.ITrace;
import fzi.mottem.runtime.interfaces.IPackage;
import fzi.mottem.runtime.interfaces.IUIDResolver;

import fzi.mottem.runtime.EItemProperty;
import fzi.mottem.runtime.Trace;
import fzi.mottem.runtime.EEvent;

import fzi.mottem.runtime.util.AbstractAsyncExecutable;
import fzi.mottem.runtime.util.PTSpecRuntimeUtil;

<%
PTSRoot root = EcoreUtils.getContainerInstanceOf(packageDeclaration, PTSRoot.class);

URI packageUri = packageDeclaration.eResource().getURI();

for (PTSJavaImport psi : root.getImports())
{
%>
import <%= XtextUtils.getTextForFeature(psi, PTSpecPackage.Literals.PTS_JAVA_IMPORT__IMPORTED_TYPE) %>;
<%
}
%>

@SuppressWarnings("unused")
public class <%= className %> implements IPackage
{
	private final String NAME            = "<%= packageDeclaration.getName() %>";
	private final String SOURCE_PROJECT  = "<%= EcoreUtils.getFileForEMFURI2(packageUri).getProject().getName() %>";
	private final String SOURCE_FILE_URI = "<%= packageUri.toPlatformString(true) %>";
	private final int    SOURCE_OFFEST   = <%= NodeModelUtils.findActualNodeFor(packageDeclaration).getOffset() %>;
	private final int    SOURCE_LENGTH   = <%= NodeModelUtils.findActualNodeFor(packageDeclaration).getLength() %>;

	// Access provider for runtime
	private final IRuntime <%= PTS2JavaUtil.RUNTIME_INSTANCE_NAME %>;
	private final IUIDResolver <%= PTS2JavaUtil.UIDRESOLVER_NAME %>;
	
	// Access provider for this test package
	private final ITest <%= PTS2JavaUtil.TEST_INSTANCE_NAME %>;
	
	// Instances for referenced packages
<%
	for (PTSPackageDeclaration pkgDecl : PTSCompilerUtil.getAllReferencedPackages(packageDeclaration))
	{
		if (pkgDecl == packageDeclaration)
			continue;
%>
	private final <%= PTS2JavaUtil.getJavaClassName(pkgDecl) %> <%= PTS2JavaUtil.getJavaAccessProviderName(pkgDecl, null) %>;
<%
	}
%>
	
	// Constructor
	public <%= className %>(IRuntime runtime, ITest test)
	{
		// Set the runtime instance
		<%= PTS2JavaUtil.RUNTIME_INSTANCE_NAME %> = runtime;
		<%= PTS2JavaUtil.UIDRESOLVER_NAME %> = runtime.getUIDResolver();
		
		<%= PTS2JavaUtil.TEST_INSTANCE_NAME %> = test;
		
		// Construct instances for referenced packages
<%
	for (PTSPackageDeclaration pkgDecl : PTSCompilerUtil.getAllReferencedPackages(packageDeclaration))
	{
		if (pkgDecl == packageDeclaration)
			continue;
%>
		<%= PTS2JavaUtil.getJavaAccessProviderName(pkgDecl, null) %> = new <%= PTS2JavaUtil.getJavaClassName(pkgDecl) %>(runtime, test);
<%
	}
%>
	}

<%
	ptsWorker.compile_PTSPackageFunctions(packageDeclaration.getPackageElements());
%>

	@Override
	public double <%= PTS2JavaUtil.PACKAGE_UNIT_CONVERT_FUNC %>(double value, String unit)
	{
<%
	for(PTSPackageElement ele : packageDeclaration.getPackageElements())
	{
		if (ele instanceof PTSPackageUnit)
		{
			PTSPackageUnit pkgUnit = (PTSPackageUnit)ele;
%>
		if (unit.equals("<%= pkgUnit.getDeclaration().getName() %>"))
		{
			return <%= PTS2JavaUtil.getJavaConvertString(pkgUnit, "value") %>;
	    }
<%
		}
	}
%>
		throw new RuntimeException("Unit " + unit + " could not be resolved");
	}

	@Override
	public String getName()
	{
		return NAME;
	}

	@Override
	public String getProject()
	{
		return SOURCE_PROJECT;
	}
	
	@Override
	public String getSourceFileUri() 
	{
		return SOURCE_FILE_URI;
	}

	@Override
	public int getSourceOffset() 
	{
		return SOURCE_OFFEST;
	}

	@Override
	public int getSourceLength() 
	{
		return SOURCE_LENGTH;
	}
}