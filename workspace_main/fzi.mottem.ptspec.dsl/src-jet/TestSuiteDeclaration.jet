<%@jet class="JET_TestSuiteDeclaration" package="fzi.mottem.ptspec.compiler.precompiled" skeleton="_template.skeleton" imports="fzi.mottem.jjet.interfaces.* org.eclipse.emf.common.util.URI org.eclipse.xtext.nodemodel.util.* fzi.util.eclipse.* fzi.util.ecore.* fzi.util.xtext.* fzi.mottem.ptspec.dsl.pTSpec.* fzi.mottem.ptspec.compiler.util.*" %>
<%
	PTSTestSuiteDeclaration testSuiteDeclaration = (PTSTestSuiteDeclaration)context.getArgument();
	String className = PTS2JavaUtil.getJavaClassName(testSuiteDeclaration);
	context.setOutputFile(IntegrationUtils.packageNameToPath(PTS2JavaUtil.getJavaTestPackageName()), className + ".java");
    context.setBuffer(stringBuffer);
%>
/*
 * Autogenerated class <%= className %>
 */

package <%= PTS2JavaUtil.getJavaTestPackageName() %>;

import java.util.*;

<%
if (PTSCompilerUtil.getAllReferencedPackages(testSuiteDeclaration).size() > 0)
{
%>
import <%= PTS2JavaUtil.getJavaPtsPackagePackageName() %>.*;
<%
}
%>

import fzi.mottem.runtime.interfaces.IRuntime;
import fzi.mottem.runtime.interfaces.ITest;
import fzi.mottem.runtime.interfaces.ITestSuite;
import fzi.mottem.runtime.interfaces.ITrace;
import fzi.mottem.runtime.interfaces.ITraceEvaluator;
import fzi.mottem.runtime.interfaces.IUIDResolver;

import fzi.mottem.runtime.AbstractTest;
import fzi.mottem.runtime.Trace;
import fzi.mottem.runtime.EItemProperty;
import fzi.mottem.runtime.EEvent;

import fzi.mottem.runtime.util.ExecutionInterruptedException;
import fzi.mottem.runtime.util.AbstractAsyncExecutable;
import fzi.mottem.runtime.util.PTSpecRuntimeUtil;

import fzi.mottem.runtime.plotting.interfaces.IPTSpecPlot;
import fzi.mottem.runtime.plotting.PTSpecXYPlot;

<%
PTSRoot root = EcoreUtils.getContainerInstanceOf(testSuiteDeclaration, PTSRoot.class);

URI testUri = testSuiteDeclaration.eResource().getURI();
 
for (PTSJavaImport psi : root.getImports())
{
%>
import <%= XtextUtils.getTextForFeature(psi, PTSpecPackage.Literals.PTS_JAVA_IMPORT__IMPORTED_TYPE) %>;
<%
}
%>

@SuppressWarnings("unused")
public class <%= className %> extends AbstractTest implements ITestSuite
{
	// Public properties of the test; used be the framework
	private final String NAME            = "<%= testSuiteDeclaration.getName() %>";
	
	private final String SOURCE_PROJECT  = "<%= EcoreUtils.getFileForEMFURI2(testUri).getProject().getName() %>";
	private final String SOURCE_FILE_URI = "<%= testSuiteDeclaration.eResource().getURI().toPlatformString(true) %>";
	private final int    SOURCE_OFFEST   = <%= NodeModelUtils.findActualNodeFor(testSuiteDeclaration).getOffset() %>;
	private final int    SOURCE_LENGTH   = <%= NodeModelUtils.findActualNodeFor(testSuiteDeclaration).getLength() %>;

	// Collection of all tests in this suite
	private final ArrayList<ITest> allTests = new ArrayList<ITest>();
	
	// Access provider for runtime
	private final IRuntime <%= PTS2JavaUtil.RUNTIME_INSTANCE_NAME %>;
	private final IUIDResolver <%= PTS2JavaUtil.UIDRESOLVER_NAME %>;
	
	// Access provider for this test
	private final ITest <%= PTS2JavaUtil.TEST_INSTANCE_NAME %> = this;
	
	// Instances for referenced packages
<%
	for (PTSPackageDeclaration pkgDecl : PTSCompilerUtil.getAllReferencedPackages(testSuiteDeclaration))
	{
%>
	private final <%= PTS2JavaUtil.getJavaClassName(pkgDecl) %> <%= PTS2JavaUtil.getJavaAccessProviderName(pkgDecl, null) %>;
<%
	}
%>

	// Constructor
	public <%= className %>(IRuntime runtime)
	{
		// Set the runtime instance
		<%= PTS2JavaUtil.RUNTIME_INSTANCE_NAME %> = runtime;
		<%= PTS2JavaUtil.UIDRESOLVER_NAME %> = runtime.getUIDResolver();

		// 	Construct instances for referenced packages
<%
	for (PTSPackageDeclaration pkgDecl : PTSCompilerUtil.getAllReferencedPackages(testSuiteDeclaration))
	{
%>
		<%= PTS2JavaUtil.getJavaAccessProviderName(pkgDecl, null) %> = new <%= PTS2JavaUtil.getJavaClassName(pkgDecl) %>(runtime);
<%
	}
%>


		//add all my tests to the list
<%
	int testindex = 0;
	for (PTSTestDeclaration test : PTSCompilerUtil.getAllReferencedTests(testSuiteDeclaration))
	{
%>
	<%= PTS2JavaUtil.getJavaClassName(test) %> <%= PTS2JavaUtil.getJavaClassName(test) + testindex %> =  new <%= PTS2JavaUtil.getJavaClassName(test) %>(_pts_runtime);
	allTests.add(<%= PTS2JavaUtil.getJavaClassName(test) + testindex %>);

<%
	testindex++;
	}
%>
	}

	@Override
	public void init()
	{
		// initialize Runtime
	}
	
	@Override
	public void cleanup()
	{
		<%= PTS2JavaUtil.RUNTIME_INSTANCE_NAME %>.cleanup();
	}
	
	@Override
	public void run()
	{
		System.out.println("---run tests---");

		for (ITest test : allTests)
		{
	
		test.init();
		System.out.println("RUNNING TEST: " + test.getName());
		test.run();
		test.cleanup();
	
		}

	}

	@Override
	public String getName()
	{
		return NAME;
	}
	
	@Override
	public String getProject()
	{
		return SOURCE_PROJECT;
	}
	
	@Override
	public String getSourceFileUri() 
	{
		return SOURCE_FILE_URI;
	}
	
	
	@Override
	public int getSourceOffset() 
	{
		return SOURCE_OFFEST;
	}

	@Override
	public int getSourceLength() 
	{
		return SOURCE_LENGTH;
	}
	
	@Override
	public ArrayList<ITest> getAllTests() 
	{
		return allTests;
	}

}