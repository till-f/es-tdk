<%@jet class="JET_TestDeclaration" package="fzi.mottem.ptspec.compiler.precompiled" skeleton="_template.skeleton" imports="fzi.mottem.jjet.interfaces.* org.eclipse.emf.common.util.URI org.eclipse.xtext.nodemodel.util.* fzi.util.eclipse.* fzi.util.ecore.* fzi.util.xtext.* fzi.mottem.model.baseelements.IInspector fzi.mottem.ptspec.dsl.common.PTSpecUtils fzi.mottem.ptspec.dsl.pTSpec.* fzi.mottem.ptspec.compiler.util.* fzi.mottem.ptspec.compiler.workers.*" %>
<%
	PTSWorker ptsWorker = new PTSWorker(context);
	PTSTestDeclaration testDeclaration = (PTSTestDeclaration)context.getArgument();
	String className = PTS2JavaUtil.getJavaClassName(testDeclaration);
	context.setOutputFile(IntegrationUtils.packageNameToPath(PTS2JavaUtil.getJavaTestPackageName()), className + ".java");
    context.setBuffer(stringBuffer);
%>
/*
 * Autogenerated class <%= className %>
 */

package <%= PTS2JavaUtil.getJavaTestPackageName() %>;

import java.util.*;

<%
if (PTSCompilerUtil.getAllReferencedPackages(testDeclaration).size() > 0)
{
%>
import <%= PTS2JavaUtil.getJavaPtsPackagePackageName() %>.*;
<%
}
%>

import fzi.mottem.runtime.interfaces.IRuntime;
import fzi.mottem.runtime.interfaces.ITest;
import fzi.mottem.runtime.interfaces.ITrace;
import fzi.mottem.runtime.interfaces.ITraceEvaluator;
import fzi.mottem.runtime.interfaces.IUIDResolver;

import fzi.mottem.runtime.AbstractTest;
import fzi.mottem.runtime.Trace;
import fzi.mottem.runtime.TraceDB;
import fzi.mottem.runtime.EItemProperty;
import fzi.mottem.runtime.EEvent;

import fzi.mottem.runtime.util.ExecutionInterruptedException;
import fzi.mottem.runtime.util.AbstractAsyncExecutable;
import fzi.mottem.runtime.util.PTSpecRuntimeUtil;

import fzi.mottem.runtime.plotting.interfaces.IPTSpecPlot;
import fzi.mottem.runtime.plotting.PTSpecXYPlot;

import fzi.mottem.runtime.interfaces.IReportMessage;

<%
PTSRoot root = EcoreUtils.getContainerInstanceOf(testDeclaration, PTSRoot.class);

URI testUri = testDeclaration.eResource().getURI();

for (PTSJavaImport psi : root.getImports())
{
%>
import <%= XtextUtils.getTextForFeature(psi, PTSpecPackage.Literals.PTS_JAVA_IMPORT__IMPORTED_TYPE) %>;
<%
}
%>

@SuppressWarnings("unused")
public class <%= className %> extends AbstractTest
{
	private final String NAME            = "<%= testDeclaration.getName() %>";
	private final String SOURCE_PROJECT  = "<%= EcoreUtils.getFileForEMFURI2(testUri).getProject().getName() %>";
	private final String SOURCE_FILE_URI = "<%= testUri.toPlatformString(true) %>";
	private final int    SOURCE_OFFEST   = <%= NodeModelUtils.findActualNodeFor(testDeclaration).getOffset() %>;
	private final int    SOURCE_LENGTH   = <%= NodeModelUtils.findActualNodeFor(testDeclaration).getLength() %>;
	private final int    SOURCE_LINE     = <%= NodeModelUtils.findActualNodeFor(testDeclaration).getStartLine() %>;

	// Access provider for runtime
	private final IRuntime <%= PTS2JavaUtil.RUNTIME_INSTANCE_NAME %>;
	private final IUIDResolver <%= PTS2JavaUtil.UIDRESOLVER_NAME %>;
	
	// Access provider for this test
	private final ITest <%= PTS2JavaUtil.TEST_INSTANCE_NAME %> = this;
	
	// Instances for referenced packages
<%
	for (PTSPackageDeclaration pkgDecl : PTSCompilerUtil.getAllReferencedPackages(testDeclaration))
	{
%>
	private final <%= PTS2JavaUtil.getJavaClassName(pkgDecl) %> <%= PTS2JavaUtil.getJavaAccessProviderName(pkgDecl, null) %>;
<%
	}
%>

	// Constructor
	public <%= className %>(IRuntime runtime)
	{
		// Set the runtime instance
		<%= PTS2JavaUtil.RUNTIME_INSTANCE_NAME %> = runtime;
		<%= PTS2JavaUtil.UIDRESOLVER_NAME %> = runtime.getUIDResolver();

		// Construct instances for referenced packages
<%
	for (PTSPackageDeclaration pkgDecl : PTSCompilerUtil.getAllReferencedPackages(testDeclaration))
	{
%>
		<%= PTS2JavaUtil.getJavaAccessProviderName(pkgDecl, null) %> = new <%= PTS2JavaUtil.getJavaClassName(pkgDecl) %>(runtime, this);
<%
	}
%>
	}

	@Override
	public void init()
	{
		// initialize Runtime
		<%= PTS2JavaUtil.RUNTIME_INSTANCE_NAME %>.init(
<%
	boolean first = true;
	for (IInspector inspector : PTSpecUtils.getVisibleInspectors(testDeclaration))
	{
%>
			<%= (first ? " " : ",") %><%= PTS2JavaUtil.getJavaElementUID(inspector) %>
<%
		first = false;
	}
%>
		);
	}
	
	@Override
	public void cleanup()
	{
		<%= PTS2JavaUtil.RUNTIME_INSTANCE_NAME %>.cleanup();
	}
	
	@Override
	public void run()
	{
		try
		{
<%
	context.pushIndent(2);
	ptsWorker.compile(testDeclaration.getImplementation());
	context.popIndent();
%>
		}
		catch (ExecutionInterruptedException e)
		{
			<%= PTS2JavaUtil.RUNTIME_INSTANCE_NAME %>.report(this, "<%= testUri.toString() %>", SOURCE_OFFEST, SOURCE_LENGTH, SOURCE_LINE, <%= PTS_ESEVERITY.WARNING_VALUE %>, "Cancelation of test execution requested");
			return;
		}
	}

	@Override
	public String getName()
	{
		return NAME;
	}

	@Override
	public String getProject()
	{
		return SOURCE_PROJECT;
	}
	
	@Override
	public String getSourceFileUri() 
	{
		return SOURCE_FILE_URI;
	}

	@Override
	public int getSourceOffset() 
	{
		return SOURCE_OFFEST;
	}

	@Override
	public int getSourceLength() 
	{
		return SOURCE_LENGTH;
	}
}